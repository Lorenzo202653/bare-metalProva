// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axis_to_ddr_writer,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=3,HLS_SYN_FF=1304,HLS_SYN_LUT=1746}" *)

module axis_to_ddr_writer (
        ap_clk,
        ap_rst_n,
        inputStream_V_TDATA,
        inputStream_V_TVALID,
        inputStream_V_TREADY,
        m_axi_base_ddr_addr_AWVALID,
        m_axi_base_ddr_addr_AWREADY,
        m_axi_base_ddr_addr_AWADDR,
        m_axi_base_ddr_addr_AWID,
        m_axi_base_ddr_addr_AWLEN,
        m_axi_base_ddr_addr_AWSIZE,
        m_axi_base_ddr_addr_AWBURST,
        m_axi_base_ddr_addr_AWLOCK,
        m_axi_base_ddr_addr_AWCACHE,
        m_axi_base_ddr_addr_AWPROT,
        m_axi_base_ddr_addr_AWQOS,
        m_axi_base_ddr_addr_AWREGION,
        m_axi_base_ddr_addr_AWUSER,
        m_axi_base_ddr_addr_WVALID,
        m_axi_base_ddr_addr_WREADY,
        m_axi_base_ddr_addr_WDATA,
        m_axi_base_ddr_addr_WSTRB,
        m_axi_base_ddr_addr_WLAST,
        m_axi_base_ddr_addr_WID,
        m_axi_base_ddr_addr_WUSER,
        m_axi_base_ddr_addr_ARVALID,
        m_axi_base_ddr_addr_ARREADY,
        m_axi_base_ddr_addr_ARADDR,
        m_axi_base_ddr_addr_ARID,
        m_axi_base_ddr_addr_ARLEN,
        m_axi_base_ddr_addr_ARSIZE,
        m_axi_base_ddr_addr_ARBURST,
        m_axi_base_ddr_addr_ARLOCK,
        m_axi_base_ddr_addr_ARCACHE,
        m_axi_base_ddr_addr_ARPROT,
        m_axi_base_ddr_addr_ARQOS,
        m_axi_base_ddr_addr_ARREGION,
        m_axi_base_ddr_addr_ARUSER,
        m_axi_base_ddr_addr_RVALID,
        m_axi_base_ddr_addr_RREADY,
        m_axi_base_ddr_addr_RDATA,
        m_axi_base_ddr_addr_RLAST,
        m_axi_base_ddr_addr_RID,
        m_axi_base_ddr_addr_RUSER,
        m_axi_base_ddr_addr_RRESP,
        m_axi_base_ddr_addr_BVALID,
        m_axi_base_ddr_addr_BREADY,
        m_axi_base_ddr_addr_BRESP,
        m_axi_base_ddr_addr_BID,
        m_axi_base_ddr_addr_BUSER,
        frame_index_V,
        frame_count,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_pp0_stage0 = 11'd8;
parameter    ap_ST_fsm_state6 = 11'd16;
parameter    ap_ST_fsm_pp1_stage0 = 11'd32;
parameter    ap_ST_fsm_state10 = 11'd64;
parameter    ap_ST_fsm_state11 = 11'd128;
parameter    ap_ST_fsm_state12 = 11'd256;
parameter    ap_ST_fsm_state13 = 11'd512;
parameter    ap_ST_fsm_state14 = 11'd1024;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64;
parameter    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] inputStream_V_TDATA;
input   inputStream_V_TVALID;
output   inputStream_V_TREADY;
output   m_axi_base_ddr_addr_AWVALID;
input   m_axi_base_ddr_addr_AWREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1:0] m_axi_base_ddr_addr_AWADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_AWID;
output  [7:0] m_axi_base_ddr_addr_AWLEN;
output  [2:0] m_axi_base_ddr_addr_AWSIZE;
output  [1:0] m_axi_base_ddr_addr_AWBURST;
output  [1:0] m_axi_base_ddr_addr_AWLOCK;
output  [3:0] m_axi_base_ddr_addr_AWCACHE;
output  [2:0] m_axi_base_ddr_addr_AWPROT;
output  [3:0] m_axi_base_ddr_addr_AWQOS;
output  [3:0] m_axi_base_ddr_addr_AWREGION;
output  [C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH - 1:0] m_axi_base_ddr_addr_AWUSER;
output   m_axi_base_ddr_addr_WVALID;
input   m_axi_base_ddr_addr_WREADY;
output  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1:0] m_axi_base_ddr_addr_WDATA;
output  [C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH - 1:0] m_axi_base_ddr_addr_WSTRB;
output   m_axi_base_ddr_addr_WLAST;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_WID;
output  [C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH - 1:0] m_axi_base_ddr_addr_WUSER;
output   m_axi_base_ddr_addr_ARVALID;
input   m_axi_base_ddr_addr_ARREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1:0] m_axi_base_ddr_addr_ARADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_ARID;
output  [7:0] m_axi_base_ddr_addr_ARLEN;
output  [2:0] m_axi_base_ddr_addr_ARSIZE;
output  [1:0] m_axi_base_ddr_addr_ARBURST;
output  [1:0] m_axi_base_ddr_addr_ARLOCK;
output  [3:0] m_axi_base_ddr_addr_ARCACHE;
output  [2:0] m_axi_base_ddr_addr_ARPROT;
output  [3:0] m_axi_base_ddr_addr_ARQOS;
output  [3:0] m_axi_base_ddr_addr_ARREGION;
output  [C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH - 1:0] m_axi_base_ddr_addr_ARUSER;
input   m_axi_base_ddr_addr_RVALID;
output   m_axi_base_ddr_addr_RREADY;
input  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1:0] m_axi_base_ddr_addr_RDATA;
input   m_axi_base_ddr_addr_RLAST;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_RID;
input  [C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH - 1:0] m_axi_base_ddr_addr_RUSER;
input  [1:0] m_axi_base_ddr_addr_RRESP;
input   m_axi_base_ddr_addr_BVALID;
output   m_axi_base_ddr_addr_BREADY;
input  [1:0] m_axi_base_ddr_addr_BRESP;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_BID;
input  [C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH - 1:0] m_axi_base_ddr_addr_BUSER;
output  [7:0] frame_index_V;
output  [31:0] frame_count;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg[7:0] frame_index_V;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] inputStream_V_0_data_out;
wire    inputStream_V_0_vld_in;
wire    inputStream_V_0_vld_out;
wire    inputStream_V_0_ack_in;
reg    inputStream_V_0_ack_out;
reg   [7:0] inputStream_V_0_payload_A;
reg   [7:0] inputStream_V_0_payload_B;
reg    inputStream_V_0_sel_rd;
reg    inputStream_V_0_sel_wr;
wire    inputStream_V_0_sel;
wire    inputStream_V_0_load_A;
wire    inputStream_V_0_load_B;
reg   [1:0] inputStream_V_0_state;
wire    inputStream_V_0_state_cmp_full;
wire   [31:0] base_address;
wire   [31:0] frame_buffer_dim;
wire   [31:0] frame_buffer_offset;
wire   [7:0] frame_buffer_number;
wire    update_intr;
reg   [7:0] inner_index_V;
reg   [31:0] FRAME_OFFSET;
reg   [28:0] BASE_ADDRESS_r;
reg   [31:0] FRAME_BUFFER_DIM_r;
reg   [7:0] FRAME_BUFFER_NUMBER_r;
reg   [31:0] frame_count_inner;
reg    inputStream_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_674;
reg    base_ddr_addr_blk_n_AW;
wire    ap_CS_fsm_state6;
reg    base_ddr_addr_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_reg_714;
reg   [0:0] exitcond_reg_714_pp1_iter1_reg;
reg    base_ddr_addr_blk_n_B;
wire    ap_CS_fsm_state14;
reg    base_ddr_addr_AWVALID;
wire    base_ddr_addr_AWREADY;
wire   [31:0] base_ddr_addr_AWADDR;
reg    base_ddr_addr_WVALID;
wire    base_ddr_addr_WREADY;
wire    base_ddr_addr_ARREADY;
wire    base_ddr_addr_RVALID;
wire   [63:0] base_ddr_addr_RDATA;
wire    base_ddr_addr_RLAST;
wire   [0:0] base_ddr_addr_RID;
wire   [0:0] base_ddr_addr_RUSER;
wire   [1:0] base_ddr_addr_RRESP;
wire    base_ddr_addr_BVALID;
reg    base_ddr_addr_BREADY;
wire   [1:0] base_ddr_addr_BRESP;
wire   [0:0] base_ddr_addr_BID;
wire   [0:0] base_ddr_addr_BUSER;
reg   [12:0] indvar_flatten_reg_290;
reg   [9:0] j_reg_301;
reg   [63:0] temp_reg_312;
reg   [3:0] i_reg_324;
reg   [9:0] indvar_reg_335;
reg   [7:0] t_V_reg_638;
wire   [0:0] update_intr_read_read_fu_164_p2;
wire   [31:0] offset_fu_420_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_444_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] idx_1_fu_450_p2;
reg   [31:0] idx_1_reg_669;
wire   [0:0] exitcond_flatten_fu_515_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] indvar_flatten_next_fu_521_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_4_fu_533_p2;
reg   [0:0] tmp_4_reg_683;
wire   [9:0] j_mid2_fu_539_p3;
reg   [9:0] j_mid2_reg_688;
wire   [3:0] i_1_fu_553_p3;
reg   [3:0] i_1_reg_694;
wire   [63:0] temp_2_fu_578_p3;
reg    ap_sig_ioackin_base_ddr_addr_AWREADY;
wire   [0:0] exitcond_fu_607_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
reg    ap_sig_ioackin_base_ddr_addr_WREADY;
reg    ap_block_state9_io;
reg    ap_block_pp1_stage0_11001;
wire   [9:0] indvar_next_fu_613_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] buffer_q0;
reg   [63:0] buffer_load_reg_728;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] offset_1_fu_624_p2;
reg   [31:0] offset_1_reg_733;
wire    ap_CS_fsm_state10;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
wire   [8:0] buffer_address0;
reg    buffer_ce0;
wire   [8:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
wire   [63:0] buffer_d1;
reg   [31:0] i_op_assign_reg_251;
reg   [28:0] i_op_assign_1_reg_260;
reg  signed [31:0] offset1_reg_269;
reg   [31:0] idx_reg_279;
reg   [9:0] ap_phi_mux_j_phi_fu_305_p4;
reg   [3:0] ap_phi_mux_i_phi_fu_328_p4;
wire   [63:0] tmp_10_fu_592_p1;
wire   [0:0] ifzero_fu_587_p2;
wire   [63:0] indvar1_fu_619_p1;
wire  signed [63:0] tmp_9_fu_596_p1;
reg    ap_reg_ioackin_base_ddr_addr_AWREADY;
reg    ap_reg_ioackin_base_ddr_addr_WREADY;
wire    ap_block_pp1_stage0_01001;
wire   [7:0] p_tmp_7_fu_484_p3;
wire   [31:0] tmp_2_fu_502_p2;
reg   [7:0] frame_index_V_preg;
wire   [31:0] r_V_fu_404_p0;
wire   [7:0] r_V_fu_404_p1;
wire   [34:0] r_V_fu_404_p2;
wire   [31:0] tmp_8_fu_410_p4;
wire   [31:0] i_op_assign_1_cast_fu_393_p1;
wire   [19:0] tmp_s_fu_430_p4;
wire   [31:0] tmp_3_fu_440_p1;
wire   [8:0] tmp_2_cast_fu_460_p1;
wire   [8:0] tmp_4_cast_fu_470_p1;
wire   [8:0] op2_assign_fu_464_p2;
wire   [0:0] tmp_5_fu_473_p2;
wire   [7:0] tmp_7_fu_479_p2;
wire   [9:0] j_s_fu_527_p2;
wire   [3:0] i_op_fu_547_p2;
wire   [55:0] tmp_11_fu_561_p4;
wire   [55:0] temp_1_fu_571_p3;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [34:0] r_V_fu_404_p00;
wire   [34:0] r_V_fu_404_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 inputStream_V_0_sel_rd = 1'b0;
#0 inputStream_V_0_sel_wr = 1'b0;
#0 inputStream_V_0_state = 2'd0;
#0 inner_index_V = 8'd0;
#0 FRAME_OFFSET = 32'd307200;
#0 BASE_ADDRESS_r = 29'd0;
#0 FRAME_BUFFER_DIM_r = 32'd307200;
#0 FRAME_BUFFER_NUMBER_r = 8'd8;
#0 frame_count_inner = 32'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_reg_ioackin_base_ddr_addr_AWREADY = 1'b0;
#0 ap_reg_ioackin_base_ddr_addr_WREADY = 1'b0;
#0 frame_index_V_preg = 8'd0;
end

axis_to_ddr_writer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
axis_to_ddr_writer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .base_address(base_address),
    .frame_buffer_dim(frame_buffer_dim),
    .frame_buffer_offset(frame_buffer_offset),
    .frame_buffer_number(frame_buffer_number),
    .update_intr(update_intr)
);

axis_to_ddr_writer_base_ddr_addr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BASE_DDR_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BASE_DDR_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BASE_DDR_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE ))
axis_to_ddr_writer_base_ddr_addr_m_axi_U(
    .AWVALID(m_axi_base_ddr_addr_AWVALID),
    .AWREADY(m_axi_base_ddr_addr_AWREADY),
    .AWADDR(m_axi_base_ddr_addr_AWADDR),
    .AWID(m_axi_base_ddr_addr_AWID),
    .AWLEN(m_axi_base_ddr_addr_AWLEN),
    .AWSIZE(m_axi_base_ddr_addr_AWSIZE),
    .AWBURST(m_axi_base_ddr_addr_AWBURST),
    .AWLOCK(m_axi_base_ddr_addr_AWLOCK),
    .AWCACHE(m_axi_base_ddr_addr_AWCACHE),
    .AWPROT(m_axi_base_ddr_addr_AWPROT),
    .AWQOS(m_axi_base_ddr_addr_AWQOS),
    .AWREGION(m_axi_base_ddr_addr_AWREGION),
    .AWUSER(m_axi_base_ddr_addr_AWUSER),
    .WVALID(m_axi_base_ddr_addr_WVALID),
    .WREADY(m_axi_base_ddr_addr_WREADY),
    .WDATA(m_axi_base_ddr_addr_WDATA),
    .WSTRB(m_axi_base_ddr_addr_WSTRB),
    .WLAST(m_axi_base_ddr_addr_WLAST),
    .WID(m_axi_base_ddr_addr_WID),
    .WUSER(m_axi_base_ddr_addr_WUSER),
    .ARVALID(m_axi_base_ddr_addr_ARVALID),
    .ARREADY(m_axi_base_ddr_addr_ARREADY),
    .ARADDR(m_axi_base_ddr_addr_ARADDR),
    .ARID(m_axi_base_ddr_addr_ARID),
    .ARLEN(m_axi_base_ddr_addr_ARLEN),
    .ARSIZE(m_axi_base_ddr_addr_ARSIZE),
    .ARBURST(m_axi_base_ddr_addr_ARBURST),
    .ARLOCK(m_axi_base_ddr_addr_ARLOCK),
    .ARCACHE(m_axi_base_ddr_addr_ARCACHE),
    .ARPROT(m_axi_base_ddr_addr_ARPROT),
    .ARQOS(m_axi_base_ddr_addr_ARQOS),
    .ARREGION(m_axi_base_ddr_addr_ARREGION),
    .ARUSER(m_axi_base_ddr_addr_ARUSER),
    .RVALID(m_axi_base_ddr_addr_RVALID),
    .RREADY(m_axi_base_ddr_addr_RREADY),
    .RDATA(m_axi_base_ddr_addr_RDATA),
    .RLAST(m_axi_base_ddr_addr_RLAST),
    .RID(m_axi_base_ddr_addr_RID),
    .RUSER(m_axi_base_ddr_addr_RUSER),
    .RRESP(m_axi_base_ddr_addr_RRESP),
    .BVALID(m_axi_base_ddr_addr_BVALID),
    .BREADY(m_axi_base_ddr_addr_BREADY),
    .BRESP(m_axi_base_ddr_addr_BRESP),
    .BID(m_axi_base_ddr_addr_BID),
    .BUSER(m_axi_base_ddr_addr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(base_ddr_addr_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(base_ddr_addr_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(base_ddr_addr_RDATA),
    .I_RID(base_ddr_addr_RID),
    .I_RUSER(base_ddr_addr_RUSER),
    .I_RRESP(base_ddr_addr_RRESP),
    .I_RLAST(base_ddr_addr_RLAST),
    .I_AWVALID(base_ddr_addr_AWVALID),
    .I_AWREADY(base_ddr_addr_AWREADY),
    .I_AWADDR(base_ddr_addr_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd512),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(base_ddr_addr_WVALID),
    .I_WREADY(base_ddr_addr_WREADY),
    .I_WDATA(buffer_load_reg_728),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(base_ddr_addr_BVALID),
    .I_BREADY(base_ddr_addr_BREADY),
    .I_BRESP(base_ddr_addr_BRESP),
    .I_BID(base_ddr_addr_BID),
    .I_BUSER(base_ddr_addr_BUSER)
);

axis_to_ddr_writebkb #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(buffer_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_1_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_1_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((ap_sig_ioackin_base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            if ((ap_sig_ioackin_base_ddr_addr_AWREADY == 1'b1)) begin
                ap_reg_ioackin_base_ddr_addr_AWREADY <= 1'b0;
            end else if ((base_ddr_addr_AWREADY == 1'b1)) begin
                ap_reg_ioackin_base_ddr_addr_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_WREADY <= 1'b0;
    end else begin
        if (((exitcond_reg_714_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp1_stage0_11001)) begin
                ap_reg_ioackin_base_ddr_addr_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp1_stage0_01001) & (base_ddr_addr_WREADY == 1'b1))) begin
                ap_reg_ioackin_base_ddr_addr_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frame_count_inner <= 32'd0;
    end else begin
        if (((tmp_1_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            frame_count_inner <= tmp_2_fu_502_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frame_index_V_preg <= 8'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            frame_index_V_preg <= inner_index_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inner_index_V <= 8'd0;
    end else begin
        if (((tmp_1_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            inner_index_V <= p_tmp_7_fu_484_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inputStream_V_0_ack_out == 1'b1) & (inputStream_V_0_vld_out == 1'b1))) begin
            inputStream_V_0_sel_rd <= ~inputStream_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inputStream_V_0_ack_in == 1'b1) & (inputStream_V_0_vld_in == 1'b1))) begin
            inputStream_V_0_sel_wr <= ~inputStream_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_0_state <= 2'd0;
    end else begin
        if ((((inputStream_V_0_state == 2'd2) & (inputStream_V_0_vld_in == 1'b0)) | ((inputStream_V_0_state == 2'd3) & (inputStream_V_0_vld_in == 1'b0) & (inputStream_V_0_ack_out == 1'b1)))) begin
            inputStream_V_0_state <= 2'd2;
        end else if ((((inputStream_V_0_state == 2'd1) & (inputStream_V_0_ack_out == 1'b0)) | ((inputStream_V_0_state == 2'd3) & (inputStream_V_0_ack_out == 1'b0) & (inputStream_V_0_vld_in == 1'b1)))) begin
            inputStream_V_0_state <= 2'd1;
        end else if (((~((inputStream_V_0_vld_in == 1'b0) & (inputStream_V_0_ack_out == 1'b1)) & ~((inputStream_V_0_ack_out == 1'b0) & (inputStream_V_0_vld_in == 1'b1)) & (inputStream_V_0_state == 2'd3)) | ((inputStream_V_0_state == 2'd1) & (inputStream_V_0_ack_out == 1'b1)) | ((inputStream_V_0_state == 2'd2) & (inputStream_V_0_vld_in == 1'b1)))) begin
            inputStream_V_0_state <= 2'd3;
        end else begin
            inputStream_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        if ((update_intr_read_read_fu_164_p2 == 1'd0)) begin
            i_op_assign_1_reg_260 <= BASE_ADDRESS_r;
        end else if ((update_intr_read_read_fu_164_p2 == 1'd1)) begin
            i_op_assign_1_reg_260 <= {{base_address[31:3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        if ((update_intr_read_read_fu_164_p2 == 1'd0)) begin
            i_op_assign_reg_251 <= FRAME_OFFSET;
        end else if ((update_intr_read_read_fu_164_p2 == 1'd1)) begin
            i_op_assign_reg_251 <= frame_buffer_offset;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_324 <= 4'd0;
    end else if (((exitcond_flatten_reg_674 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_324 <= i_1_reg_694;
    end
end

always @ (posedge ap_clk) begin
    if (((base_ddr_addr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        idx_reg_279 <= idx_1_reg_669;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        idx_reg_279 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvar_flatten_reg_290 <= 13'd0;
    end else if (((exitcond_flatten_fu_515_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_290 <= indvar_flatten_next_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_607_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_reg_335 <= indvar_next_fu_613_p2;
    end else if (((ap_sig_ioackin_base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvar_reg_335 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_301 <= 10'd0;
    end else if (((exitcond_flatten_reg_674 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_301 <= j_mid2_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if (((base_ddr_addr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        offset1_reg_269 <= offset_1_reg_733;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        offset1_reg_269 <= offset_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        temp_reg_312 <= 64'd0;
    end else if (((exitcond_flatten_reg_674 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_reg_312 <= temp_2_fu_578_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((update_intr_read_read_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        BASE_ADDRESS_r <= {{base_address[31:3]}};
        FRAME_BUFFER_DIM_r <= frame_buffer_dim;
        FRAME_BUFFER_NUMBER_r <= frame_buffer_number;
        FRAME_OFFSET <= frame_buffer_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_714 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_load_reg_728 <= buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_674 <= exitcond_flatten_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_714 <= exitcond_fu_607_p2;
        exitcond_reg_714_pp1_iter1_reg <= exitcond_reg_714;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_515_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_694 <= i_1_fu_553_p3;
        j_mid2_reg_688 <= j_mid2_fu_539_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        idx_1_reg_669 <= idx_1_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((inputStream_V_0_load_A == 1'b1)) begin
        inputStream_V_0_payload_A <= inputStream_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inputStream_V_0_load_B == 1'b1)) begin
        inputStream_V_0_payload_B <= inputStream_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        offset_1_reg_733 <= offset_1_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_reg_638 <= inner_index_V;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_515_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_683 <= tmp_4_fu_533_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_515_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_607_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_674 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_328_p4 = i_1_reg_694;
    end else begin
        ap_phi_mux_i_phi_fu_328_p4 = i_reg_324;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_674 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_305_p4 = j_mid2_reg_688;
    end else begin
        ap_phi_mux_j_phi_fu_305_p4 = j_reg_301;
    end
end

always @ (*) begin
    if (((tmp_1_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_base_ddr_addr_AWREADY == 1'b0)) begin
        ap_sig_ioackin_base_ddr_addr_AWREADY = base_ddr_addr_AWREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_base_ddr_addr_WREADY == 1'b0)) begin
        ap_sig_ioackin_base_ddr_addr_WREADY = base_ddr_addr_WREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_base_ddr_addr_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        base_ddr_addr_AWVALID = 1'b1;
    end else begin
        base_ddr_addr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((base_ddr_addr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        base_ddr_addr_BREADY = 1'b1;
    end else begin
        base_ddr_addr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_714_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_base_ddr_addr_WREADY == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        base_ddr_addr_WVALID = 1'b1;
    end else begin
        base_ddr_addr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        base_ddr_addr_blk_n_AW = m_axi_base_ddr_addr_AWREADY;
    end else begin
        base_ddr_addr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        base_ddr_addr_blk_n_B = m_axi_base_ddr_addr_BVALID;
    end else begin
        base_ddr_addr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_714_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        base_ddr_addr_blk_n_W = m_axi_base_ddr_addr_WREADY;
    end else begin
        base_ddr_addr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ifzero_fu_587_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        frame_index_V = inner_index_V;
    end else begin
        frame_index_V = frame_index_V_preg;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_674 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputStream_V_0_ack_out = 1'b1;
    end else begin
        inputStream_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inputStream_V_0_sel == 1'b1)) begin
        inputStream_V_0_data_out = inputStream_V_0_payload_B;
    end else begin
        inputStream_V_0_data_out = inputStream_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_674 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        inputStream_V_TDATA_blk_n = inputStream_V_0_state[1'd0];
    end else begin
        inputStream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_1_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_flatten_fu_515_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_flatten_fu_515_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond_fu_607_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((exitcond_fu_607_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((base_ddr_addr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_flatten_reg_674 == 1'd0) & (inputStream_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_flatten_reg_674 == 1'd0) & (inputStream_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((exitcond_flatten_reg_674 == 1'd0) & (inputStream_V_0_vld_out == 1'b0));
end

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((exitcond_reg_714_pp1_iter1_reg == 1'd0) & (ap_sig_ioackin_base_ddr_addr_WREADY == 1'b0));
end

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign base_ddr_addr_AWADDR = tmp_9_fu_596_p1;

assign buffer_address0 = indvar1_fu_619_p1;

assign buffer_address1 = tmp_10_fu_592_p1;

assign buffer_d1 = {{inputStream_V_0_data_out}, {temp_1_fu_571_p3}};

assign exitcond_flatten_fu_515_p2 = ((indvar_flatten_reg_290 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond_fu_607_p2 = ((indvar_reg_335 == 10'd512) ? 1'b1 : 1'b0);

assign frame_count = (frame_count_inner + 32'd1);

assign i_1_fu_553_p3 = ((tmp_4_fu_533_p2[0:0] === 1'b1) ? 4'd1 : i_op_fu_547_p2);

assign i_op_assign_1_cast_fu_393_p1 = i_op_assign_1_reg_260;

assign i_op_fu_547_p2 = (ap_phi_mux_i_phi_fu_328_p4 + 4'd1);

assign idx_1_fu_450_p2 = (idx_reg_279 + 32'd1);

assign ifzero_fu_587_p2 = ((i_1_reg_694 == 4'd8) ? 1'b1 : 1'b0);

assign indvar1_fu_619_p1 = indvar_reg_335;

assign indvar_flatten_next_fu_521_p2 = (indvar_flatten_reg_290 + 13'd1);

assign indvar_next_fu_613_p2 = (indvar_reg_335 + 10'd1);

assign inputStream_V_0_ack_in = inputStream_V_0_state[1'd1];

assign inputStream_V_0_load_A = (inputStream_V_0_state_cmp_full & ~inputStream_V_0_sel_wr);

assign inputStream_V_0_load_B = (inputStream_V_0_state_cmp_full & inputStream_V_0_sel_wr);

assign inputStream_V_0_sel = inputStream_V_0_sel_rd;

assign inputStream_V_0_state_cmp_full = ((inputStream_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inputStream_V_0_vld_in = inputStream_V_TVALID;

assign inputStream_V_0_vld_out = inputStream_V_0_state[1'd0];

assign inputStream_V_TREADY = inputStream_V_0_state[1'd1];

assign j_mid2_fu_539_p3 = ((tmp_4_fu_533_p2[0:0] === 1'b1) ? j_s_fu_527_p2 : ap_phi_mux_j_phi_fu_305_p4);

assign j_s_fu_527_p2 = (ap_phi_mux_j_phi_fu_305_p4 + 10'd1);

assign offset_1_fu_624_p2 = ($signed(offset1_reg_269) + $signed(32'd512));

assign offset_fu_420_p2 = (tmp_8_fu_410_p4 + i_op_assign_1_cast_fu_393_p1);

assign op2_assign_fu_464_p2 = ($signed(tmp_2_cast_fu_460_p1) + $signed(9'd511));

assign p_tmp_7_fu_484_p3 = ((tmp_5_fu_473_p2[0:0] === 1'b1) ? 8'd0 : tmp_7_fu_479_p2);

assign r_V_fu_404_p0 = r_V_fu_404_p00;

assign r_V_fu_404_p00 = i_op_assign_reg_251;

assign r_V_fu_404_p1 = r_V_fu_404_p10;

assign r_V_fu_404_p10 = t_V_reg_638;

assign r_V_fu_404_p2 = (r_V_fu_404_p0 * r_V_fu_404_p1);

assign temp_1_fu_571_p3 = ((tmp_4_reg_683[0:0] === 1'b1) ? 56'd0 : tmp_11_fu_561_p4);

assign temp_2_fu_578_p3 = {{inputStream_V_0_data_out}, {temp_1_fu_571_p3}};

assign tmp_10_fu_592_p1 = j_mid2_reg_688;

assign tmp_11_fu_561_p4 = {{temp_reg_312[63:8]}};

assign tmp_1_fu_444_p2 = ((idx_reg_279 < tmp_3_fu_440_p1) ? 1'b1 : 1'b0);

assign tmp_2_cast_fu_460_p1 = FRAME_BUFFER_NUMBER_r;

assign tmp_2_fu_502_p2 = (frame_count_inner + 32'd1);

assign tmp_3_fu_440_p1 = tmp_s_fu_430_p4;

assign tmp_4_cast_fu_470_p1 = t_V_reg_638;

assign tmp_4_fu_533_p2 = ((ap_phi_mux_i_phi_fu_328_p4 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_5_fu_473_p2 = ((tmp_4_cast_fu_470_p1 == op2_assign_fu_464_p2) ? 1'b1 : 1'b0);

assign tmp_7_fu_479_p2 = (t_V_reg_638 + 8'd1);

assign tmp_8_fu_410_p4 = {{r_V_fu_404_p2[34:3]}};

assign tmp_9_fu_596_p1 = offset1_reg_269;

assign tmp_s_fu_430_p4 = {{FRAME_BUFFER_DIM_r[31:12]}};

assign update_intr_read_read_fu_164_p2 = update_intr;

endmodule //axis_to_ddr_writer
