// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ddr_to_axis_reader,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=3,HLS_SYN_FF=1158,HLS_SYN_LUT=2090}" *)

module ddr_to_axis_reader (
        ap_clk,
        ap_rst_n,
        outStream_V_TDATA,
        outStream_V_TVALID,
        outStream_V_TREADY,
        m_axi_base_ddr_addr_AWVALID,
        m_axi_base_ddr_addr_AWREADY,
        m_axi_base_ddr_addr_AWADDR,
        m_axi_base_ddr_addr_AWID,
        m_axi_base_ddr_addr_AWLEN,
        m_axi_base_ddr_addr_AWSIZE,
        m_axi_base_ddr_addr_AWBURST,
        m_axi_base_ddr_addr_AWLOCK,
        m_axi_base_ddr_addr_AWCACHE,
        m_axi_base_ddr_addr_AWPROT,
        m_axi_base_ddr_addr_AWQOS,
        m_axi_base_ddr_addr_AWREGION,
        m_axi_base_ddr_addr_AWUSER,
        m_axi_base_ddr_addr_WVALID,
        m_axi_base_ddr_addr_WREADY,
        m_axi_base_ddr_addr_WDATA,
        m_axi_base_ddr_addr_WSTRB,
        m_axi_base_ddr_addr_WLAST,
        m_axi_base_ddr_addr_WID,
        m_axi_base_ddr_addr_WUSER,
        m_axi_base_ddr_addr_ARVALID,
        m_axi_base_ddr_addr_ARREADY,
        m_axi_base_ddr_addr_ARADDR,
        m_axi_base_ddr_addr_ARID,
        m_axi_base_ddr_addr_ARLEN,
        m_axi_base_ddr_addr_ARSIZE,
        m_axi_base_ddr_addr_ARBURST,
        m_axi_base_ddr_addr_ARLOCK,
        m_axi_base_ddr_addr_ARCACHE,
        m_axi_base_ddr_addr_ARPROT,
        m_axi_base_ddr_addr_ARQOS,
        m_axi_base_ddr_addr_ARREGION,
        m_axi_base_ddr_addr_ARUSER,
        m_axi_base_ddr_addr_RVALID,
        m_axi_base_ddr_addr_RREADY,
        m_axi_base_ddr_addr_RDATA,
        m_axi_base_ddr_addr_RLAST,
        m_axi_base_ddr_addr_RID,
        m_axi_base_ddr_addr_RUSER,
        m_axi_base_ddr_addr_RRESP,
        m_axi_base_ddr_addr_BVALID,
        m_axi_base_ddr_addr_BREADY,
        m_axi_base_ddr_addr_BRESP,
        m_axi_base_ddr_addr_BID,
        m_axi_base_ddr_addr_BUSER,
        frame_index_V,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_pp0_stage0 = 13'd512;
parameter    ap_ST_fsm_state13 = 13'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 13'd2048;
parameter    ap_ST_fsm_state17 = 13'd4096;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64;
parameter    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [7:0] outStream_V_TDATA;
output   outStream_V_TVALID;
input   outStream_V_TREADY;
output   m_axi_base_ddr_addr_AWVALID;
input   m_axi_base_ddr_addr_AWREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1:0] m_axi_base_ddr_addr_AWADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_AWID;
output  [7:0] m_axi_base_ddr_addr_AWLEN;
output  [2:0] m_axi_base_ddr_addr_AWSIZE;
output  [1:0] m_axi_base_ddr_addr_AWBURST;
output  [1:0] m_axi_base_ddr_addr_AWLOCK;
output  [3:0] m_axi_base_ddr_addr_AWCACHE;
output  [2:0] m_axi_base_ddr_addr_AWPROT;
output  [3:0] m_axi_base_ddr_addr_AWQOS;
output  [3:0] m_axi_base_ddr_addr_AWREGION;
output  [C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH - 1:0] m_axi_base_ddr_addr_AWUSER;
output   m_axi_base_ddr_addr_WVALID;
input   m_axi_base_ddr_addr_WREADY;
output  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1:0] m_axi_base_ddr_addr_WDATA;
output  [C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH - 1:0] m_axi_base_ddr_addr_WSTRB;
output   m_axi_base_ddr_addr_WLAST;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_WID;
output  [C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH - 1:0] m_axi_base_ddr_addr_WUSER;
output   m_axi_base_ddr_addr_ARVALID;
input   m_axi_base_ddr_addr_ARREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1:0] m_axi_base_ddr_addr_ARADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_ARID;
output  [7:0] m_axi_base_ddr_addr_ARLEN;
output  [2:0] m_axi_base_ddr_addr_ARSIZE;
output  [1:0] m_axi_base_ddr_addr_ARBURST;
output  [1:0] m_axi_base_ddr_addr_ARLOCK;
output  [3:0] m_axi_base_ddr_addr_ARCACHE;
output  [2:0] m_axi_base_ddr_addr_ARPROT;
output  [3:0] m_axi_base_ddr_addr_ARQOS;
output  [3:0] m_axi_base_ddr_addr_ARREGION;
output  [C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH - 1:0] m_axi_base_ddr_addr_ARUSER;
input   m_axi_base_ddr_addr_RVALID;
output   m_axi_base_ddr_addr_RREADY;
input  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1:0] m_axi_base_ddr_addr_RDATA;
input   m_axi_base_ddr_addr_RLAST;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_RID;
input  [C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH - 1:0] m_axi_base_ddr_addr_RUSER;
input  [1:0] m_axi_base_ddr_addr_RRESP;
input   m_axi_base_ddr_addr_BVALID;
output   m_axi_base_ddr_addr_BREADY;
input  [1:0] m_axi_base_ddr_addr_BRESP;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_BID;
input  [C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH - 1:0] m_axi_base_ddr_addr_BUSER;
input  [7:0] frame_index_V;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] outStream_V_1_data_out;
reg    outStream_V_1_vld_in;
wire    outStream_V_1_vld_out;
wire    outStream_V_1_ack_in;
wire    outStream_V_1_ack_out;
reg   [7:0] outStream_V_1_payload_A;
reg   [7:0] outStream_V_1_payload_B;
reg    outStream_V_1_sel_rd;
reg    outStream_V_1_sel_wr;
wire    outStream_V_1_sel;
wire    outStream_V_1_load_A;
wire    outStream_V_1_load_B;
reg   [1:0] outStream_V_1_state;
wire    outStream_V_1_state_cmp_full;
wire   [31:0] base_address;
wire   [31:0] frame_buffer_dim;
wire   [31:0] frame_buffer_offset;
wire   [7:0] frame_buffer_number;
wire    update_intr;
reg   [31:0] FRAME_OFFSET;
reg   [31:0] FRAME_BUFFER_NUMBER_r;
reg   [31:0] BASE_ADDRESS_r;
reg   [31:0] FRAME_BUFFER_DIM_r;
reg    outStream_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_9_reg_694;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] tmp_9_reg_694_pp1_iter1_reg;
reg    base_ddr_addr_blk_n_AR;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_7_fu_425_p2;
reg    base_ddr_addr_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_680;
wire    base_ddr_addr_AWREADY;
wire    base_ddr_addr_WREADY;
reg    base_ddr_addr_ARVALID;
wire    base_ddr_addr_ARREADY;
wire   [31:0] base_ddr_addr_ARADDR;
wire    base_ddr_addr_RVALID;
reg    base_ddr_addr_RREADY;
wire   [63:0] base_ddr_addr_RDATA;
wire    base_ddr_addr_RLAST;
wire   [0:0] base_ddr_addr_RID;
wire   [0:0] base_ddr_addr_RUSER;
wire   [1:0] base_ddr_addr_RRESP;
wire    base_ddr_addr_BVALID;
wire   [1:0] base_ddr_addr_BRESP;
wire   [0:0] base_ddr_addr_BID;
wire   [0:0] base_ddr_addr_BUSER;
reg   [9:0] indvar_reg_278;
reg   [9:0] indvar_reg_278_pp0_iter1_reg;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [12:0] j_reg_290;
wire   [31:0] tmp_1_fu_301_p1;
wire   [31:0] tmp_5_fu_345_p1;
wire   [0:0] update_intr_read_read_fu_154_p2;
wire   [0:0] tmp_4_fu_355_p2;
reg   [0:0] tmp_4_reg_656;
wire   [31:0] offset_fu_401_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_1_fu_431_p2;
reg   [31:0] i_1_reg_669;
reg    ap_sig_ioackin_base_ddr_addr_ARREADY;
reg    ap_block_state3_io;
wire   [0:0] exitcond_fu_448_p2;
reg   [0:0] exitcond_reg_680_pp0_iter1_reg;
wire   [9:0] indvar_next_fu_454_p2;
reg   [9:0] indvar_next_reg_684;
reg    ap_enable_reg_pp0_iter0;
reg   [63:0] base_ddr_addr_addr_r_reg_689;
wire   [0:0] tmp_9_fu_465_p2;
wire    ap_block_state14_pp1_stage0_iter0;
wire    ap_block_state15_pp1_stage0_iter1;
reg    ap_block_state15_io;
wire    ap_block_state16_pp1_stage0_iter2;
reg    ap_block_state16_io;
reg    ap_block_pp1_stage0_11001;
wire   [12:0] j_1_fu_471_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [2:0] tmp_12_fu_477_p1;
reg   [2:0] tmp_12_reg_703;
wire   [7:0] tmp_29_fu_607_p1;
wire   [31:0] offset_1_fu_612_p2;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state13;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state14;
wire   [8:0] buffer_address0;
reg    buffer_ce0;
wire   [63:0] buffer_q0;
wire   [8:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
reg   [31:0] i_op_assign_reg_230;
reg   [31:0] i_op_assign_1_reg_239;
reg   [31:0] tmp_3_reg_248;
reg  signed [31:0] offset1_reg_257;
reg   [31:0] i_reg_267;
reg   [9:0] ap_phi_mux_indvar_phi_fu_282_p4;
wire   [63:0] indvar1_fu_460_p1;
wire   [63:0] gepindex2_cast_fu_491_p1;
wire  signed [63:0] tmp_8_fu_437_p1;
reg    ap_reg_ioackin_base_ddr_addr_ARREADY;
wire    ap_block_pp1_stage0_01001;
wire   [28:0] tmp_2_fu_335_p4;
wire   [7:0] tmp_fu_361_p1;
wire   [7:0] t_V_fu_365_p3;
wire   [7:0] inner_index_V_1_fu_371_p2;
wire   [7:0] r_V_fu_385_p0;
wire   [31:0] r_V_fu_385_p1;
wire   [34:0] r_V_fu_385_p2;
wire   [31:0] tmp_s_fu_391_p4;
wire   [19:0] tmp_6_fu_411_p4;
wire   [31:0] tmp_10_fu_421_p1;
wire   [8:0] gepindex_cast_fu_481_p4;
wire   [5:0] start_pos_fu_496_p3;
wire   [5:0] end_pos_fu_503_p2;
wire   [6:0] tmp_14_fu_515_p1;
wire   [6:0] tmp_15_fu_519_p1;
wire   [0:0] tmp_13_fu_509_p2;
wire   [6:0] tmp_17_fu_533_p2;
wire   [6:0] tmp_19_fu_545_p2;
reg   [63:0] tmp_16_fu_523_p4;
wire   [6:0] tmp_18_fu_539_p2;
wire   [6:0] tmp_20_fu_551_p3;
wire   [6:0] tmp_22_fu_567_p3;
wire   [6:0] tmp_23_fu_575_p2;
wire   [63:0] tmp_21_fu_559_p3;
wire   [63:0] tmp_24_fu_581_p1;
wire   [63:0] tmp_25_fu_585_p1;
wire   [63:0] tmp_26_fu_589_p2;
wire   [63:0] tmp_27_fu_595_p2;
wire   [63:0] tmp_28_fu_601_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [34:0] r_V_fu_385_p00;
wire   [34:0] r_V_fu_385_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 outStream_V_1_sel_rd = 1'b0;
#0 outStream_V_1_sel_wr = 1'b0;
#0 outStream_V_1_state = 2'd0;
#0 FRAME_OFFSET = 32'd307200;
#0 FRAME_BUFFER_NUMBER_r = 32'd8;
#0 BASE_ADDRESS_r = 32'd8;
#0 FRAME_BUFFER_DIM_r = 32'd307200;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_base_ddr_addr_ARREADY = 1'b0;
end

ddr_to_axis_reader_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ddr_to_axis_reader_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .base_address(base_address),
    .frame_buffer_dim(frame_buffer_dim),
    .frame_buffer_offset(frame_buffer_offset),
    .frame_buffer_number(frame_buffer_number),
    .update_intr(update_intr)
);

ddr_to_axis_reader_base_ddr_addr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BASE_DDR_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BASE_DDR_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BASE_DDR_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE ))
ddr_to_axis_reader_base_ddr_addr_m_axi_U(
    .AWVALID(m_axi_base_ddr_addr_AWVALID),
    .AWREADY(m_axi_base_ddr_addr_AWREADY),
    .AWADDR(m_axi_base_ddr_addr_AWADDR),
    .AWID(m_axi_base_ddr_addr_AWID),
    .AWLEN(m_axi_base_ddr_addr_AWLEN),
    .AWSIZE(m_axi_base_ddr_addr_AWSIZE),
    .AWBURST(m_axi_base_ddr_addr_AWBURST),
    .AWLOCK(m_axi_base_ddr_addr_AWLOCK),
    .AWCACHE(m_axi_base_ddr_addr_AWCACHE),
    .AWPROT(m_axi_base_ddr_addr_AWPROT),
    .AWQOS(m_axi_base_ddr_addr_AWQOS),
    .AWREGION(m_axi_base_ddr_addr_AWREGION),
    .AWUSER(m_axi_base_ddr_addr_AWUSER),
    .WVALID(m_axi_base_ddr_addr_WVALID),
    .WREADY(m_axi_base_ddr_addr_WREADY),
    .WDATA(m_axi_base_ddr_addr_WDATA),
    .WSTRB(m_axi_base_ddr_addr_WSTRB),
    .WLAST(m_axi_base_ddr_addr_WLAST),
    .WID(m_axi_base_ddr_addr_WID),
    .WUSER(m_axi_base_ddr_addr_WUSER),
    .ARVALID(m_axi_base_ddr_addr_ARVALID),
    .ARREADY(m_axi_base_ddr_addr_ARREADY),
    .ARADDR(m_axi_base_ddr_addr_ARADDR),
    .ARID(m_axi_base_ddr_addr_ARID),
    .ARLEN(m_axi_base_ddr_addr_ARLEN),
    .ARSIZE(m_axi_base_ddr_addr_ARSIZE),
    .ARBURST(m_axi_base_ddr_addr_ARBURST),
    .ARLOCK(m_axi_base_ddr_addr_ARLOCK),
    .ARCACHE(m_axi_base_ddr_addr_ARCACHE),
    .ARPROT(m_axi_base_ddr_addr_ARPROT),
    .ARQOS(m_axi_base_ddr_addr_ARQOS),
    .ARREGION(m_axi_base_ddr_addr_ARREGION),
    .ARUSER(m_axi_base_ddr_addr_ARUSER),
    .RVALID(m_axi_base_ddr_addr_RVALID),
    .RREADY(m_axi_base_ddr_addr_RREADY),
    .RDATA(m_axi_base_ddr_addr_RDATA),
    .RLAST(m_axi_base_ddr_addr_RLAST),
    .RID(m_axi_base_ddr_addr_RID),
    .RUSER(m_axi_base_ddr_addr_RUSER),
    .RRESP(m_axi_base_ddr_addr_RRESP),
    .BVALID(m_axi_base_ddr_addr_BVALID),
    .BREADY(m_axi_base_ddr_addr_BREADY),
    .BRESP(m_axi_base_ddr_addr_BRESP),
    .BID(m_axi_base_ddr_addr_BID),
    .BUSER(m_axi_base_ddr_addr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(base_ddr_addr_ARVALID),
    .I_ARREADY(base_ddr_addr_ARREADY),
    .I_ARADDR(base_ddr_addr_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd512),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(base_ddr_addr_RVALID),
    .I_RREADY(base_ddr_addr_RREADY),
    .I_RDATA(base_ddr_addr_RDATA),
    .I_RID(base_ddr_addr_RID),
    .I_RUSER(base_ddr_addr_RUSER),
    .I_RRESP(base_ddr_addr_RRESP),
    .I_RLAST(base_ddr_addr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(base_ddr_addr_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(base_ddr_addr_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(base_ddr_addr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(base_ddr_addr_BRESP),
    .I_BID(base_ddr_addr_BID),
    .I_BUSER(base_ddr_addr_BUSER)
);

ddr_to_axis_readebkb #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(base_ddr_addr_addr_r_reg_689)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state14)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b0;
    end else begin
        if (((tmp_7_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            if (~((1'b1 == ap_block_state3_io) | (outStream_V_1_ack_in == 1'b0))) begin
                ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b0;
            end else if (((outStream_V_1_ack_in == 1'b1) & (base_ddr_addr_ARREADY == 1'b1))) begin
                ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_1_ack_out == 1'b1) & (outStream_V_1_vld_out == 1'b1))) begin
            outStream_V_1_sel_rd <= ~outStream_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_1_ack_in == 1'b1) & (outStream_V_1_vld_in == 1'b1))) begin
            outStream_V_1_sel_wr <= ~outStream_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_1_state == 2'd2) & (outStream_V_1_vld_in == 1'b0)) | ((outStream_V_1_state == 2'd3) & (outStream_V_1_vld_in == 1'b0) & (outStream_V_1_ack_out == 1'b1)))) begin
            outStream_V_1_state <= 2'd2;
        end else if ((((outStream_V_1_state == 2'd1) & (outStream_V_1_ack_out == 1'b0)) | ((outStream_V_1_state == 2'd3) & (outStream_V_1_ack_out == 1'b0) & (outStream_V_1_vld_in == 1'b1)))) begin
            outStream_V_1_state <= 2'd1;
        end else if (((~((outStream_V_1_vld_in == 1'b0) & (outStream_V_1_ack_out == 1'b1)) & ~((outStream_V_1_ack_out == 1'b0) & (outStream_V_1_vld_in == 1'b1)) & (outStream_V_1_state == 2'd3)) | ((outStream_V_1_state == 2'd1) & (outStream_V_1_ack_out == 1'b1)) | ((outStream_V_1_state == 2'd2) & (outStream_V_1_vld_in == 1'b1)))) begin
            outStream_V_1_state <= 2'd3;
        end else begin
            outStream_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((update_intr_read_read_fu_154_p2 == 1'd0)) begin
                        i_op_assign_1_reg_239[28 : 0] <= BASE_ADDRESS_r[28 : 0];
        end else if ((update_intr_read_read_fu_154_p2 == 1'd1)) begin
                        i_op_assign_1_reg_239[28 : 0] <= tmp_5_fu_345_p1[28 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((update_intr_read_read_fu_154_p2 == 1'd0)) begin
            i_op_assign_reg_230 <= FRAME_OFFSET;
        end else if ((update_intr_read_read_fu_154_p2 == 1'd1)) begin
            i_op_assign_reg_230 <= frame_buffer_offset;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_267 <= i_1_reg_669;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_267 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_278 <= indvar_next_reg_684;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_reg_278 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_290 <= 13'd0;
    end else if (((tmp_9_fu_465_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_290 <= j_1_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        offset1_reg_257 <= offset_1_fu_612_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        offset1_reg_257 <= offset_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((update_intr_read_read_fu_154_p2 == 1'd0)) begin
                        tmp_3_reg_248[7 : 0] <= FRAME_BUFFER_NUMBER_r[7 : 0];
        end else if ((update_intr_read_read_fu_154_p2 == 1'd1)) begin
                        tmp_3_reg_248[7 : 0] <= tmp_1_fu_301_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((update_intr_read_read_fu_154_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        BASE_ADDRESS_r[28 : 0] <= tmp_5_fu_345_p1[28 : 0];
        FRAME_BUFFER_DIM_r <= frame_buffer_dim;
        FRAME_BUFFER_NUMBER_r[7 : 0] <= tmp_1_fu_301_p1[7 : 0];
        FRAME_OFFSET <= frame_buffer_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        base_ddr_addr_addr_r_reg_689 <= base_ddr_addr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_680 <= exitcond_fu_448_p2;
        exitcond_reg_680_pp0_iter1_reg <= exitcond_reg_680;
        indvar_reg_278_pp0_iter1_reg <= indvar_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | (outStream_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_669 <= i_1_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_684 <= indvar_next_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_1_load_A == 1'b1)) begin
        outStream_V_1_payload_A <= tmp_29_fu_607_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_1_load_B == 1'b1)) begin
        outStream_V_1_payload_B <= tmp_29_fu_607_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_465_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_12_reg_703 <= tmp_12_fu_477_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_4_reg_656 <= tmp_4_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_9_reg_694 <= tmp_9_fu_465_p2;
        tmp_9_reg_694_pp1_iter1_reg <= tmp_9_reg_694;
    end
end

always @ (*) begin
    if ((exitcond_fu_448_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_9_fu_465_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (outStream_V_1_ack_in == 1'b0)) & (tmp_7_fu_425_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_282_p4 = indvar_next_reg_684;
    end else begin
        ap_phi_mux_indvar_phi_fu_282_p4 = indvar_reg_278;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (outStream_V_1_ack_in == 1'b0)) & (tmp_7_fu_425_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_base_ddr_addr_ARREADY == 1'b0)) begin
        ap_sig_ioackin_base_ddr_addr_ARREADY = base_ddr_addr_ARREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_7_fu_425_p2 == 1'd1) & (outStream_V_1_ack_in == 1'b1) & (ap_reg_ioackin_base_ddr_addr_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        base_ddr_addr_ARVALID = 1'b1;
    end else begin
        base_ddr_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        base_ddr_addr_RREADY = 1'b1;
    end else begin
        base_ddr_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_7_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        base_ddr_addr_blk_n_AR = m_axi_base_ddr_addr_ARREADY;
    end else begin
        base_ddr_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        base_ddr_addr_blk_n_R = m_axi_base_ddr_addr_RVALID;
    end else begin
        base_ddr_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_680_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_1_sel == 1'b1)) begin
        outStream_V_1_data_out = outStream_V_1_payload_B;
    end else begin
        outStream_V_1_data_out = outStream_V_1_payload_A;
    end
end

always @ (*) begin
    if (((tmp_9_reg_694 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        outStream_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_9_reg_694_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((tmp_9_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)))) begin
        outStream_V_TDATA_blk_n = outStream_V_1_state[1'd1];
    end else begin
        outStream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (outStream_V_1_ack_in == 1'b0)) & (tmp_7_fu_425_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state3_io) | (outStream_V_1_ack_in == 1'b0)) & (tmp_7_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_448_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_fu_448_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((tmp_9_fu_465_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((tmp_9_fu_465_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_680 == 1'd0) & (base_ddr_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_680 == 1'd0) & (base_ddr_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((exitcond_reg_680 == 1'd0) & (base_ddr_addr_RVALID == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((tmp_9_reg_694 == 1'd0) & (outStream_V_1_ack_in == 1'b0));
end

assign ap_block_state15_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((tmp_9_reg_694_pp1_iter1_reg == 1'd0) & (outStream_V_1_ack_in == 1'b0));
end

assign ap_block_state16_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((tmp_7_fu_425_p2 == 1'd1) & (ap_sig_ioackin_base_ddr_addr_ARREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign base_ddr_addr_ARADDR = tmp_8_fu_437_p1;

assign buffer_address0 = gepindex2_cast_fu_491_p1;

assign buffer_address1 = indvar1_fu_460_p1;

assign end_pos_fu_503_p2 = (start_pos_fu_496_p3 | 6'd7);

assign exitcond_fu_448_p2 = ((ap_phi_mux_indvar_phi_fu_282_p4 == 10'd512) ? 1'b1 : 1'b0);

assign gepindex2_cast_fu_491_p1 = gepindex_cast_fu_481_p4;

assign gepindex_cast_fu_481_p4 = {{j_reg_290[11:3]}};

assign i_1_fu_431_p2 = (i_reg_267 + 32'd1);

assign indvar1_fu_460_p1 = indvar_reg_278_pp0_iter1_reg;

assign indvar_next_fu_454_p2 = (ap_phi_mux_indvar_phi_fu_282_p4 + 10'd1);

assign inner_index_V_1_fu_371_p2 = ($signed(8'd255) + $signed(t_V_fu_365_p3));

assign j_1_fu_471_p2 = (j_reg_290 + 13'd1);

assign offset_1_fu_612_p2 = ($signed(offset1_reg_257) + $signed(32'd512));

assign offset_fu_401_p2 = (i_op_assign_1_reg_239 + tmp_s_fu_391_p4);

assign outStream_V_1_ack_in = outStream_V_1_state[1'd1];

assign outStream_V_1_ack_out = outStream_V_TREADY;

assign outStream_V_1_load_A = (outStream_V_1_state_cmp_full & ~outStream_V_1_sel_wr);

assign outStream_V_1_load_B = (outStream_V_1_state_cmp_full & outStream_V_1_sel_wr);

assign outStream_V_1_sel = outStream_V_1_sel_rd;

assign outStream_V_1_state_cmp_full = ((outStream_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_1_vld_out = outStream_V_1_state[1'd0];

assign outStream_V_TDATA = outStream_V_1_data_out;

assign outStream_V_TVALID = outStream_V_1_state[1'd0];

assign r_V_fu_385_p0 = r_V_fu_385_p00;

assign r_V_fu_385_p00 = inner_index_V_1_fu_371_p2;

assign r_V_fu_385_p1 = r_V_fu_385_p10;

assign r_V_fu_385_p10 = i_op_assign_reg_230;

assign r_V_fu_385_p2 = (r_V_fu_385_p0 * r_V_fu_385_p1);

assign start_pos_fu_496_p3 = {{tmp_12_reg_703}, {3'd0}};

assign t_V_fu_365_p3 = ((tmp_4_reg_656[0:0] === 1'b1) ? tmp_fu_361_p1 : frame_index_V);

assign tmp_10_fu_421_p1 = tmp_6_fu_411_p4;

assign tmp_12_fu_477_p1 = j_reg_290[2:0];

assign tmp_13_fu_509_p2 = ((start_pos_fu_496_p3 > end_pos_fu_503_p2) ? 1'b1 : 1'b0);

assign tmp_14_fu_515_p1 = start_pos_fu_496_p3;

assign tmp_15_fu_519_p1 = end_pos_fu_503_p2;

integer ap_tvar_int_0;

always @ (buffer_q0) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_16_fu_523_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_16_fu_523_p4[ap_tvar_int_0] = buffer_q0[63 - ap_tvar_int_0];
        end
    end
end

assign tmp_17_fu_533_p2 = (tmp_14_fu_515_p1 - tmp_15_fu_519_p1);

assign tmp_18_fu_539_p2 = (tmp_14_fu_515_p1 ^ 7'd63);

assign tmp_19_fu_545_p2 = (tmp_15_fu_519_p1 - tmp_14_fu_515_p1);

assign tmp_1_fu_301_p1 = frame_buffer_number;

assign tmp_20_fu_551_p3 = ((tmp_13_fu_509_p2[0:0] === 1'b1) ? tmp_17_fu_533_p2 : tmp_19_fu_545_p2);

assign tmp_21_fu_559_p3 = ((tmp_13_fu_509_p2[0:0] === 1'b1) ? tmp_16_fu_523_p4 : buffer_q0);

assign tmp_22_fu_567_p3 = ((tmp_13_fu_509_p2[0:0] === 1'b1) ? tmp_18_fu_539_p2 : tmp_14_fu_515_p1);

assign tmp_23_fu_575_p2 = (7'd63 - tmp_20_fu_551_p3);

assign tmp_24_fu_581_p1 = tmp_22_fu_567_p3;

assign tmp_25_fu_585_p1 = tmp_23_fu_575_p2;

assign tmp_26_fu_589_p2 = tmp_21_fu_559_p3 >> tmp_24_fu_581_p1;

assign tmp_27_fu_595_p2 = 64'd18446744073709551615 >> tmp_25_fu_585_p1;

assign tmp_28_fu_601_p2 = (tmp_27_fu_595_p2 & tmp_26_fu_589_p2);

assign tmp_29_fu_607_p1 = tmp_28_fu_601_p2[7:0];

assign tmp_2_fu_335_p4 = {{base_address[31:3]}};

assign tmp_4_fu_355_p2 = ((frame_index_V == 8'd0) ? 1'b1 : 1'b0);

assign tmp_5_fu_345_p1 = tmp_2_fu_335_p4;

assign tmp_6_fu_411_p4 = {{FRAME_BUFFER_DIM_r[31:12]}};

assign tmp_7_fu_425_p2 = ((i_reg_267 < tmp_10_fu_421_p1) ? 1'b1 : 1'b0);

assign tmp_8_fu_437_p1 = offset1_reg_257;

assign tmp_9_fu_465_p2 = ((j_reg_290 == 13'd4096) ? 1'b1 : 1'b0);

assign tmp_fu_361_p1 = tmp_3_reg_248[7:0];

assign tmp_s_fu_391_p4 = {{r_V_fu_385_p2[34:3]}};

assign update_intr_read_read_fu_154_p2 = update_intr;

always @ (posedge ap_clk) begin
    FRAME_BUFFER_NUMBER_r[31:8] <= 24'b000000000000000000000000;
    BASE_ADDRESS_r[31:29] <= 3'b000;
    i_op_assign_1_reg_239[31:29] <= 3'b000;
    tmp_3_reg_248[31:8] <= 24'b000000000000000000000000;
end

endmodule //ddr_to_axis_reader
