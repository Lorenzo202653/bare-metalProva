// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ddr_to_axis_reader_SD,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=42.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=41.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=3,HLS_SYN_FF=1251,HLS_SYN_LUT=4424}" *)

module ddr_to_axis_reader_SD (
        ap_clk,
        ap_rst_n,
        outStream_channel_1_V_TDATA,
        outStream_channel_1_V_TVALID,
        outStream_channel_1_V_TREADY,
        outstream_channel_2_V_TDATA,
        outstream_channel_2_V_TVALID,
        outstream_channel_2_V_TREADY,
        m_axi_base_ddr_addr_AWVALID,
        m_axi_base_ddr_addr_AWREADY,
        m_axi_base_ddr_addr_AWADDR,
        m_axi_base_ddr_addr_AWID,
        m_axi_base_ddr_addr_AWLEN,
        m_axi_base_ddr_addr_AWSIZE,
        m_axi_base_ddr_addr_AWBURST,
        m_axi_base_ddr_addr_AWLOCK,
        m_axi_base_ddr_addr_AWCACHE,
        m_axi_base_ddr_addr_AWPROT,
        m_axi_base_ddr_addr_AWQOS,
        m_axi_base_ddr_addr_AWREGION,
        m_axi_base_ddr_addr_AWUSER,
        m_axi_base_ddr_addr_WVALID,
        m_axi_base_ddr_addr_WREADY,
        m_axi_base_ddr_addr_WDATA,
        m_axi_base_ddr_addr_WSTRB,
        m_axi_base_ddr_addr_WLAST,
        m_axi_base_ddr_addr_WID,
        m_axi_base_ddr_addr_WUSER,
        m_axi_base_ddr_addr_ARVALID,
        m_axi_base_ddr_addr_ARREADY,
        m_axi_base_ddr_addr_ARADDR,
        m_axi_base_ddr_addr_ARID,
        m_axi_base_ddr_addr_ARLEN,
        m_axi_base_ddr_addr_ARSIZE,
        m_axi_base_ddr_addr_ARBURST,
        m_axi_base_ddr_addr_ARLOCK,
        m_axi_base_ddr_addr_ARCACHE,
        m_axi_base_ddr_addr_ARPROT,
        m_axi_base_ddr_addr_ARQOS,
        m_axi_base_ddr_addr_ARREGION,
        m_axi_base_ddr_addr_ARUSER,
        m_axi_base_ddr_addr_RVALID,
        m_axi_base_ddr_addr_RREADY,
        m_axi_base_ddr_addr_RDATA,
        m_axi_base_ddr_addr_RLAST,
        m_axi_base_ddr_addr_RID,
        m_axi_base_ddr_addr_RUSER,
        m_axi_base_ddr_addr_RRESP,
        m_axi_base_ddr_addr_BVALID,
        m_axi_base_ddr_addr_BREADY,
        m_axi_base_ddr_addr_BRESP,
        m_axi_base_ddr_addr_BID,
        m_axi_base_ddr_addr_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_pp0_stage0 = 13'd256;
parameter    ap_ST_fsm_state12 = 13'd512;
parameter    ap_ST_fsm_pp1_stage0 = 13'd1024;
parameter    ap_ST_fsm_state16 = 13'd2048;
parameter    ap_ST_fsm_pp2_stage0 = 13'd4096;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64;
parameter    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [7:0] outStream_channel_1_V_TDATA;
output   outStream_channel_1_V_TVALID;
input   outStream_channel_1_V_TREADY;
output  [7:0] outstream_channel_2_V_TDATA;
output   outstream_channel_2_V_TVALID;
input   outstream_channel_2_V_TREADY;
output   m_axi_base_ddr_addr_AWVALID;
input   m_axi_base_ddr_addr_AWREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1:0] m_axi_base_ddr_addr_AWADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_AWID;
output  [7:0] m_axi_base_ddr_addr_AWLEN;
output  [2:0] m_axi_base_ddr_addr_AWSIZE;
output  [1:0] m_axi_base_ddr_addr_AWBURST;
output  [1:0] m_axi_base_ddr_addr_AWLOCK;
output  [3:0] m_axi_base_ddr_addr_AWCACHE;
output  [2:0] m_axi_base_ddr_addr_AWPROT;
output  [3:0] m_axi_base_ddr_addr_AWQOS;
output  [3:0] m_axi_base_ddr_addr_AWREGION;
output  [C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH - 1:0] m_axi_base_ddr_addr_AWUSER;
output   m_axi_base_ddr_addr_WVALID;
input   m_axi_base_ddr_addr_WREADY;
output  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1:0] m_axi_base_ddr_addr_WDATA;
output  [C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH - 1:0] m_axi_base_ddr_addr_WSTRB;
output   m_axi_base_ddr_addr_WLAST;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_WID;
output  [C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH - 1:0] m_axi_base_ddr_addr_WUSER;
output   m_axi_base_ddr_addr_ARVALID;
input   m_axi_base_ddr_addr_ARREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1:0] m_axi_base_ddr_addr_ARADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_ARID;
output  [7:0] m_axi_base_ddr_addr_ARLEN;
output  [2:0] m_axi_base_ddr_addr_ARSIZE;
output  [1:0] m_axi_base_ddr_addr_ARBURST;
output  [1:0] m_axi_base_ddr_addr_ARLOCK;
output  [3:0] m_axi_base_ddr_addr_ARCACHE;
output  [2:0] m_axi_base_ddr_addr_ARPROT;
output  [3:0] m_axi_base_ddr_addr_ARQOS;
output  [3:0] m_axi_base_ddr_addr_ARREGION;
output  [C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH - 1:0] m_axi_base_ddr_addr_ARUSER;
input   m_axi_base_ddr_addr_RVALID;
output   m_axi_base_ddr_addr_RREADY;
input  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1:0] m_axi_base_ddr_addr_RDATA;
input   m_axi_base_ddr_addr_RLAST;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_RID;
input  [C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH - 1:0] m_axi_base_ddr_addr_RUSER;
input  [1:0] m_axi_base_ddr_addr_RRESP;
input   m_axi_base_ddr_addr_BVALID;
output   m_axi_base_ddr_addr_BREADY;
input  [1:0] m_axi_base_ddr_addr_BRESP;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_BID;
input  [C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH - 1:0] m_axi_base_ddr_addr_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] outStream_channel_1_V_1_data_in;
reg   [7:0] outStream_channel_1_V_1_data_out;
reg    outStream_channel_1_V_1_vld_in;
wire    outStream_channel_1_V_1_vld_out;
wire    outStream_channel_1_V_1_ack_in;
wire    outStream_channel_1_V_1_ack_out;
reg   [7:0] outStream_channel_1_V_1_payload_A;
reg   [7:0] outStream_channel_1_V_1_payload_B;
reg    outStream_channel_1_V_1_sel_rd;
reg    outStream_channel_1_V_1_sel_wr;
wire    outStream_channel_1_V_1_sel;
wire    outStream_channel_1_V_1_load_A;
wire    outStream_channel_1_V_1_load_B;
reg   [1:0] outStream_channel_1_V_1_state;
wire    outStream_channel_1_V_1_state_cmp_full;
reg   [7:0] outstream_channel_2_V_1_data_out;
reg    outstream_channel_2_V_1_vld_in;
wire    outstream_channel_2_V_1_vld_out;
wire    outstream_channel_2_V_1_ack_in;
wire    outstream_channel_2_V_1_ack_out;
reg   [7:0] outstream_channel_2_V_1_payload_A;
reg   [7:0] outstream_channel_2_V_1_payload_B;
reg    outstream_channel_2_V_1_sel_rd;
reg    outstream_channel_2_V_1_sel_wr;
wire    outstream_channel_2_V_1_sel;
wire    outstream_channel_2_V_1_load_A;
wire    outstream_channel_2_V_1_load_B;
reg   [1:0] outstream_channel_2_V_1_state;
wire    outstream_channel_2_V_1_state_cmp_full;
wire   [31:0] base_address;
wire   [31:0] frame_buffer_dim;
wire   [31:0] frame_buffer_offset;
wire   [7:0] frame_buffer_number;
wire    update_intr;
wire    stereo_enabler;
reg   [31:0] inner_index;
reg   [0:0] guard_variable_for_d_2;
reg   [31:0] FRAME_BUFFER_DIM_r;
reg   [0:0] guard_variable_for_d;
reg   [31:0] FRAME_OFFSET;
reg   [0:0] guard_variable_for_d_1;
reg   [7:0] FRAME_BUFFER_NUMBER_r;
reg   [0:0] guard_variable_for_d_3;
reg   [31:0] BASE_ADDRESS_r;
reg   [31:0] luma_chroma_switch;
reg    outStream_channel_1_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_6_reg_1440;
reg   [0:0] tmp_16_reg_1444;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] tmp_6_reg_1440_pp1_iter1_reg;
reg   [0:0] tmp_16_reg_1444_pp1_iter1_reg;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] tmp_reg_1488;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] tmp_reg_1488_pp2_iter1_reg;
reg    outstream_channel_2_V_TDATA_blk_n;
reg    base_ddr_addr_blk_n_AR;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_647_p2;
reg    base_ddr_addr_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_1426;
wire    base_ddr_addr_AWREADY;
wire    base_ddr_addr_WREADY;
reg    base_ddr_addr_ARVALID;
wire    base_ddr_addr_ARREADY;
wire   [31:0] base_ddr_addr_ARADDR;
wire    base_ddr_addr_RVALID;
reg    base_ddr_addr_RREADY;
wire   [63:0] base_ddr_addr_RDATA;
wire    base_ddr_addr_RLAST;
wire   [0:0] base_ddr_addr_RID;
wire   [0:0] base_ddr_addr_RUSER;
wire   [1:0] base_ddr_addr_RRESP;
wire    base_ddr_addr_BVALID;
wire   [1:0] base_ddr_addr_BRESP;
wire   [0:0] base_ddr_addr_BID;
wire   [0:0] base_ddr_addr_BUSER;
reg   [9:0] indvar_reg_397;
reg   [9:0] indvar_reg_397_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [12:0] j_reg_409;
reg   [12:0] j1_reg_430;
reg   [0:0] stereo_enabler_read_reg_1363;
reg  signed [31:0] inner_index_load_reg_1367;
wire   [31:0] tmp_1_FRAME_BUFFER_N_1_fu_553_p1;
reg   [31:0] tmp_1_FRAME_BUFFER_N_1_reg_1394;
wire   [31:0] offset_fu_607_p2;
reg   [19:0] tmp_5_reg_1407;
wire   [19:0] i_1_fu_652_p2;
reg   [19:0] i_1_reg_1415;
reg    ap_block_state2;
reg    ap_sig_ioackin_base_ddr_addr_ARREADY;
reg    ap_block_state2_io;
wire   [0:0] exitcond_fu_692_p2;
reg   [0:0] exitcond_reg_1426_pp0_iter1_reg;
wire   [9:0] indvar_next_fu_698_p2;
reg   [9:0] indvar_next_reg_1430;
reg    ap_enable_reg_pp0_iter0;
reg   [63:0] base_ddr_addr_addr_r_reg_1435;
wire   [0:0] tmp_6_fu_709_p3;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
reg    ap_predicate_op207_write_state14;
reg    ap_predicate_op228_write_state14;
reg    ap_block_state14_io;
wire    ap_block_state15_pp1_stage0_iter2;
reg    ap_predicate_op229_write_state15;
reg    ap_predicate_op230_write_state15;
reg    ap_block_state15_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] tmp_16_fu_721_p2;
wire   [2:0] tmp_70_fu_739_p1;
reg   [2:0] tmp_70_reg_1448;
wire   [2:0] tmp_51_fu_771_p1;
reg   [2:0] tmp_51_reg_1458;
wire   [12:0] j_4_fu_838_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [7:0] tmp_87_fu_955_p1;
wire   [7:0] tmp_69_fu_1071_p1;
wire   [31:0] offset_1_fu_1076_p2;
wire    ap_CS_fsm_state16;
wire   [0:0] tmp_fu_1082_p3;
wire    ap_block_state17_pp2_stage0_iter0;
wire    ap_block_state18_pp2_stage0_iter1;
reg    ap_block_state18_io;
wire    ap_block_state19_pp2_stage0_iter2;
reg    ap_block_state19_io;
reg    ap_block_pp2_stage0_11001;
wire   [2:0] tmp_11_fu_1090_p1;
reg   [2:0] tmp_11_reg_1492;
reg   [1:0] tmp_13_reg_1503;
wire   [12:0] j_2_fu_1119_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [7:0] tmp_33_fu_1236_p1;
wire   [7:0] tmp_50_fu_1358_p1;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state12;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state17;
reg   [8:0] buffer_address0;
reg    buffer_ce0;
wire   [63:0] buffer_q0;
reg   [8:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
wire   [63:0] buffer_q1;
reg   [0:0] ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4;
wire   [0:0] guard_variable_for_d_4_load_fu_445_p1;
reg   [31:0] ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4;
reg   [0:0] ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4;
wire   [0:0] guard_variable_for_d_5_load_fu_460_p1;
reg   [31:0] ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4;
reg   [0:0] ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4;
wire   [0:0] guard_variable_for_d_6_load_fu_475_p1;
reg   [7:0] ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4;
reg   [0:0] ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4;
wire   [0:0] guard_variable_for_d_7_load_fu_490_p1;
reg   [31:0] ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4;
reg  signed [31:0] offset1_reg_376;
reg   [19:0] i_reg_386;
reg   [9:0] ap_phi_mux_indvar_phi_fu_401_p4;
reg   [12:0] ap_phi_mux_j_1_phi_fu_423_p4;
wire   [12:0] j_3_fu_764_p2;
wire   [12:0] ap_phi_reg_pp1_iter0_j_1_reg_420;
wire   [63:0] indvar1_fu_704_p1;
wire   [63:0] gepindex264_cast_fu_753_p1;
wire  signed [63:0] gepindex2_cast_fu_833_p1;
wire   [63:0] gepindex276_cast_fu_1104_p1;
wire  signed [63:0] tmp_1_fu_658_p1;
reg    ap_reg_ioackin_base_ddr_addr_ARREADY;
wire   [31:0] storemerge_fu_678_p3;
wire   [0:0] p_FRAME_BUFFER_DIM_fl_fu_519_p2;
wire   [0:0] p_FRAME_OFFSET_flag_fu_533_p2;
wire   [0:0] p_FRAME_BUFFER_NUMBER_fu_539_p2;
wire   [31:0] tmp_7_base_address_fu_563_p3;
wire   [0:0] p_BASE_ADDRESS_flag_fu_557_p2;
wire   [31:0] tmp_18_fu_727_p2;
wire    ap_block_pp1_stage0_01001;
wire    ap_block_pp2_stage0_01001;
wire   [28:0] tmp_7_fu_505_p4;
wire   [0:0] p_FRAME_BUFFER_DIM_fl_fu_519_p1;
wire   [0:0] frame_buffer_dim_FRA_fu_525_p0;
wire   [0:0] p_FRAME_OFFSET_flag_fu_533_p1;
wire   [0:0] p_FRAME_BUFFER_NUMBER_fu_539_p1;
wire   [0:0] tmp_1_FRAME_BUFFER_N_fu_545_p0;
wire   [7:0] tmp_1_FRAME_BUFFER_N_fu_545_p3;
wire   [0:0] p_BASE_ADDRESS_flag_fu_557_p1;
wire   [0:0] tmp_7_base_address_fu_563_p0;
wire   [31:0] tmp_8_fu_515_p1;
wire   [0:0] frame_buffer_offset_s_fu_571_p0;
wire   [0:0] tmp_7_BASE_ADDRESS_l_fu_579_p0;
wire  signed [31:0] tmp_s_fu_587_p0;
wire  signed [31:0] frame_buffer_offset_s_fu_571_p3;
wire   [31:0] tmp_s_fu_587_p2;
wire   [28:0] tmp_2_fu_593_p4;
wire   [31:0] tmp_9_fu_603_p1;
wire   [31:0] tmp_7_BASE_ADDRESS_l_fu_579_p3;
wire   [31:0] frame_buffer_dim_FRA_fu_525_p3;
wire   [0:0] tmp_3_fu_669_p2;
wire   [31:0] tmp_4_fu_673_p2;
wire   [8:0] gepindex62_cast_fu_743_p4;
wire  signed [9:0] tmp_52_fu_775_p4;
wire  signed [13:0] adjSize_fu_785_p1;
wire   [13:0] mem_index_gep_fu_789_p2;
wire   [14:0] adjSize55_cast_fu_795_p1;
wire   [0:0] addrCmp_fu_799_p2;
wire   [14:0] gepindex_fu_811_p2;
wire   [0:0] addrCmp1_fu_805_p2;
wire   [14:0] gepindex1_fu_817_p3;
wire   [14:0] gepindex2_fu_825_p3;
wire   [5:0] start_pos3_fu_844_p3;
wire   [5:0] end_pos3_fu_851_p2;
wire   [6:0] tmp_72_fu_863_p1;
wire   [6:0] tmp_73_fu_867_p1;
wire   [0:0] tmp_71_fu_857_p2;
wire   [6:0] tmp_75_fu_881_p2;
wire   [6:0] tmp_77_fu_893_p2;
reg   [63:0] tmp_74_fu_871_p4;
wire   [6:0] tmp_76_fu_887_p2;
wire   [6:0] tmp_78_fu_899_p3;
wire   [6:0] tmp_80_fu_915_p3;
wire   [6:0] tmp_81_fu_923_p2;
wire   [63:0] tmp_79_fu_907_p3;
wire   [63:0] tmp_82_fu_929_p1;
wire   [63:0] tmp_83_fu_933_p1;
wire   [63:0] tmp_84_fu_937_p2;
wire   [63:0] tmp_85_fu_943_p2;
wire   [63:0] tmp_86_fu_949_p2;
wire   [5:0] start_pos_fu_960_p3;
wire   [5:0] end_pos2_fu_967_p2;
wire   [6:0] tmp_54_fu_979_p1;
wire   [6:0] tmp_55_fu_983_p1;
wire   [0:0] tmp_53_fu_973_p2;
wire   [6:0] tmp_57_fu_997_p2;
wire   [6:0] tmp_59_fu_1009_p2;
reg   [63:0] tmp_56_fu_987_p4;
wire   [6:0] tmp_58_fu_1003_p2;
wire   [6:0] tmp_60_fu_1015_p3;
wire   [6:0] tmp_62_fu_1031_p3;
wire   [6:0] tmp_63_fu_1039_p2;
wire   [63:0] tmp_61_fu_1023_p3;
wire   [63:0] tmp_64_fu_1045_p1;
wire   [63:0] tmp_65_fu_1049_p1;
wire   [63:0] tmp_66_fu_1053_p2;
wire   [63:0] tmp_67_fu_1059_p2;
wire   [63:0] tmp_68_fu_1065_p2;
wire   [8:0] gepindex74_cast_fu_1094_p4;
wire   [5:0] start_pos1_fu_1125_p3;
wire   [5:0] end_pos_fu_1132_p2;
wire   [6:0] tmp_17_fu_1144_p1;
wire   [6:0] tmp_19_fu_1148_p1;
wire   [0:0] tmp_15_fu_1138_p2;
wire   [6:0] tmp_21_fu_1162_p2;
wire   [6:0] tmp_23_fu_1174_p2;
reg   [63:0] tmp_20_fu_1152_p4;
wire   [6:0] tmp_22_fu_1168_p2;
wire   [6:0] tmp_24_fu_1180_p3;
wire   [6:0] tmp_26_fu_1196_p3;
wire   [6:0] tmp_27_fu_1204_p2;
wire   [63:0] tmp_25_fu_1188_p3;
wire   [63:0] tmp_28_fu_1210_p1;
wire   [63:0] tmp_29_fu_1214_p1;
wire   [63:0] tmp_30_fu_1218_p2;
wire   [63:0] tmp_31_fu_1224_p2;
wire   [63:0] tmp_32_fu_1230_p2;
wire   [2:0] tmp_12_fu_1241_p2;
wire   [5:0] start_pos2_fu_1246_p3;
wire   [5:0] end_pos1_fu_1254_p2;
wire   [6:0] tmp_35_fu_1266_p1;
wire   [6:0] tmp_36_fu_1270_p1;
wire   [0:0] tmp_34_fu_1260_p2;
wire   [6:0] tmp_38_fu_1284_p2;
wire   [6:0] tmp_40_fu_1296_p2;
reg   [63:0] tmp_37_fu_1274_p4;
wire   [6:0] tmp_39_fu_1290_p2;
wire   [6:0] tmp_41_fu_1302_p3;
wire   [6:0] tmp_43_fu_1318_p3;
wire   [6:0] tmp_44_fu_1326_p2;
wire   [63:0] tmp_42_fu_1310_p3;
wire   [63:0] tmp_45_fu_1332_p1;
wire   [63:0] tmp_46_fu_1336_p1;
wire   [63:0] tmp_47_fu_1340_p2;
wire   [63:0] tmp_48_fu_1346_p2;
wire   [63:0] tmp_49_fu_1352_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_condition_782;
reg    ap_condition_1458;
reg    ap_condition_473;
reg    ap_condition_544;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 outStream_channel_1_V_1_sel_rd = 1'b0;
#0 outStream_channel_1_V_1_sel_wr = 1'b0;
#0 outStream_channel_1_V_1_state = 2'd0;
#0 outstream_channel_2_V_1_sel_rd = 1'b0;
#0 outstream_channel_2_V_1_sel_wr = 1'b0;
#0 outstream_channel_2_V_1_state = 2'd0;
#0 inner_index = 32'd0;
#0 guard_variable_for_d_2 = 1'd0;
#0 FRAME_BUFFER_DIM_r = 32'd0;
#0 guard_variable_for_d = 1'd0;
#0 FRAME_OFFSET = 32'd0;
#0 guard_variable_for_d_1 = 1'd0;
#0 FRAME_BUFFER_NUMBER_r = 8'd0;
#0 guard_variable_for_d_3 = 1'd0;
#0 BASE_ADDRESS_r = 32'd0;
#0 luma_chroma_switch = 32'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_base_ddr_addr_ARREADY = 1'b0;
end

ddr_to_axis_reader_SD_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ddr_to_axis_reader_SD_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .base_address(base_address),
    .frame_buffer_dim(frame_buffer_dim),
    .frame_buffer_offset(frame_buffer_offset),
    .frame_buffer_number(frame_buffer_number),
    .update_intr(update_intr),
    .stereo_enabler(stereo_enabler)
);

ddr_to_axis_reader_SD_base_ddr_addr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BASE_DDR_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BASE_DDR_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BASE_DDR_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE ))
ddr_to_axis_reader_SD_base_ddr_addr_m_axi_U(
    .AWVALID(m_axi_base_ddr_addr_AWVALID),
    .AWREADY(m_axi_base_ddr_addr_AWREADY),
    .AWADDR(m_axi_base_ddr_addr_AWADDR),
    .AWID(m_axi_base_ddr_addr_AWID),
    .AWLEN(m_axi_base_ddr_addr_AWLEN),
    .AWSIZE(m_axi_base_ddr_addr_AWSIZE),
    .AWBURST(m_axi_base_ddr_addr_AWBURST),
    .AWLOCK(m_axi_base_ddr_addr_AWLOCK),
    .AWCACHE(m_axi_base_ddr_addr_AWCACHE),
    .AWPROT(m_axi_base_ddr_addr_AWPROT),
    .AWQOS(m_axi_base_ddr_addr_AWQOS),
    .AWREGION(m_axi_base_ddr_addr_AWREGION),
    .AWUSER(m_axi_base_ddr_addr_AWUSER),
    .WVALID(m_axi_base_ddr_addr_WVALID),
    .WREADY(m_axi_base_ddr_addr_WREADY),
    .WDATA(m_axi_base_ddr_addr_WDATA),
    .WSTRB(m_axi_base_ddr_addr_WSTRB),
    .WLAST(m_axi_base_ddr_addr_WLAST),
    .WID(m_axi_base_ddr_addr_WID),
    .WUSER(m_axi_base_ddr_addr_WUSER),
    .ARVALID(m_axi_base_ddr_addr_ARVALID),
    .ARREADY(m_axi_base_ddr_addr_ARREADY),
    .ARADDR(m_axi_base_ddr_addr_ARADDR),
    .ARID(m_axi_base_ddr_addr_ARID),
    .ARLEN(m_axi_base_ddr_addr_ARLEN),
    .ARSIZE(m_axi_base_ddr_addr_ARSIZE),
    .ARBURST(m_axi_base_ddr_addr_ARBURST),
    .ARLOCK(m_axi_base_ddr_addr_ARLOCK),
    .ARCACHE(m_axi_base_ddr_addr_ARCACHE),
    .ARPROT(m_axi_base_ddr_addr_ARPROT),
    .ARQOS(m_axi_base_ddr_addr_ARQOS),
    .ARREGION(m_axi_base_ddr_addr_ARREGION),
    .ARUSER(m_axi_base_ddr_addr_ARUSER),
    .RVALID(m_axi_base_ddr_addr_RVALID),
    .RREADY(m_axi_base_ddr_addr_RREADY),
    .RDATA(m_axi_base_ddr_addr_RDATA),
    .RLAST(m_axi_base_ddr_addr_RLAST),
    .RID(m_axi_base_ddr_addr_RID),
    .RUSER(m_axi_base_ddr_addr_RUSER),
    .RRESP(m_axi_base_ddr_addr_RRESP),
    .BVALID(m_axi_base_ddr_addr_BVALID),
    .BREADY(m_axi_base_ddr_addr_BREADY),
    .BRESP(m_axi_base_ddr_addr_BRESP),
    .BID(m_axi_base_ddr_addr_BID),
    .BUSER(m_axi_base_ddr_addr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(base_ddr_addr_ARVALID),
    .I_ARREADY(base_ddr_addr_ARREADY),
    .I_ARADDR(base_ddr_addr_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd512),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(base_ddr_addr_RVALID),
    .I_RREADY(base_ddr_addr_RREADY),
    .I_RDATA(base_ddr_addr_RDATA),
    .I_RID(base_ddr_addr_RID),
    .I_RUSER(base_ddr_addr_RUSER),
    .I_RRESP(base_ddr_addr_RRESP),
    .I_RLAST(base_ddr_addr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(base_ddr_addr_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(base_ddr_addr_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(base_ddr_addr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(base_ddr_addr_BRESP),
    .I_BID(base_ddr_addr_BID),
    .I_BUSER(base_ddr_addr_BUSER)
);

ddr_to_axis_readebkb #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(base_ddr_addr_addr_r_reg_1435),
    .q1(buffer_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        BASE_ADDRESS_r <= 32'd0;
    end else begin
        if (((p_BASE_ADDRESS_flag_fu_557_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            BASE_ADDRESS_r <= tmp_7_base_address_fu_563_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FRAME_BUFFER_DIM_r <= 32'd0;
    end else begin
        if (((p_FRAME_BUFFER_DIM_fl_fu_519_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            FRAME_BUFFER_DIM_r <= frame_buffer_dim;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FRAME_BUFFER_NUMBER_r <= 8'd0;
    end else begin
        if (((p_FRAME_BUFFER_NUMBER_fu_539_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            FRAME_BUFFER_NUMBER_r <= frame_buffer_number;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FRAME_OFFSET <= 32'd0;
    end else begin
        if (((p_FRAME_OFFSET_flag_fu_533_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            FRAME_OFFSET <= frame_buffer_offset;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((stereo_enabler_read_reg_1363 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((stereo_enabler_read_reg_1363 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((stereo_enabler_read_reg_1363 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state17)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state17);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((stereo_enabler_read_reg_1363 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b0;
    end else begin
        if (((exitcond1_fu_647_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            if ((1'b1 == ap_condition_473)) begin
                ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b0;
            end else if ((1'b1 == ap_condition_1458)) begin
                ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inner_index <= 32'd0;
    end else begin
        if ((~((1'b1 == ap_block_state2_io) | (outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0)) & (exitcond1_fu_647_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            inner_index <= storemerge_fu_678_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        luma_chroma_switch <= 32'd0;
    end else begin
        if ((1'b1 == ap_condition_544)) begin
            if ((tmp_16_fu_721_p2 == 1'd1)) begin
                luma_chroma_switch <= 32'd0;
            end else if ((tmp_16_fu_721_p2 == 1'd0)) begin
                luma_chroma_switch <= tmp_18_fu_727_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_channel_1_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_channel_1_V_1_ack_out == 1'b1) & (outStream_channel_1_V_1_vld_out == 1'b1))) begin
            outStream_channel_1_V_1_sel_rd <= ~outStream_channel_1_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_channel_1_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_channel_1_V_1_ack_in == 1'b1) & (outStream_channel_1_V_1_vld_in == 1'b1))) begin
            outStream_channel_1_V_1_sel_wr <= ~outStream_channel_1_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_channel_1_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_channel_1_V_1_state == 2'd2) & (outStream_channel_1_V_1_vld_in == 1'b0)) | ((outStream_channel_1_V_1_state == 2'd3) & (outStream_channel_1_V_1_vld_in == 1'b0) & (outStream_channel_1_V_1_ack_out == 1'b1)))) begin
            outStream_channel_1_V_1_state <= 2'd2;
        end else if ((((outStream_channel_1_V_1_state == 2'd1) & (outStream_channel_1_V_1_ack_out == 1'b0)) | ((outStream_channel_1_V_1_state == 2'd3) & (outStream_channel_1_V_1_ack_out == 1'b0) & (outStream_channel_1_V_1_vld_in == 1'b1)))) begin
            outStream_channel_1_V_1_state <= 2'd1;
        end else if (((~((outStream_channel_1_V_1_vld_in == 1'b0) & (outStream_channel_1_V_1_ack_out == 1'b1)) & ~((outStream_channel_1_V_1_ack_out == 1'b0) & (outStream_channel_1_V_1_vld_in == 1'b1)) & (outStream_channel_1_V_1_state == 2'd3)) | ((outStream_channel_1_V_1_state == 2'd1) & (outStream_channel_1_V_1_ack_out == 1'b1)) | ((outStream_channel_1_V_1_state == 2'd2) & (outStream_channel_1_V_1_vld_in == 1'b1)))) begin
            outStream_channel_1_V_1_state <= 2'd3;
        end else begin
            outStream_channel_1_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_channel_2_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_channel_2_V_1_ack_out == 1'b1) & (outstream_channel_2_V_1_vld_out == 1'b1))) begin
            outstream_channel_2_V_1_sel_rd <= ~outstream_channel_2_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_channel_2_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outstream_channel_2_V_1_ack_in == 1'b1) & (outstream_channel_2_V_1_vld_in == 1'b1))) begin
            outstream_channel_2_V_1_sel_wr <= ~outstream_channel_2_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_channel_2_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_channel_2_V_1_state == 2'd2) & (outstream_channel_2_V_1_vld_in == 1'b0)) | ((outstream_channel_2_V_1_state == 2'd3) & (outstream_channel_2_V_1_vld_in == 1'b0) & (outstream_channel_2_V_1_ack_out == 1'b1)))) begin
            outstream_channel_2_V_1_state <= 2'd2;
        end else if ((((outstream_channel_2_V_1_state == 2'd1) & (outstream_channel_2_V_1_ack_out == 1'b0)) | ((outstream_channel_2_V_1_state == 2'd3) & (outstream_channel_2_V_1_ack_out == 1'b0) & (outstream_channel_2_V_1_vld_in == 1'b1)))) begin
            outstream_channel_2_V_1_state <= 2'd1;
        end else if (((~((outstream_channel_2_V_1_vld_in == 1'b0) & (outstream_channel_2_V_1_ack_out == 1'b1)) & ~((outstream_channel_2_V_1_ack_out == 1'b0) & (outstream_channel_2_V_1_vld_in == 1'b1)) & (outstream_channel_2_V_1_state == 2'd3)) | ((outstream_channel_2_V_1_state == 2'd1) & (outstream_channel_2_V_1_ack_out == 1'b1)) | ((outstream_channel_2_V_1_state == 2'd2) & (outstream_channel_2_V_1_vld_in == 1'b1)))) begin
            outstream_channel_2_V_1_state <= 2'd3;
        end else begin
            outstream_channel_2_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_386 <= i_1_reg_1415;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_386 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_1426 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_397 <= indvar_next_reg_1430;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_397 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((stereo_enabler_read_reg_1363 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        j1_reg_430 <= 13'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_fu_1082_p3 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j1_reg_430 <= j_2_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((stereo_enabler_read_reg_1363 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        j_reg_409 <= 13'd0;
    end else if (((tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_409 <= j_4_fu_838_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        offset1_reg_376 <= offset_1_fu_1076_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        offset1_reg_376 <= offset_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_1426 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        base_ddr_addr_addr_r_reg_1435 <= base_ddr_addr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_1426 <= exitcond_fu_692_p2;
        exitcond_reg_1426_pp0_iter1_reg <= exitcond_reg_1426;
        indvar_reg_397_pp0_iter1_reg <= indvar_reg_397;
    end
end

always @ (posedge ap_clk) begin
    if (((guard_variable_for_d_5_load_fu_460_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        guard_variable_for_d <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((guard_variable_for_d_6_load_fu_475_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        guard_variable_for_d_1 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((guard_variable_for_d_4_load_fu_445_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        guard_variable_for_d_2 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((guard_variable_for_d_7_load_fu_490_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        guard_variable_for_d_3 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | (outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_1415 <= i_1_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_1430 <= indvar_next_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        inner_index_load_reg_1367 <= inner_index;
        stereo_enabler_read_reg_1363 <= stereo_enabler;
        tmp_1_FRAME_BUFFER_N_1_reg_1394[7 : 0] <= tmp_1_FRAME_BUFFER_N_1_fu_553_p1[7 : 0];
        tmp_5_reg_1407 <= {{frame_buffer_dim_FRA_fu_525_p3[31:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_channel_1_V_1_load_A == 1'b1)) begin
        outStream_channel_1_V_1_payload_A <= outStream_channel_1_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_channel_1_V_1_load_B == 1'b1)) begin
        outStream_channel_1_V_1_payload_B <= outStream_channel_1_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_channel_2_V_1_load_A == 1'b1)) begin
        outstream_channel_2_V_1_payload_A <= tmp_50_fu_1358_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_channel_2_V_1_load_B == 1'b1)) begin
        outstream_channel_2_V_1_payload_B <= tmp_50_fu_1358_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_fu_1082_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_11_reg_1492 <= tmp_11_fu_1090_p1;
        tmp_13_reg_1503 <= {{j1_reg_430[2:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_16_reg_1444 <= tmp_16_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_16_reg_1444_pp1_iter1_reg <= tmp_16_reg_1444;
        tmp_6_reg_1440 <= j_reg_409[32'd12];
        tmp_6_reg_1440_pp1_iter1_reg <= tmp_6_reg_1440;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_721_p2 == 1'd1) & (tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_51_reg_1458 <= tmp_51_fu_771_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_721_p2 == 1'd0) & (tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_70_reg_1448 <= tmp_70_fu_739_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_reg_1488 <= j1_reg_430[32'd12];
        tmp_reg_1488_pp2_iter1_reg <= tmp_reg_1488;
    end
end

always @ (*) begin
    if ((exitcond_fu_692_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_6_fu_709_p3 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_fu_1082_p3 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0)) & (exitcond1_fu_647_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((guard_variable_for_d_7_load_fu_490_p1 == 1'd1)) begin
            ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 = 1'd0;
        end else if ((guard_variable_for_d_7_load_fu_490_p1 == 1'd0)) begin
            ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 = 1'd1;
        end else begin
            ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((guard_variable_for_d_7_load_fu_490_p1 == 1'd1)) begin
            ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 = BASE_ADDRESS_r;
        end else if ((guard_variable_for_d_7_load_fu_490_p1 == 1'd0)) begin
            ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 = base_address;
        end else begin
            ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((guard_variable_for_d_4_load_fu_445_p1 == 1'd1)) begin
            ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 = 1'd0;
        end else if ((guard_variable_for_d_4_load_fu_445_p1 == 1'd0)) begin
            ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 = 1'd1;
        end else begin
            ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((guard_variable_for_d_4_load_fu_445_p1 == 1'd1)) begin
            ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 = FRAME_BUFFER_DIM_r;
        end else if ((guard_variable_for_d_4_load_fu_445_p1 == 1'd0)) begin
            ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 = frame_buffer_dim;
        end else begin
            ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((guard_variable_for_d_6_load_fu_475_p1 == 1'd1)) begin
            ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 = 1'd0;
        end else if ((guard_variable_for_d_6_load_fu_475_p1 == 1'd0)) begin
            ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 = 1'd1;
        end else begin
            ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((guard_variable_for_d_6_load_fu_475_p1 == 1'd1)) begin
            ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 = FRAME_BUFFER_NUMBER_r;
        end else if ((guard_variable_for_d_6_load_fu_475_p1 == 1'd0)) begin
            ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 = frame_buffer_number;
        end else begin
            ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((guard_variable_for_d_5_load_fu_460_p1 == 1'd1)) begin
            ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 = 1'd0;
        end else if ((guard_variable_for_d_5_load_fu_460_p1 == 1'd0)) begin
            ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 = 1'd1;
        end else begin
            ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((guard_variable_for_d_5_load_fu_460_p1 == 1'd1)) begin
            ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 = FRAME_OFFSET;
        end else if ((guard_variable_for_d_5_load_fu_460_p1 == 1'd0)) begin
            ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 = frame_buffer_offset;
        end else begin
            ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_reg_1426 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_401_p4 = indvar_next_reg_1430;
    end else begin
        ap_phi_mux_indvar_phi_fu_401_p4 = indvar_reg_397;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_782)) begin
        if ((tmp_16_fu_721_p2 == 1'd0)) begin
            ap_phi_mux_j_1_phi_fu_423_p4 = j_reg_409;
        end else if ((tmp_16_fu_721_p2 == 1'd1)) begin
            ap_phi_mux_j_1_phi_fu_423_p4 = j_3_fu_764_p2;
        end else begin
            ap_phi_mux_j_1_phi_fu_423_p4 = ap_phi_reg_pp1_iter0_j_1_reg_420;
        end
    end else begin
        ap_phi_mux_j_1_phi_fu_423_p4 = ap_phi_reg_pp1_iter0_j_1_reg_420;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0)) & (exitcond1_fu_647_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_base_ddr_addr_ARREADY == 1'b0)) begin
        ap_sig_ioackin_base_ddr_addr_ARREADY = base_ddr_addr_ARREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0)) & (exitcond1_fu_647_p2 == 1'd0) & (ap_reg_ioackin_base_ddr_addr_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        base_ddr_addr_ARVALID = 1'b1;
    end else begin
        base_ddr_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1426 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        base_ddr_addr_RREADY = 1'b1;
    end else begin
        base_ddr_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_647_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        base_ddr_addr_blk_n_AR = m_axi_base_ddr_addr_ARREADY;
    end else begin
        base_ddr_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_1426 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        base_ddr_addr_blk_n_R = m_axi_base_ddr_addr_RVALID;
    end else begin
        base_ddr_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buffer_address0 = gepindex276_cast_fu_1104_p1;
    end else if (((tmp_16_fu_721_p2 == 1'd1) & (tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_address0 = gepindex2_cast_fu_833_p1;
    end else if (((tmp_16_fu_721_p2 == 1'd0) & (tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_address0 = gepindex264_cast_fu_753_p1;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buffer_address1 = gepindex276_cast_fu_1104_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_address1 = indvar1_fu_704_p1;
    end else begin
        buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((tmp_16_fu_721_p2 == 1'd1) & (tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((tmp_16_fu_721_p2 == 1'd0) & (tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1426_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_01001) & (tmp_reg_1488 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        outStream_channel_1_V_1_data_in = tmp_33_fu_1236_p1;
    end else if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_predicate_op228_write_state14 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        outStream_channel_1_V_1_data_in = tmp_69_fu_1071_p1;
    end else if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_predicate_op207_write_state14 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        outStream_channel_1_V_1_data_in = tmp_87_fu_955_p1;
    end else begin
        outStream_channel_1_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_channel_1_V_1_sel == 1'b1)) begin
        outStream_channel_1_V_1_data_out = outStream_channel_1_V_1_payload_B;
    end else begin
        outStream_channel_1_V_1_data_out = outStream_channel_1_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (tmp_reg_1488 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op228_write_state14 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op207_write_state14 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        outStream_channel_1_V_1_vld_in = 1'b1;
    end else begin
        outStream_channel_1_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_1488_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((tmp_reg_1488 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((tmp_16_reg_1444_pp1_iter1_reg == 1'd0) & (tmp_6_reg_1440_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((tmp_16_reg_1444_pp1_iter1_reg == 1'd1) & (tmp_6_reg_1440_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((tmp_16_reg_1444 == 1'd0) & (tmp_6_reg_1440 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((tmp_16_reg_1444 == 1'd1) & (tmp_6_reg_1440 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        outStream_channel_1_V_TDATA_blk_n = outStream_channel_1_V_1_state[1'd1];
    end else begin
        outStream_channel_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outstream_channel_2_V_1_sel == 1'b1)) begin
        outstream_channel_2_V_1_data_out = outstream_channel_2_V_1_payload_B;
    end else begin
        outstream_channel_2_V_1_data_out = outstream_channel_2_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_reg_1488 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        outstream_channel_2_V_1_vld_in = 1'b1;
    end else begin
        outstream_channel_2_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_1488_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((tmp_reg_1488 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        outstream_channel_2_V_TDATA_blk_n = outstream_channel_2_V_1_state[1'd1];
    end else begin
        outstream_channel_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | (outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0)) & (exitcond1_fu_647_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state2_io) | (outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0)) & (exitcond1_fu_647_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_692_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_692_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((stereo_enabler_read_reg_1363 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (tmp_6_fu_709_p3 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (tmp_6_fu_709_p3 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_fu_1082_p3 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_fu_1082_p3 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addrCmp1_fu_805_p2 = ((mem_index_gep_fu_789_p2 < 14'd516) ? 1'b1 : 1'b0);

assign addrCmp_fu_799_p2 = ((tmp_52_fu_775_p4 < 10'd1020) ? 1'b1 : 1'b0);

assign adjSize55_cast_fu_795_p1 = mem_index_gep_fu_789_p2;

assign adjSize_fu_785_p1 = tmp_52_fu_775_p4;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_1426 == 1'd0) & (base_ddr_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_1426 == 1'd0) & (base_ddr_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((exitcond_reg_1426 == 1'd0) & (base_ddr_addr_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = (((ap_predicate_op228_write_state14 == 1'b1) & (outStream_channel_1_V_1_ack_in == 1'b0)) | ((ap_predicate_op207_write_state14 == 1'b1) & (outStream_channel_1_V_1_ack_in == 1'b0)));
end

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = (((ap_predicate_op230_write_state15 == 1'b1) & (outStream_channel_1_V_1_ack_in == 1'b0)) | ((ap_predicate_op229_write_state15 == 1'b1) & (outStream_channel_1_V_1_ack_in == 1'b0)));
end

assign ap_block_state15_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = (((tmp_reg_1488 == 1'd0) & (outstream_channel_2_V_1_ack_in == 1'b0)) | ((tmp_reg_1488 == 1'd0) & (outStream_channel_1_V_1_ack_in == 1'b0)));
end

assign ap_block_state18_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = (((tmp_reg_1488_pp2_iter1_reg == 1'd0) & (outstream_channel_2_V_1_ack_in == 1'b0)) | ((tmp_reg_1488_pp2_iter1_reg == 1'd0) & (outStream_channel_1_V_1_ack_in == 1'b0)));
end

assign ap_block_state19_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((exitcond1_fu_647_p2 == 1'd0) & (ap_sig_ioackin_base_ddr_addr_ARREADY == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1458 = (~((outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0)) & (base_ddr_addr_ARREADY == 1'b1));
end

always @ (*) begin
    ap_condition_473 = ~((1'b1 == ap_block_state2_io) | (outStream_channel_1_V_1_ack_in == 1'b0) | (outstream_channel_2_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_544 = ((tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_782 = ((tmp_6_fu_709_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp1_iter0_j_1_reg_420 = 'bx;

always @ (*) begin
    ap_predicate_op207_write_state14 = ((tmp_16_reg_1444 == 1'd0) & (tmp_6_reg_1440 == 1'd0));
end

always @ (*) begin
    ap_predicate_op228_write_state14 = ((tmp_16_reg_1444 == 1'd1) & (tmp_6_reg_1440 == 1'd0));
end

always @ (*) begin
    ap_predicate_op229_write_state15 = ((tmp_16_reg_1444_pp1_iter1_reg == 1'd0) & (tmp_6_reg_1440_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op230_write_state15 = ((tmp_16_reg_1444_pp1_iter1_reg == 1'd1) & (tmp_6_reg_1440_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign base_ddr_addr_ARADDR = tmp_1_fu_658_p1;

assign end_pos1_fu_1254_p2 = (start_pos2_fu_1246_p3 | 6'd7);

assign end_pos2_fu_967_p2 = (start_pos_fu_960_p3 | 6'd7);

assign end_pos3_fu_851_p2 = (start_pos3_fu_844_p3 | 6'd7);

assign end_pos_fu_1132_p2 = (start_pos1_fu_1125_p3 | 6'd7);

assign exitcond1_fu_647_p2 = ((i_reg_386 == tmp_5_reg_1407) ? 1'b1 : 1'b0);

assign exitcond_fu_692_p2 = ((ap_phi_mux_indvar_phi_fu_401_p4 == 10'd512) ? 1'b1 : 1'b0);

assign frame_buffer_dim_FRA_fu_525_p0 = update_intr;

assign frame_buffer_dim_FRA_fu_525_p3 = ((frame_buffer_dim_FRA_fu_525_p0[0:0] === 1'b1) ? frame_buffer_dim : ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4);

assign frame_buffer_offset_s_fu_571_p0 = update_intr;

assign frame_buffer_offset_s_fu_571_p3 = ((frame_buffer_offset_s_fu_571_p0[0:0] === 1'b1) ? frame_buffer_offset : ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4);

assign gepindex1_fu_817_p3 = ((addrCmp_fu_799_p2[0:0] === 1'b1) ? gepindex_fu_811_p2 : 15'd511);

assign gepindex264_cast_fu_753_p1 = gepindex62_cast_fu_743_p4;

assign gepindex276_cast_fu_1104_p1 = gepindex74_cast_fu_1094_p4;

assign gepindex2_cast_fu_833_p1 = $signed(gepindex2_fu_825_p3);

assign gepindex2_fu_825_p3 = ((addrCmp1_fu_805_p2[0:0] === 1'b1) ? gepindex1_fu_817_p3 : 15'd511);

assign gepindex62_cast_fu_743_p4 = {{j_reg_409[11:3]}};

assign gepindex74_cast_fu_1094_p4 = {{j1_reg_430[11:3]}};

assign gepindex_fu_811_p2 = ($signed(15'd32764) + $signed(adjSize55_cast_fu_795_p1));

assign guard_variable_for_d_4_load_fu_445_p1 = guard_variable_for_d_2;

assign guard_variable_for_d_5_load_fu_460_p1 = guard_variable_for_d;

assign guard_variable_for_d_6_load_fu_475_p1 = guard_variable_for_d_1;

assign guard_variable_for_d_7_load_fu_490_p1 = guard_variable_for_d_3;

assign i_1_fu_652_p2 = (i_reg_386 + 20'd1);

assign indvar1_fu_704_p1 = indvar_reg_397_pp0_iter1_reg;

assign indvar_next_fu_698_p2 = (ap_phi_mux_indvar_phi_fu_401_p4 + 10'd1);

assign j_2_fu_1119_p2 = (13'd2 + j1_reg_430);

assign j_3_fu_764_p2 = ($signed(13'd8191) + $signed(j_reg_409));

assign j_4_fu_838_p2 = (ap_phi_mux_j_1_phi_fu_423_p4 + 13'd1);

assign mem_index_gep_fu_789_p2 = ($signed(14'd4) + $signed(adjSize_fu_785_p1));

assign offset_1_fu_1076_p2 = ($signed(offset1_reg_376) + $signed(32'd512));

assign offset_fu_607_p2 = (tmp_9_fu_603_p1 + tmp_7_BASE_ADDRESS_l_fu_579_p3);

assign outStream_channel_1_V_1_ack_in = outStream_channel_1_V_1_state[1'd1];

assign outStream_channel_1_V_1_ack_out = outStream_channel_1_V_TREADY;

assign outStream_channel_1_V_1_load_A = (outStream_channel_1_V_1_state_cmp_full & ~outStream_channel_1_V_1_sel_wr);

assign outStream_channel_1_V_1_load_B = (outStream_channel_1_V_1_state_cmp_full & outStream_channel_1_V_1_sel_wr);

assign outStream_channel_1_V_1_sel = outStream_channel_1_V_1_sel_rd;

assign outStream_channel_1_V_1_state_cmp_full = ((outStream_channel_1_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_channel_1_V_1_vld_out = outStream_channel_1_V_1_state[1'd0];

assign outStream_channel_1_V_TDATA = outStream_channel_1_V_1_data_out;

assign outStream_channel_1_V_TVALID = outStream_channel_1_V_1_state[1'd0];

assign outstream_channel_2_V_1_ack_in = outstream_channel_2_V_1_state[1'd1];

assign outstream_channel_2_V_1_ack_out = outstream_channel_2_V_TREADY;

assign outstream_channel_2_V_1_load_A = (outstream_channel_2_V_1_state_cmp_full & ~outstream_channel_2_V_1_sel_wr);

assign outstream_channel_2_V_1_load_B = (outstream_channel_2_V_1_state_cmp_full & outstream_channel_2_V_1_sel_wr);

assign outstream_channel_2_V_1_sel = outstream_channel_2_V_1_sel_rd;

assign outstream_channel_2_V_1_state_cmp_full = ((outstream_channel_2_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outstream_channel_2_V_1_vld_out = outstream_channel_2_V_1_state[1'd0];

assign outstream_channel_2_V_TDATA = outstream_channel_2_V_1_data_out;

assign outstream_channel_2_V_TVALID = outstream_channel_2_V_1_state[1'd0];

assign p_BASE_ADDRESS_flag_fu_557_p1 = update_intr;

assign p_BASE_ADDRESS_flag_fu_557_p2 = (p_BASE_ADDRESS_flag_fu_557_p1 | ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4);

assign p_FRAME_BUFFER_DIM_fl_fu_519_p1 = update_intr;

assign p_FRAME_BUFFER_DIM_fl_fu_519_p2 = (p_FRAME_BUFFER_DIM_fl_fu_519_p1 | ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4);

assign p_FRAME_BUFFER_NUMBER_fu_539_p1 = update_intr;

assign p_FRAME_BUFFER_NUMBER_fu_539_p2 = (p_FRAME_BUFFER_NUMBER_fu_539_p1 | ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4);

assign p_FRAME_OFFSET_flag_fu_533_p1 = update_intr;

assign p_FRAME_OFFSET_flag_fu_533_p2 = (p_FRAME_OFFSET_flag_fu_533_p1 | ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4);

assign start_pos1_fu_1125_p3 = {{tmp_13_reg_1503}, {4'd0}};

assign start_pos2_fu_1246_p3 = {{tmp_12_fu_1241_p2}, {3'd0}};

assign start_pos3_fu_844_p3 = {{tmp_70_reg_1448}, {3'd0}};

assign start_pos_fu_960_p3 = {{tmp_51_reg_1458}, {3'd0}};

assign storemerge_fu_678_p3 = ((tmp_3_fu_669_p2[0:0] === 1'b1) ? 32'd0 : tmp_4_fu_673_p2);

assign tmp_11_fu_1090_p1 = j1_reg_430[2:0];

assign tmp_12_fu_1241_p2 = (tmp_11_reg_1492 | 3'd1);

assign tmp_15_fu_1138_p2 = ((start_pos1_fu_1125_p3 > end_pos_fu_1132_p2) ? 1'b1 : 1'b0);

assign tmp_16_fu_721_p2 = ((luma_chroma_switch == 32'd1) ? 1'b1 : 1'b0);

assign tmp_17_fu_1144_p1 = start_pos1_fu_1125_p3;

assign tmp_18_fu_727_p2 = (32'd1 + luma_chroma_switch);

assign tmp_19_fu_1148_p1 = end_pos_fu_1132_p2;

assign tmp_1_FRAME_BUFFER_N_1_fu_553_p1 = tmp_1_FRAME_BUFFER_N_fu_545_p3;

assign tmp_1_FRAME_BUFFER_N_fu_545_p0 = update_intr;

assign tmp_1_FRAME_BUFFER_N_fu_545_p3 = ((tmp_1_FRAME_BUFFER_N_fu_545_p0[0:0] === 1'b1) ? frame_buffer_number : ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4);

assign tmp_1_fu_658_p1 = offset1_reg_376;

integer ap_tvar_int_0;

always @ (buffer_q0) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_20_fu_1152_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_20_fu_1152_p4[ap_tvar_int_0] = buffer_q0[63 - ap_tvar_int_0];
        end
    end
end

assign tmp_21_fu_1162_p2 = (tmp_17_fu_1144_p1 - tmp_19_fu_1148_p1);

assign tmp_22_fu_1168_p2 = (tmp_17_fu_1144_p1 ^ 7'd63);

assign tmp_23_fu_1174_p2 = (tmp_19_fu_1148_p1 - tmp_17_fu_1144_p1);

assign tmp_24_fu_1180_p3 = ((tmp_15_fu_1138_p2[0:0] === 1'b1) ? tmp_21_fu_1162_p2 : tmp_23_fu_1174_p2);

assign tmp_25_fu_1188_p3 = ((tmp_15_fu_1138_p2[0:0] === 1'b1) ? tmp_20_fu_1152_p4 : buffer_q0);

assign tmp_26_fu_1196_p3 = ((tmp_15_fu_1138_p2[0:0] === 1'b1) ? tmp_22_fu_1168_p2 : tmp_17_fu_1144_p1);

assign tmp_27_fu_1204_p2 = (7'd63 - tmp_24_fu_1180_p3);

assign tmp_28_fu_1210_p1 = tmp_26_fu_1196_p3;

assign tmp_29_fu_1214_p1 = tmp_27_fu_1204_p2;

assign tmp_2_fu_593_p4 = {{tmp_s_fu_587_p2[31:3]}};

assign tmp_30_fu_1218_p2 = tmp_25_fu_1188_p3 >> tmp_28_fu_1210_p1;

assign tmp_31_fu_1224_p2 = 64'd18446744073709551615 >> tmp_29_fu_1214_p1;

assign tmp_32_fu_1230_p2 = (tmp_31_fu_1224_p2 & tmp_30_fu_1218_p2);

assign tmp_33_fu_1236_p1 = tmp_32_fu_1230_p2[7:0];

assign tmp_34_fu_1260_p2 = ((start_pos2_fu_1246_p3 > end_pos1_fu_1254_p2) ? 1'b1 : 1'b0);

assign tmp_35_fu_1266_p1 = start_pos2_fu_1246_p3;

assign tmp_36_fu_1270_p1 = end_pos1_fu_1254_p2;

integer ap_tvar_int_1;

always @ (buffer_q1) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_37_fu_1274_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_37_fu_1274_p4[ap_tvar_int_1] = buffer_q1[63 - ap_tvar_int_1];
        end
    end
end

assign tmp_38_fu_1284_p2 = (tmp_35_fu_1266_p1 - tmp_36_fu_1270_p1);

assign tmp_39_fu_1290_p2 = (tmp_35_fu_1266_p1 ^ 7'd63);

assign tmp_3_fu_669_p2 = ((inner_index_load_reg_1367 == tmp_1_FRAME_BUFFER_N_1_reg_1394) ? 1'b1 : 1'b0);

assign tmp_40_fu_1296_p2 = (tmp_36_fu_1270_p1 - tmp_35_fu_1266_p1);

assign tmp_41_fu_1302_p3 = ((tmp_34_fu_1260_p2[0:0] === 1'b1) ? tmp_38_fu_1284_p2 : tmp_40_fu_1296_p2);

assign tmp_42_fu_1310_p3 = ((tmp_34_fu_1260_p2[0:0] === 1'b1) ? tmp_37_fu_1274_p4 : buffer_q1);

assign tmp_43_fu_1318_p3 = ((tmp_34_fu_1260_p2[0:0] === 1'b1) ? tmp_39_fu_1290_p2 : tmp_35_fu_1266_p1);

assign tmp_44_fu_1326_p2 = (7'd63 - tmp_41_fu_1302_p3);

assign tmp_45_fu_1332_p1 = tmp_43_fu_1318_p3;

assign tmp_46_fu_1336_p1 = tmp_44_fu_1326_p2;

assign tmp_47_fu_1340_p2 = tmp_42_fu_1310_p3 >> tmp_45_fu_1332_p1;

assign tmp_48_fu_1346_p2 = 64'd18446744073709551615 >> tmp_46_fu_1336_p1;

assign tmp_49_fu_1352_p2 = (tmp_48_fu_1346_p2 & tmp_47_fu_1340_p2);

assign tmp_4_fu_673_p2 = ($signed(inner_index_load_reg_1367) + $signed(32'd1));

assign tmp_50_fu_1358_p1 = tmp_49_fu_1352_p2[7:0];

assign tmp_51_fu_771_p1 = j_3_fu_764_p2[2:0];

assign tmp_52_fu_775_p4 = {{j_3_fu_764_p2[12:3]}};

assign tmp_53_fu_973_p2 = ((start_pos_fu_960_p3 > end_pos2_fu_967_p2) ? 1'b1 : 1'b0);

assign tmp_54_fu_979_p1 = start_pos_fu_960_p3;

assign tmp_55_fu_983_p1 = end_pos2_fu_967_p2;

integer ap_tvar_int_2;

always @ (buffer_q0) begin
    for (ap_tvar_int_2 = 64 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 - 0) begin
            tmp_56_fu_987_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_56_fu_987_p4[ap_tvar_int_2] = buffer_q0[63 - ap_tvar_int_2];
        end
    end
end

assign tmp_57_fu_997_p2 = (tmp_54_fu_979_p1 - tmp_55_fu_983_p1);

assign tmp_58_fu_1003_p2 = (tmp_54_fu_979_p1 ^ 7'd63);

assign tmp_59_fu_1009_p2 = (tmp_55_fu_983_p1 - tmp_54_fu_979_p1);

assign tmp_60_fu_1015_p3 = ((tmp_53_fu_973_p2[0:0] === 1'b1) ? tmp_57_fu_997_p2 : tmp_59_fu_1009_p2);

assign tmp_61_fu_1023_p3 = ((tmp_53_fu_973_p2[0:0] === 1'b1) ? tmp_56_fu_987_p4 : buffer_q0);

assign tmp_62_fu_1031_p3 = ((tmp_53_fu_973_p2[0:0] === 1'b1) ? tmp_58_fu_1003_p2 : tmp_54_fu_979_p1);

assign tmp_63_fu_1039_p2 = (7'd63 - tmp_60_fu_1015_p3);

assign tmp_64_fu_1045_p1 = tmp_62_fu_1031_p3;

assign tmp_65_fu_1049_p1 = tmp_63_fu_1039_p2;

assign tmp_66_fu_1053_p2 = tmp_61_fu_1023_p3 >> tmp_64_fu_1045_p1;

assign tmp_67_fu_1059_p2 = 64'd18446744073709551615 >> tmp_65_fu_1049_p1;

assign tmp_68_fu_1065_p2 = (tmp_67_fu_1059_p2 & tmp_66_fu_1053_p2);

assign tmp_69_fu_1071_p1 = tmp_68_fu_1065_p2[7:0];

assign tmp_6_fu_709_p3 = j_reg_409[32'd12];

assign tmp_70_fu_739_p1 = j_reg_409[2:0];

assign tmp_71_fu_857_p2 = ((start_pos3_fu_844_p3 > end_pos3_fu_851_p2) ? 1'b1 : 1'b0);

assign tmp_72_fu_863_p1 = start_pos3_fu_844_p3;

assign tmp_73_fu_867_p1 = end_pos3_fu_851_p2;

integer ap_tvar_int_3;

always @ (buffer_q0) begin
    for (ap_tvar_int_3 = 64 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 63 - 0) begin
            tmp_74_fu_871_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_74_fu_871_p4[ap_tvar_int_3] = buffer_q0[63 - ap_tvar_int_3];
        end
    end
end

assign tmp_75_fu_881_p2 = (tmp_72_fu_863_p1 - tmp_73_fu_867_p1);

assign tmp_76_fu_887_p2 = (tmp_72_fu_863_p1 ^ 7'd63);

assign tmp_77_fu_893_p2 = (tmp_73_fu_867_p1 - tmp_72_fu_863_p1);

assign tmp_78_fu_899_p3 = ((tmp_71_fu_857_p2[0:0] === 1'b1) ? tmp_75_fu_881_p2 : tmp_77_fu_893_p2);

assign tmp_79_fu_907_p3 = ((tmp_71_fu_857_p2[0:0] === 1'b1) ? tmp_74_fu_871_p4 : buffer_q0);

assign tmp_7_BASE_ADDRESS_l_fu_579_p0 = update_intr;

assign tmp_7_BASE_ADDRESS_l_fu_579_p3 = ((tmp_7_BASE_ADDRESS_l_fu_579_p0[0:0] === 1'b1) ? tmp_8_fu_515_p1 : ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4);

assign tmp_7_base_address_fu_563_p0 = update_intr;

assign tmp_7_base_address_fu_563_p3 = ((tmp_7_base_address_fu_563_p0[0:0] === 1'b1) ? tmp_8_fu_515_p1 : base_address);

assign tmp_7_fu_505_p4 = {{base_address[31:3]}};

assign tmp_80_fu_915_p3 = ((tmp_71_fu_857_p2[0:0] === 1'b1) ? tmp_76_fu_887_p2 : tmp_72_fu_863_p1);

assign tmp_81_fu_923_p2 = (7'd63 - tmp_78_fu_899_p3);

assign tmp_82_fu_929_p1 = tmp_80_fu_915_p3;

assign tmp_83_fu_933_p1 = tmp_81_fu_923_p2;

assign tmp_84_fu_937_p2 = tmp_79_fu_907_p3 >> tmp_82_fu_929_p1;

assign tmp_85_fu_943_p2 = 64'd18446744073709551615 >> tmp_83_fu_933_p1;

assign tmp_86_fu_949_p2 = (tmp_85_fu_943_p2 & tmp_84_fu_937_p2);

assign tmp_87_fu_955_p1 = tmp_86_fu_949_p2[7:0];

assign tmp_8_fu_515_p1 = tmp_7_fu_505_p4;

assign tmp_9_fu_603_p1 = tmp_2_fu_593_p4;

assign tmp_fu_1082_p3 = j1_reg_430[32'd12];

assign tmp_s_fu_587_p0 = inner_index;

assign tmp_s_fu_587_p2 = ($signed(tmp_s_fu_587_p0) * $signed(frame_buffer_offset_s_fu_571_p3));

always @ (posedge ap_clk) begin
    tmp_1_FRAME_BUFFER_N_1_reg_1394[31:8] <= 24'b000000000000000000000000;
end

endmodule //ddr_to_axis_reader_SD
