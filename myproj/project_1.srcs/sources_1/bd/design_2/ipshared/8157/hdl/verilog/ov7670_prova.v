// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ov7670_prova,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=801,HLS_SYN_LUT=1184}" *)

module ov7670_prova (
        ap_clk,
        ap_rst_n,
        m_axi_outStream_grayscale_AWVALID,
        m_axi_outStream_grayscale_AWREADY,
        m_axi_outStream_grayscale_AWADDR,
        m_axi_outStream_grayscale_AWID,
        m_axi_outStream_grayscale_AWLEN,
        m_axi_outStream_grayscale_AWSIZE,
        m_axi_outStream_grayscale_AWBURST,
        m_axi_outStream_grayscale_AWLOCK,
        m_axi_outStream_grayscale_AWCACHE,
        m_axi_outStream_grayscale_AWPROT,
        m_axi_outStream_grayscale_AWQOS,
        m_axi_outStream_grayscale_AWREGION,
        m_axi_outStream_grayscale_AWUSER,
        m_axi_outStream_grayscale_WVALID,
        m_axi_outStream_grayscale_WREADY,
        m_axi_outStream_grayscale_WDATA,
        m_axi_outStream_grayscale_WSTRB,
        m_axi_outStream_grayscale_WLAST,
        m_axi_outStream_grayscale_WID,
        m_axi_outStream_grayscale_WUSER,
        m_axi_outStream_grayscale_ARVALID,
        m_axi_outStream_grayscale_ARREADY,
        m_axi_outStream_grayscale_ARADDR,
        m_axi_outStream_grayscale_ARID,
        m_axi_outStream_grayscale_ARLEN,
        m_axi_outStream_grayscale_ARSIZE,
        m_axi_outStream_grayscale_ARBURST,
        m_axi_outStream_grayscale_ARLOCK,
        m_axi_outStream_grayscale_ARCACHE,
        m_axi_outStream_grayscale_ARPROT,
        m_axi_outStream_grayscale_ARQOS,
        m_axi_outStream_grayscale_ARREGION,
        m_axi_outStream_grayscale_ARUSER,
        m_axi_outStream_grayscale_RVALID,
        m_axi_outStream_grayscale_RREADY,
        m_axi_outStream_grayscale_RDATA,
        m_axi_outStream_grayscale_RLAST,
        m_axi_outStream_grayscale_RID,
        m_axi_outStream_grayscale_RUSER,
        m_axi_outStream_grayscale_RRESP,
        m_axi_outStream_grayscale_BVALID,
        m_axi_outStream_grayscale_BREADY,
        m_axi_outStream_grayscale_BRESP,
        m_axi_outStream_grayscale_BID,
        m_axi_outStream_grayscale_BUSER,
        inStream_V_V_TDATA,
        inStream_V_V_TVALID,
        inStream_V_V_TREADY,
        enable_raw_stream,
        outStream_LUMA_V_V_TDATA,
        outStream_LUMA_V_V_TVALID,
        outStream_LUMA_V_V_TREADY,
        outStream_CHROMA_V_V_TDATA,
        outStream_CHROMA_V_V_TVALID,
        outStream_CHROMA_V_V_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_ID_WIDTH = 1;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_USER_VALUE = 0;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_PROT_VALUE = 0;
parameter    C_M_AXI_OUTSTREAM_GRAYSCALE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTSTREAM_GRAYSCALE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_outStream_grayscale_AWVALID;
input   m_axi_outStream_grayscale_AWREADY;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_ADDR_WIDTH - 1:0] m_axi_outStream_grayscale_AWADDR;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_ID_WIDTH - 1:0] m_axi_outStream_grayscale_AWID;
output  [7:0] m_axi_outStream_grayscale_AWLEN;
output  [2:0] m_axi_outStream_grayscale_AWSIZE;
output  [1:0] m_axi_outStream_grayscale_AWBURST;
output  [1:0] m_axi_outStream_grayscale_AWLOCK;
output  [3:0] m_axi_outStream_grayscale_AWCACHE;
output  [2:0] m_axi_outStream_grayscale_AWPROT;
output  [3:0] m_axi_outStream_grayscale_AWQOS;
output  [3:0] m_axi_outStream_grayscale_AWREGION;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_AWUSER_WIDTH - 1:0] m_axi_outStream_grayscale_AWUSER;
output   m_axi_outStream_grayscale_WVALID;
input   m_axi_outStream_grayscale_WREADY;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_DATA_WIDTH - 1:0] m_axi_outStream_grayscale_WDATA;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_WSTRB_WIDTH - 1:0] m_axi_outStream_grayscale_WSTRB;
output   m_axi_outStream_grayscale_WLAST;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_ID_WIDTH - 1:0] m_axi_outStream_grayscale_WID;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_WUSER_WIDTH - 1:0] m_axi_outStream_grayscale_WUSER;
output   m_axi_outStream_grayscale_ARVALID;
input   m_axi_outStream_grayscale_ARREADY;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_ADDR_WIDTH - 1:0] m_axi_outStream_grayscale_ARADDR;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_ID_WIDTH - 1:0] m_axi_outStream_grayscale_ARID;
output  [7:0] m_axi_outStream_grayscale_ARLEN;
output  [2:0] m_axi_outStream_grayscale_ARSIZE;
output  [1:0] m_axi_outStream_grayscale_ARBURST;
output  [1:0] m_axi_outStream_grayscale_ARLOCK;
output  [3:0] m_axi_outStream_grayscale_ARCACHE;
output  [2:0] m_axi_outStream_grayscale_ARPROT;
output  [3:0] m_axi_outStream_grayscale_ARQOS;
output  [3:0] m_axi_outStream_grayscale_ARREGION;
output  [C_M_AXI_OUTSTREAM_GRAYSCALE_ARUSER_WIDTH - 1:0] m_axi_outStream_grayscale_ARUSER;
input   m_axi_outStream_grayscale_RVALID;
output   m_axi_outStream_grayscale_RREADY;
input  [C_M_AXI_OUTSTREAM_GRAYSCALE_DATA_WIDTH - 1:0] m_axi_outStream_grayscale_RDATA;
input   m_axi_outStream_grayscale_RLAST;
input  [C_M_AXI_OUTSTREAM_GRAYSCALE_ID_WIDTH - 1:0] m_axi_outStream_grayscale_RID;
input  [C_M_AXI_OUTSTREAM_GRAYSCALE_RUSER_WIDTH - 1:0] m_axi_outStream_grayscale_RUSER;
input  [1:0] m_axi_outStream_grayscale_RRESP;
input   m_axi_outStream_grayscale_BVALID;
output   m_axi_outStream_grayscale_BREADY;
input  [1:0] m_axi_outStream_grayscale_BRESP;
input  [C_M_AXI_OUTSTREAM_GRAYSCALE_ID_WIDTH - 1:0] m_axi_outStream_grayscale_BID;
input  [C_M_AXI_OUTSTREAM_GRAYSCALE_BUSER_WIDTH - 1:0] m_axi_outStream_grayscale_BUSER;
input  [7:0] inStream_V_V_TDATA;
input   inStream_V_V_TVALID;
output   inStream_V_V_TREADY;
input   enable_raw_stream;
output  [7:0] outStream_LUMA_V_V_TDATA;
output   outStream_LUMA_V_V_TVALID;
input   outStream_LUMA_V_V_TREADY;
output  [7:0] outStream_CHROMA_V_V_TDATA;
output   outStream_CHROMA_V_V_TVALID;
input   outStream_CHROMA_V_V_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] inStream_V_V_0_data_out;
wire    inStream_V_V_0_vld_in;
wire    inStream_V_V_0_vld_out;
wire    inStream_V_V_0_ack_in;
reg    inStream_V_V_0_ack_out;
reg   [7:0] inStream_V_V_0_payload_A;
reg   [7:0] inStream_V_V_0_payload_B;
reg    inStream_V_V_0_sel_rd;
reg    inStream_V_V_0_sel_wr;
wire    inStream_V_V_0_sel;
wire    inStream_V_V_0_load_A;
wire    inStream_V_V_0_load_B;
reg   [1:0] inStream_V_V_0_state;
wire    inStream_V_V_0_state_cmp_full;
wire   [31:0] outStream_grayscale_V;
reg   [7:0] outStream_LUMA_V_V_1_data_out;
reg    outStream_LUMA_V_V_1_vld_in;
wire    outStream_LUMA_V_V_1_vld_out;
wire    outStream_LUMA_V_V_1_ack_in;
wire    outStream_LUMA_V_V_1_ack_out;
reg   [7:0] outStream_LUMA_V_V_1_payload_A;
reg   [7:0] outStream_LUMA_V_V_1_payload_B;
reg    outStream_LUMA_V_V_1_sel_rd;
reg    outStream_LUMA_V_V_1_sel_wr;
wire    outStream_LUMA_V_V_1_sel;
wire    outStream_LUMA_V_V_1_load_A;
wire    outStream_LUMA_V_V_1_load_B;
reg   [1:0] outStream_LUMA_V_V_1_state;
wire    outStream_LUMA_V_V_1_state_cmp_full;
reg   [7:0] outStream_CHROMA_V_V_1_data_out;
reg    outStream_CHROMA_V_V_1_vld_in;
wire    outStream_CHROMA_V_V_1_vld_out;
wire    outStream_CHROMA_V_V_1_ack_in;
wire    outStream_CHROMA_V_V_1_ack_out;
reg   [7:0] outStream_CHROMA_V_V_1_payload_A;
reg   [7:0] outStream_CHROMA_V_V_1_payload_B;
reg    outStream_CHROMA_V_V_1_sel_rd;
reg    outStream_CHROMA_V_V_1_sel_wr;
wire    outStream_CHROMA_V_V_1_sel;
wire    outStream_CHROMA_V_V_1_load_A;
wire    outStream_CHROMA_V_V_1_load_B;
reg   [1:0] outStream_CHROMA_V_V_1_state;
wire    outStream_CHROMA_V_V_1_state_cmp_full;
reg   [0:0] grayscale_valid;
reg   [31:0] inner_index_V;
reg    outStream_grayscale_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    outStream_grayscale_blk_n_W;
wire    ap_CS_fsm_state5;
reg    outStream_grayscale_blk_n_B;
wire    ap_CS_fsm_state10;
reg    inStream_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    outStream_LUMA_V_V_TDATA_blk_n;
wire   [0:0] enable_raw_stream_re_read_fu_84_p2;
wire    ap_CS_fsm_state11;
reg   [0:0] grayscale_valid_load_reg_205;
reg    outStream_CHROMA_V_V_TDATA_blk_n;
wire   [0:0] grayscale_valid_load_load_fu_124_p1;
wire    ap_CS_fsm_state3;
reg    outStream_grayscale_AWVALID;
wire    outStream_grayscale_AWREADY;
reg    outStream_grayscale_WVALID;
wire    outStream_grayscale_WREADY;
wire    outStream_grayscale_ARREADY;
wire    outStream_grayscale_RVALID;
wire   [7:0] outStream_grayscale_RDATA;
wire    outStream_grayscale_RLAST;
wire   [0:0] outStream_grayscale_RID;
wire   [0:0] outStream_grayscale_RUSER;
wire   [1:0] outStream_grayscale_RRESP;
wire    outStream_grayscale_BVALID;
reg    outStream_grayscale_BREADY;
wire   [1:0] outStream_grayscale_BRESP;
wire   [0:0] outStream_grayscale_BID;
wire   [0:0] outStream_grayscale_BUSER;
reg   [31:0] outStream_grayscale_1_reg_189;
reg    ap_predicate_op36_write_state2;
reg    ap_block_state2_io;
reg   [7:0] tmp_V_reg_198;
reg   [31:0] outStream_grayscale_3_reg_210;
wire  signed [63:0] outStream_grayscale_2_fu_156_p1;
reg    ap_reg_ioackin_outStream_grayscale_AWREADY;
reg    ap_sig_ioackin_outStream_grayscale_AWREADY;
reg    ap_block_state10_io;
reg    ap_reg_ioackin_outStream_grayscale_WREADY;
reg    ap_sig_ioackin_outStream_grayscale_WREADY;
wire   [0:0] tmp_9_fu_178_p2;
reg    ap_block_state11;
reg    ap_predicate_op58_write_state11;
reg    ap_block_state11_io;
wire   [31:0] tmp_6_fu_166_p2;
reg    ap_block_state3_io;
wire   [0:0] tmp_3_fu_132_p2;
wire  signed [31:0] offset_fu_138_p3;
wire  signed [32:0] tmp_5_cast_fu_146_p1;
wire  signed [32:0] tmp_cast_fu_121_p1;
wire   [32:0] outStream_grayscale_s_fu_150_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 inStream_V_V_0_sel_rd = 1'b0;
#0 inStream_V_V_0_sel_wr = 1'b0;
#0 inStream_V_V_0_state = 2'd0;
#0 outStream_LUMA_V_V_1_sel_rd = 1'b0;
#0 outStream_LUMA_V_V_1_sel_wr = 1'b0;
#0 outStream_LUMA_V_V_1_state = 2'd0;
#0 outStream_CHROMA_V_V_1_sel_rd = 1'b0;
#0 outStream_CHROMA_V_V_1_sel_wr = 1'b0;
#0 outStream_CHROMA_V_V_1_state = 2'd0;
#0 grayscale_valid = 1'd0;
#0 inner_index_V = 32'd0;
#0 ap_reg_ioackin_outStream_grayscale_AWREADY = 1'b0;
#0 ap_reg_ioackin_outStream_grayscale_WREADY = 1'b0;
end

ov7670_prova_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ov7670_prova_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .outStream_grayscale_V(outStream_grayscale_V)
);

ov7670_prova_outStream_grayscale_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTSTREAM_GRAYSCALE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTSTREAM_GRAYSCALE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTSTREAM_GRAYSCALE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTSTREAM_GRAYSCALE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTSTREAM_GRAYSCALE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTSTREAM_GRAYSCALE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTSTREAM_GRAYSCALE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTSTREAM_GRAYSCALE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTSTREAM_GRAYSCALE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTSTREAM_GRAYSCALE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTSTREAM_GRAYSCALE_CACHE_VALUE ))
ov7670_prova_outStream_grayscale_m_axi_U(
    .AWVALID(m_axi_outStream_grayscale_AWVALID),
    .AWREADY(m_axi_outStream_grayscale_AWREADY),
    .AWADDR(m_axi_outStream_grayscale_AWADDR),
    .AWID(m_axi_outStream_grayscale_AWID),
    .AWLEN(m_axi_outStream_grayscale_AWLEN),
    .AWSIZE(m_axi_outStream_grayscale_AWSIZE),
    .AWBURST(m_axi_outStream_grayscale_AWBURST),
    .AWLOCK(m_axi_outStream_grayscale_AWLOCK),
    .AWCACHE(m_axi_outStream_grayscale_AWCACHE),
    .AWPROT(m_axi_outStream_grayscale_AWPROT),
    .AWQOS(m_axi_outStream_grayscale_AWQOS),
    .AWREGION(m_axi_outStream_grayscale_AWREGION),
    .AWUSER(m_axi_outStream_grayscale_AWUSER),
    .WVALID(m_axi_outStream_grayscale_WVALID),
    .WREADY(m_axi_outStream_grayscale_WREADY),
    .WDATA(m_axi_outStream_grayscale_WDATA),
    .WSTRB(m_axi_outStream_grayscale_WSTRB),
    .WLAST(m_axi_outStream_grayscale_WLAST),
    .WID(m_axi_outStream_grayscale_WID),
    .WUSER(m_axi_outStream_grayscale_WUSER),
    .ARVALID(m_axi_outStream_grayscale_ARVALID),
    .ARREADY(m_axi_outStream_grayscale_ARREADY),
    .ARADDR(m_axi_outStream_grayscale_ARADDR),
    .ARID(m_axi_outStream_grayscale_ARID),
    .ARLEN(m_axi_outStream_grayscale_ARLEN),
    .ARSIZE(m_axi_outStream_grayscale_ARSIZE),
    .ARBURST(m_axi_outStream_grayscale_ARBURST),
    .ARLOCK(m_axi_outStream_grayscale_ARLOCK),
    .ARCACHE(m_axi_outStream_grayscale_ARCACHE),
    .ARPROT(m_axi_outStream_grayscale_ARPROT),
    .ARQOS(m_axi_outStream_grayscale_ARQOS),
    .ARREGION(m_axi_outStream_grayscale_ARREGION),
    .ARUSER(m_axi_outStream_grayscale_ARUSER),
    .RVALID(m_axi_outStream_grayscale_RVALID),
    .RREADY(m_axi_outStream_grayscale_RREADY),
    .RDATA(m_axi_outStream_grayscale_RDATA),
    .RLAST(m_axi_outStream_grayscale_RLAST),
    .RID(m_axi_outStream_grayscale_RID),
    .RUSER(m_axi_outStream_grayscale_RUSER),
    .RRESP(m_axi_outStream_grayscale_RRESP),
    .BVALID(m_axi_outStream_grayscale_BVALID),
    .BREADY(m_axi_outStream_grayscale_BREADY),
    .BRESP(m_axi_outStream_grayscale_BRESP),
    .BID(m_axi_outStream_grayscale_BID),
    .BUSER(m_axi_outStream_grayscale_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(outStream_grayscale_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(outStream_grayscale_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(outStream_grayscale_RDATA),
    .I_RID(outStream_grayscale_RID),
    .I_RUSER(outStream_grayscale_RUSER),
    .I_RRESP(outStream_grayscale_RRESP),
    .I_RLAST(outStream_grayscale_RLAST),
    .I_AWVALID(outStream_grayscale_AWVALID),
    .I_AWREADY(outStream_grayscale_AWREADY),
    .I_AWADDR(outStream_grayscale_3_reg_210),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(outStream_grayscale_WVALID),
    .I_WREADY(outStream_grayscale_WREADY),
    .I_WDATA(tmp_V_reg_198),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(outStream_grayscale_BVALID),
    .I_BREADY(outStream_grayscale_BREADY),
    .I_BRESP(outStream_grayscale_BRESP),
    .I_BID(outStream_grayscale_BID),
    .I_BUSER(outStream_grayscale_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_outStream_grayscale_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_outStream_grayscale_AWREADY == 1'b1)) begin
                ap_reg_ioackin_outStream_grayscale_AWREADY <= 1'b0;
            end else if ((outStream_grayscale_AWREADY == 1'b1)) begin
                ap_reg_ioackin_outStream_grayscale_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_outStream_grayscale_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_outStream_grayscale_WREADY == 1'b1)) begin
                ap_reg_ioackin_outStream_grayscale_WREADY <= 1'b0;
            end else if ((outStream_grayscale_WREADY == 1'b1)) begin
                ap_reg_ioackin_outStream_grayscale_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grayscale_valid <= 1'd0;
    end else begin
        if ((~((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state11_io)) & (1'b1 == ap_CS_fsm_state11))) begin
            grayscale_valid <= tmp_9_fu_178_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_V_0_ack_out == 1'b1) & (inStream_V_V_0_vld_out == 1'b1))) begin
            inStream_V_V_0_sel_rd <= ~inStream_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_V_0_ack_in == 1'b1) & (inStream_V_V_0_vld_in == 1'b1))) begin
            inStream_V_V_0_sel_wr <= ~inStream_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_V_0_vld_in == 1'b0) & (inStream_V_V_0_state == 2'd2)) | ((inStream_V_V_0_vld_in == 1'b0) & (inStream_V_V_0_ack_out == 1'b1) & (inStream_V_V_0_state == 2'd3)))) begin
            inStream_V_V_0_state <= 2'd2;
        end else if ((((inStream_V_V_0_ack_out == 1'b0) & (inStream_V_V_0_state == 2'd1)) | ((inStream_V_V_0_ack_out == 1'b0) & (inStream_V_V_0_vld_in == 1'b1) & (inStream_V_V_0_state == 2'd3)))) begin
            inStream_V_V_0_state <= 2'd1;
        end else if (((~((inStream_V_V_0_vld_in == 1'b0) & (inStream_V_V_0_ack_out == 1'b1)) & ~((inStream_V_V_0_ack_out == 1'b0) & (inStream_V_V_0_vld_in == 1'b1)) & (inStream_V_V_0_state == 2'd3)) | ((inStream_V_V_0_ack_out == 1'b1) & (inStream_V_V_0_state == 2'd1)) | ((inStream_V_V_0_vld_in == 1'b1) & (inStream_V_V_0_state == 2'd2)))) begin
            inStream_V_V_0_state <= 2'd3;
        end else begin
            inStream_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inner_index_V <= 32'd0;
    end else begin
        if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (grayscale_valid_load_load_fu_124_p1 == 1'd1))) begin
            inner_index_V <= tmp_6_fu_166_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_CHROMA_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_CHROMA_V_V_1_ack_out == 1'b1) & (outStream_CHROMA_V_V_1_vld_out == 1'b1))) begin
            outStream_CHROMA_V_V_1_sel_rd <= ~outStream_CHROMA_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_CHROMA_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_CHROMA_V_V_1_ack_in == 1'b1) & (outStream_CHROMA_V_V_1_vld_in == 1'b1))) begin
            outStream_CHROMA_V_V_1_sel_wr <= ~outStream_CHROMA_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_CHROMA_V_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_CHROMA_V_V_1_vld_in == 1'b0) & (outStream_CHROMA_V_V_1_state == 2'd2)) | ((outStream_CHROMA_V_V_1_vld_in == 1'b0) & (outStream_CHROMA_V_V_1_ack_out == 1'b1) & (outStream_CHROMA_V_V_1_state == 2'd3)))) begin
            outStream_CHROMA_V_V_1_state <= 2'd2;
        end else if ((((outStream_CHROMA_V_V_1_ack_out == 1'b0) & (outStream_CHROMA_V_V_1_state == 2'd1)) | ((outStream_CHROMA_V_V_1_ack_out == 1'b0) & (outStream_CHROMA_V_V_1_vld_in == 1'b1) & (outStream_CHROMA_V_V_1_state == 2'd3)))) begin
            outStream_CHROMA_V_V_1_state <= 2'd1;
        end else if (((~((outStream_CHROMA_V_V_1_vld_in == 1'b0) & (outStream_CHROMA_V_V_1_ack_out == 1'b1)) & ~((outStream_CHROMA_V_V_1_ack_out == 1'b0) & (outStream_CHROMA_V_V_1_vld_in == 1'b1)) & (outStream_CHROMA_V_V_1_state == 2'd3)) | ((outStream_CHROMA_V_V_1_ack_out == 1'b1) & (outStream_CHROMA_V_V_1_state == 2'd1)) | ((outStream_CHROMA_V_V_1_vld_in == 1'b1) & (outStream_CHROMA_V_V_1_state == 2'd2)))) begin
            outStream_CHROMA_V_V_1_state <= 2'd3;
        end else begin
            outStream_CHROMA_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_LUMA_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_LUMA_V_V_1_ack_out == 1'b1) & (outStream_LUMA_V_V_1_vld_out == 1'b1))) begin
            outStream_LUMA_V_V_1_sel_rd <= ~outStream_LUMA_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_LUMA_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_LUMA_V_V_1_ack_in == 1'b1) & (outStream_LUMA_V_V_1_vld_in == 1'b1))) begin
            outStream_LUMA_V_V_1_sel_wr <= ~outStream_LUMA_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_LUMA_V_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_LUMA_V_V_1_vld_in == 1'b0) & (outStream_LUMA_V_V_1_state == 2'd2)) | ((outStream_LUMA_V_V_1_vld_in == 1'b0) & (outStream_LUMA_V_V_1_ack_out == 1'b1) & (outStream_LUMA_V_V_1_state == 2'd3)))) begin
            outStream_LUMA_V_V_1_state <= 2'd2;
        end else if ((((outStream_LUMA_V_V_1_ack_out == 1'b0) & (outStream_LUMA_V_V_1_state == 2'd1)) | ((outStream_LUMA_V_V_1_ack_out == 1'b0) & (outStream_LUMA_V_V_1_vld_in == 1'b1) & (outStream_LUMA_V_V_1_state == 2'd3)))) begin
            outStream_LUMA_V_V_1_state <= 2'd1;
        end else if (((~((outStream_LUMA_V_V_1_vld_in == 1'b0) & (outStream_LUMA_V_V_1_ack_out == 1'b1)) & ~((outStream_LUMA_V_V_1_ack_out == 1'b0) & (outStream_LUMA_V_V_1_vld_in == 1'b1)) & (outStream_LUMA_V_V_1_state == 2'd3)) | ((outStream_LUMA_V_V_1_ack_out == 1'b1) & (outStream_LUMA_V_V_1_state == 2'd1)) | ((outStream_LUMA_V_V_1_vld_in == 1'b1) & (outStream_LUMA_V_V_1_state == 2'd2)))) begin
            outStream_LUMA_V_V_1_state <= 2'd3;
        end else begin
            outStream_LUMA_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        grayscale_valid_load_reg_205 <= grayscale_valid;
        tmp_V_reg_198 <= inStream_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_V_0_load_A == 1'b1)) begin
        inStream_V_V_0_payload_A <= inStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_V_0_load_B == 1'b1)) begin
        inStream_V_V_0_payload_B <= inStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_CHROMA_V_V_1_load_A == 1'b1)) begin
        outStream_CHROMA_V_V_1_payload_A <= inStream_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_CHROMA_V_V_1_load_B == 1'b1)) begin
        outStream_CHROMA_V_V_1_payload_B <= inStream_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_LUMA_V_V_1_load_A == 1'b1)) begin
        outStream_LUMA_V_V_1_payload_A <= tmp_V_reg_198;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_LUMA_V_V_1_load_B == 1'b1)) begin
        outStream_LUMA_V_V_1_payload_B <= tmp_V_reg_198;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        outStream_grayscale_1_reg_189 <= outStream_grayscale_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (grayscale_valid_load_load_fu_124_p1 == 1'd1))) begin
        outStream_grayscale_3_reg_210 <= outStream_grayscale_2_fu_156_p1;
    end
end

always @ (*) begin
    if ((~((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state11_io)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state11_io)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_outStream_grayscale_AWREADY == 1'b0)) begin
        ap_sig_ioackin_outStream_grayscale_AWREADY = outStream_grayscale_AWREADY;
    end else begin
        ap_sig_ioackin_outStream_grayscale_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_outStream_grayscale_WREADY == 1'b0)) begin
        ap_sig_ioackin_outStream_grayscale_WREADY = outStream_grayscale_WREADY;
    end else begin
        ap_sig_ioackin_outStream_grayscale_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        inStream_V_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_V_0_sel == 1'b1)) begin
        inStream_V_V_0_data_out = inStream_V_V_0_payload_B;
    end else begin
        inStream_V_V_0_data_out = inStream_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_V_TDATA_blk_n = inStream_V_V_0_state[1'd0];
    end else begin
        inStream_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_CHROMA_V_V_1_sel == 1'b1)) begin
        outStream_CHROMA_V_V_1_data_out = outStream_CHROMA_V_V_1_payload_B;
    end else begin
        outStream_CHROMA_V_V_1_data_out = outStream_CHROMA_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (ap_predicate_op36_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        outStream_CHROMA_V_V_1_vld_in = 1'b1;
    end else begin
        outStream_CHROMA_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (enable_raw_stream_re_read_fu_84_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (enable_raw_stream_re_read_fu_84_p2 == 1'd1) & (grayscale_valid == 1'd0)))) begin
        outStream_CHROMA_V_V_TDATA_blk_n = outStream_CHROMA_V_V_1_state[1'd1];
    end else begin
        outStream_CHROMA_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_LUMA_V_V_1_sel == 1'b1)) begin
        outStream_LUMA_V_V_1_data_out = outStream_LUMA_V_V_1_payload_B;
    end else begin
        outStream_LUMA_V_V_1_data_out = outStream_LUMA_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((outStream_grayscale_BVALID == 1'b0) | (1'b1 == ap_block_state10_io)) & (1'b1 == ap_CS_fsm_state10) & (enable_raw_stream_re_read_fu_84_p2 == 1'd1))) begin
        outStream_LUMA_V_V_1_vld_in = 1'b1;
    end else begin
        outStream_LUMA_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (grayscale_valid_load_reg_205 == 1'd1) & (enable_raw_stream_re_read_fu_84_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state10) & (enable_raw_stream_re_read_fu_84_p2 == 1'd1)))) begin
        outStream_LUMA_V_V_TDATA_blk_n = outStream_LUMA_V_V_1_state[1'd1];
    end else begin
        outStream_LUMA_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_outStream_grayscale_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        outStream_grayscale_AWVALID = 1'b1;
    end else begin
        outStream_grayscale_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_grayscale_BVALID == 1'b0) | (1'b1 == ap_block_state10_io)) & (1'b1 == ap_CS_fsm_state10))) begin
        outStream_grayscale_BREADY = 1'b1;
    end else begin
        outStream_grayscale_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_outStream_grayscale_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        outStream_grayscale_WVALID = 1'b1;
    end else begin
        outStream_grayscale_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outStream_grayscale_blk_n_AW = m_axi_outStream_grayscale_AWREADY;
    end else begin
        outStream_grayscale_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        outStream_grayscale_blk_n_B = m_axi_outStream_grayscale_BVALID;
    end else begin
        outStream_grayscale_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        outStream_grayscale_blk_n_W = m_axi_outStream_grayscale_WREADY;
    end else begin
        outStream_grayscale_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (grayscale_valid == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (grayscale_valid_load_load_fu_124_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_outStream_grayscale_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_outStream_grayscale_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((outStream_grayscale_BVALID == 1'b0) | (1'b1 == ap_block_state10_io)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state11_io)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state10_io = ((outStream_LUMA_V_V_1_ack_in == 1'b0) & (enable_raw_stream_re_read_fu_84_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state11 = ((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state11_io = ((outStream_LUMA_V_V_1_ack_in == 1'b0) & (ap_predicate_op58_write_state11 == 1'b1));
end

always @ (*) begin
    ap_block_state2_io = ((outStream_CHROMA_V_V_1_ack_in == 1'b0) & (ap_predicate_op36_write_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = ((outStream_CHROMA_V_V_1_ack_in == 1'b0) & (enable_raw_stream_re_read_fu_84_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op36_write_state2 = ((enable_raw_stream_re_read_fu_84_p2 == 1'd1) & (grayscale_valid == 1'd0));
end

always @ (*) begin
    ap_predicate_op58_write_state11 = ((grayscale_valid_load_reg_205 == 1'd1) & (enable_raw_stream_re_read_fu_84_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign enable_raw_stream_re_read_fu_84_p2 = enable_raw_stream;

assign grayscale_valid_load_load_fu_124_p1 = grayscale_valid;

assign inStream_V_V_0_ack_in = inStream_V_V_0_state[1'd1];

assign inStream_V_V_0_load_A = (inStream_V_V_0_state_cmp_full & ~inStream_V_V_0_sel_wr);

assign inStream_V_V_0_load_B = (inStream_V_V_0_state_cmp_full & inStream_V_V_0_sel_wr);

assign inStream_V_V_0_sel = inStream_V_V_0_sel_rd;

assign inStream_V_V_0_state_cmp_full = ((inStream_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_V_0_vld_in = inStream_V_V_TVALID;

assign inStream_V_V_0_vld_out = inStream_V_V_0_state[1'd0];

assign inStream_V_V_TREADY = inStream_V_V_0_state[1'd1];

assign offset_fu_138_p3 = ((tmp_3_fu_132_p2[0:0] === 1'b1) ? 32'd0 : inner_index_V);

assign outStream_CHROMA_V_V_1_ack_in = outStream_CHROMA_V_V_1_state[1'd1];

assign outStream_CHROMA_V_V_1_ack_out = outStream_CHROMA_V_V_TREADY;

assign outStream_CHROMA_V_V_1_load_A = (outStream_CHROMA_V_V_1_state_cmp_full & ~outStream_CHROMA_V_V_1_sel_wr);

assign outStream_CHROMA_V_V_1_load_B = (outStream_CHROMA_V_V_1_state_cmp_full & outStream_CHROMA_V_V_1_sel_wr);

assign outStream_CHROMA_V_V_1_sel = outStream_CHROMA_V_V_1_sel_rd;

assign outStream_CHROMA_V_V_1_state_cmp_full = ((outStream_CHROMA_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_CHROMA_V_V_1_vld_out = outStream_CHROMA_V_V_1_state[1'd0];

assign outStream_CHROMA_V_V_TDATA = outStream_CHROMA_V_V_1_data_out;

assign outStream_CHROMA_V_V_TVALID = outStream_CHROMA_V_V_1_state[1'd0];

assign outStream_LUMA_V_V_1_ack_in = outStream_LUMA_V_V_1_state[1'd1];

assign outStream_LUMA_V_V_1_ack_out = outStream_LUMA_V_V_TREADY;

assign outStream_LUMA_V_V_1_load_A = (outStream_LUMA_V_V_1_state_cmp_full & ~outStream_LUMA_V_V_1_sel_wr);

assign outStream_LUMA_V_V_1_load_B = (outStream_LUMA_V_V_1_state_cmp_full & outStream_LUMA_V_V_1_sel_wr);

assign outStream_LUMA_V_V_1_sel = outStream_LUMA_V_V_1_sel_rd;

assign outStream_LUMA_V_V_1_state_cmp_full = ((outStream_LUMA_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_LUMA_V_V_1_vld_out = outStream_LUMA_V_V_1_state[1'd0];

assign outStream_LUMA_V_V_TDATA = outStream_LUMA_V_V_1_data_out;

assign outStream_LUMA_V_V_TVALID = outStream_LUMA_V_V_1_state[1'd0];

assign outStream_grayscale_2_fu_156_p1 = $signed(outStream_grayscale_s_fu_150_p2);

assign outStream_grayscale_s_fu_150_p2 = ($signed(tmp_5_cast_fu_146_p1) + $signed(tmp_cast_fu_121_p1));

assign tmp_3_fu_132_p2 = ((inner_index_V == 32'd307200) ? 1'b1 : 1'b0);

assign tmp_5_cast_fu_146_p1 = offset_fu_138_p3;

assign tmp_6_fu_166_p2 = ($signed(offset_fu_138_p3) + $signed(32'd1));

assign tmp_9_fu_178_p2 = (grayscale_valid_load_reg_205 ^ 1'd1);

assign tmp_cast_fu_121_p1 = $signed(outStream_grayscale_1_reg_189);

endmodule //ov7670_prova
