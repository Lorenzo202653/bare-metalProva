// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axi_write_prova.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axi_write_prova::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axi_write_prova::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> axi_write_prova::ap_ST_fsm_state1 = "1";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state2 = "10";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state3 = "100";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state4 = "1000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state5 = "10000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state6 = "100000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_pp0_stage0 = "1000000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state12 = "10000000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_pp1_stage0 = "100000000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state16 = "1000000000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state17 = "10000000000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state18 = "100000000000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state19 = "1000000000000000";
const sc_lv<17> axi_write_prova::ap_ST_fsm_state20 = "10000000000000000";
const sc_lv<32> axi_write_prova::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool axi_write_prova::ap_const_boolean_1 = true;
const sc_lv<1> axi_write_prova::ap_const_lv1_0 = "0";
const sc_lv<1> axi_write_prova::ap_const_lv1_1 = "1";
const sc_lv<2> axi_write_prova::ap_const_lv2_0 = "00";
const sc_lv<2> axi_write_prova::ap_const_lv2_2 = "10";
const sc_lv<2> axi_write_prova::ap_const_lv2_3 = "11";
const sc_lv<2> axi_write_prova::ap_const_lv2_1 = "1";
const sc_lv<8> axi_write_prova::ap_const_lv8_0 = "00000000";
const sc_lv<32> axi_write_prova::ap_const_lv32_1 = "1";
const sc_lv<32> axi_write_prova::ap_const_lv32_2 = "10";
const sc_lv<32> axi_write_prova::ap_const_lv32_7 = "111";
const sc_lv<32> axi_write_prova::ap_const_lv32_9 = "1001";
const bool axi_write_prova::ap_const_boolean_0 = false;
const sc_lv<32> axi_write_prova::ap_const_lv32_A = "1010";
const sc_lv<32> axi_write_prova::ap_const_lv32_10 = "10000";
const int axi_write_prova::C_S_AXI_DATA_WIDTH = "100000";
const int axi_write_prova::C_M_AXI_FRAME_INDEX_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axi_write_prova::C_M_AXI_FRAME_INDEX_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axi_write_prova::C_M_AXI_FRAME_INDEX_CACHE_VALUE = "11";
const int axi_write_prova::C_M_AXI_DATA_WIDTH = "100000";
const int axi_write_prova::C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int axi_write_prova::C_M_AXI_BASE_DDR_ADDR_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axi_write_prova::C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axi_write_prova::C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = "11";
const sc_lv<32> axi_write_prova::ap_const_lv32_8 = "1000";
const sc_lv<32> axi_write_prova::ap_const_lv32_B = "1011";
const sc_lv<32> axi_write_prova::ap_const_lv32_C = "1100";
const sc_lv<13> axi_write_prova::ap_const_lv13_0 = "0000000000000";
const sc_lv<10> axi_write_prova::ap_const_lv10_0 = "0000000000";
const sc_lv<64> axi_write_prova::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> axi_write_prova::ap_const_lv4_0 = "0000";
const sc_lv<3> axi_write_prova::ap_const_lv3_0 = "000";
const sc_lv<32> axi_write_prova::ap_const_lv32_200 = "1000000000";
const sc_lv<8> axi_write_prova::ap_const_lv8_FF = "11111111";
const sc_lv<32> axi_write_prova::ap_const_lv32_3 = "11";
const sc_lv<32> axi_write_prova::ap_const_lv32_1F = "11111";
const sc_lv<32> axi_write_prova::ap_const_lv32_22 = "100010";
const sc_lv<9> axi_write_prova::ap_const_lv9_1FF = "111111111";
const sc_lv<8> axi_write_prova::ap_const_lv8_1 = "1";
const sc_lv<13> axi_write_prova::ap_const_lv13_1000 = "1000000000000";
const sc_lv<13> axi_write_prova::ap_const_lv13_1 = "1";
const sc_lv<10> axi_write_prova::ap_const_lv10_1 = "1";
const sc_lv<4> axi_write_prova::ap_const_lv4_8 = "1000";
const sc_lv<4> axi_write_prova::ap_const_lv4_1 = "1";
const sc_lv<32> axi_write_prova::ap_const_lv32_3F = "111111";
const sc_lv<56> axi_write_prova::ap_const_lv56_0 = "00000000000000000000000000000000000000000000000000000000";
const sc_lv<10> axi_write_prova::ap_const_lv10_200 = "1000000000";

axi_write_prova::axi_write_prova(sc_module_name name) : sc_module(name), mVcdFile(0) {
    axi_write_prova_AXILiteS_s_axi_U = new axi_write_prova_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("axi_write_prova_AXILiteS_s_axi_U");
    axi_write_prova_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    axi_write_prova_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    axi_write_prova_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    axi_write_prova_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    axi_write_prova_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    axi_write_prova_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    axi_write_prova_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    axi_write_prova_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    axi_write_prova_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    axi_write_prova_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    axi_write_prova_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    axi_write_prova_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    axi_write_prova_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    axi_write_prova_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    axi_write_prova_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    axi_write_prova_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    axi_write_prova_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    axi_write_prova_AXILiteS_s_axi_U->ACLK(ap_clk);
    axi_write_prova_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    axi_write_prova_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    axi_write_prova_AXILiteS_s_axi_U->ap_start(ap_start);
    axi_write_prova_AXILiteS_s_axi_U->interrupt(interrupt);
    axi_write_prova_AXILiteS_s_axi_U->ap_ready(ap_ready);
    axi_write_prova_AXILiteS_s_axi_U->ap_done(ap_done);
    axi_write_prova_AXILiteS_s_axi_U->ap_idle(ap_idle);
    axi_write_prova_AXILiteS_s_axi_U->frame_index_V(frame_index_V);
    axi_write_prova_AXILiteS_s_axi_U->base_address(base_address);
    axi_write_prova_AXILiteS_s_axi_U->frame_buffer_dim(frame_buffer_dim);
    axi_write_prova_AXILiteS_s_axi_U->frame_buffer_offset(frame_buffer_offset);
    axi_write_prova_AXILiteS_s_axi_U->frame_buffer_number(frame_buffer_number);
    axi_write_prova_AXILiteS_s_axi_U->update_intr(update_intr);
    axi_write_prova_frame_index_m_axi_U = new axi_write_prova_frame_index_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_FRAME_INDEX_ID_WIDTH,C_M_AXI_FRAME_INDEX_ADDR_WIDTH,C_M_AXI_FRAME_INDEX_DATA_WIDTH,C_M_AXI_FRAME_INDEX_AWUSER_WIDTH,C_M_AXI_FRAME_INDEX_ARUSER_WIDTH,C_M_AXI_FRAME_INDEX_WUSER_WIDTH,C_M_AXI_FRAME_INDEX_RUSER_WIDTH,C_M_AXI_FRAME_INDEX_BUSER_WIDTH,C_M_AXI_FRAME_INDEX_USER_VALUE,C_M_AXI_FRAME_INDEX_PROT_VALUE,C_M_AXI_FRAME_INDEX_CACHE_VALUE>("axi_write_prova_frame_index_m_axi_U");
    axi_write_prova_frame_index_m_axi_U->AWVALID(m_axi_frame_index_AWVALID);
    axi_write_prova_frame_index_m_axi_U->AWREADY(m_axi_frame_index_AWREADY);
    axi_write_prova_frame_index_m_axi_U->AWADDR(m_axi_frame_index_AWADDR);
    axi_write_prova_frame_index_m_axi_U->AWID(m_axi_frame_index_AWID);
    axi_write_prova_frame_index_m_axi_U->AWLEN(m_axi_frame_index_AWLEN);
    axi_write_prova_frame_index_m_axi_U->AWSIZE(m_axi_frame_index_AWSIZE);
    axi_write_prova_frame_index_m_axi_U->AWBURST(m_axi_frame_index_AWBURST);
    axi_write_prova_frame_index_m_axi_U->AWLOCK(m_axi_frame_index_AWLOCK);
    axi_write_prova_frame_index_m_axi_U->AWCACHE(m_axi_frame_index_AWCACHE);
    axi_write_prova_frame_index_m_axi_U->AWPROT(m_axi_frame_index_AWPROT);
    axi_write_prova_frame_index_m_axi_U->AWQOS(m_axi_frame_index_AWQOS);
    axi_write_prova_frame_index_m_axi_U->AWREGION(m_axi_frame_index_AWREGION);
    axi_write_prova_frame_index_m_axi_U->AWUSER(m_axi_frame_index_AWUSER);
    axi_write_prova_frame_index_m_axi_U->WVALID(m_axi_frame_index_WVALID);
    axi_write_prova_frame_index_m_axi_U->WREADY(m_axi_frame_index_WREADY);
    axi_write_prova_frame_index_m_axi_U->WDATA(m_axi_frame_index_WDATA);
    axi_write_prova_frame_index_m_axi_U->WSTRB(m_axi_frame_index_WSTRB);
    axi_write_prova_frame_index_m_axi_U->WLAST(m_axi_frame_index_WLAST);
    axi_write_prova_frame_index_m_axi_U->WID(m_axi_frame_index_WID);
    axi_write_prova_frame_index_m_axi_U->WUSER(m_axi_frame_index_WUSER);
    axi_write_prova_frame_index_m_axi_U->ARVALID(m_axi_frame_index_ARVALID);
    axi_write_prova_frame_index_m_axi_U->ARREADY(m_axi_frame_index_ARREADY);
    axi_write_prova_frame_index_m_axi_U->ARADDR(m_axi_frame_index_ARADDR);
    axi_write_prova_frame_index_m_axi_U->ARID(m_axi_frame_index_ARID);
    axi_write_prova_frame_index_m_axi_U->ARLEN(m_axi_frame_index_ARLEN);
    axi_write_prova_frame_index_m_axi_U->ARSIZE(m_axi_frame_index_ARSIZE);
    axi_write_prova_frame_index_m_axi_U->ARBURST(m_axi_frame_index_ARBURST);
    axi_write_prova_frame_index_m_axi_U->ARLOCK(m_axi_frame_index_ARLOCK);
    axi_write_prova_frame_index_m_axi_U->ARCACHE(m_axi_frame_index_ARCACHE);
    axi_write_prova_frame_index_m_axi_U->ARPROT(m_axi_frame_index_ARPROT);
    axi_write_prova_frame_index_m_axi_U->ARQOS(m_axi_frame_index_ARQOS);
    axi_write_prova_frame_index_m_axi_U->ARREGION(m_axi_frame_index_ARREGION);
    axi_write_prova_frame_index_m_axi_U->ARUSER(m_axi_frame_index_ARUSER);
    axi_write_prova_frame_index_m_axi_U->RVALID(m_axi_frame_index_RVALID);
    axi_write_prova_frame_index_m_axi_U->RREADY(m_axi_frame_index_RREADY);
    axi_write_prova_frame_index_m_axi_U->RDATA(m_axi_frame_index_RDATA);
    axi_write_prova_frame_index_m_axi_U->RLAST(m_axi_frame_index_RLAST);
    axi_write_prova_frame_index_m_axi_U->RID(m_axi_frame_index_RID);
    axi_write_prova_frame_index_m_axi_U->RUSER(m_axi_frame_index_RUSER);
    axi_write_prova_frame_index_m_axi_U->RRESP(m_axi_frame_index_RRESP);
    axi_write_prova_frame_index_m_axi_U->BVALID(m_axi_frame_index_BVALID);
    axi_write_prova_frame_index_m_axi_U->BREADY(m_axi_frame_index_BREADY);
    axi_write_prova_frame_index_m_axi_U->BRESP(m_axi_frame_index_BRESP);
    axi_write_prova_frame_index_m_axi_U->BID(m_axi_frame_index_BID);
    axi_write_prova_frame_index_m_axi_U->BUSER(m_axi_frame_index_BUSER);
    axi_write_prova_frame_index_m_axi_U->ACLK(ap_clk);
    axi_write_prova_frame_index_m_axi_U->ARESET(ap_rst_n_inv);
    axi_write_prova_frame_index_m_axi_U->ACLK_EN(ap_var_for_const0);
    axi_write_prova_frame_index_m_axi_U->I_ARVALID(ap_var_for_const1);
    axi_write_prova_frame_index_m_axi_U->I_ARREADY(frame_index_ARREADY);
    axi_write_prova_frame_index_m_axi_U->I_ARADDR(ap_var_for_const2);
    axi_write_prova_frame_index_m_axi_U->I_ARID(ap_var_for_const3);
    axi_write_prova_frame_index_m_axi_U->I_ARLEN(ap_var_for_const2);
    axi_write_prova_frame_index_m_axi_U->I_ARSIZE(ap_var_for_const4);
    axi_write_prova_frame_index_m_axi_U->I_ARLOCK(ap_var_for_const5);
    axi_write_prova_frame_index_m_axi_U->I_ARCACHE(ap_var_for_const6);
    axi_write_prova_frame_index_m_axi_U->I_ARQOS(ap_var_for_const6);
    axi_write_prova_frame_index_m_axi_U->I_ARPROT(ap_var_for_const4);
    axi_write_prova_frame_index_m_axi_U->I_ARUSER(ap_var_for_const3);
    axi_write_prova_frame_index_m_axi_U->I_ARBURST(ap_var_for_const5);
    axi_write_prova_frame_index_m_axi_U->I_ARREGION(ap_var_for_const6);
    axi_write_prova_frame_index_m_axi_U->I_RVALID(frame_index_RVALID);
    axi_write_prova_frame_index_m_axi_U->I_RREADY(ap_var_for_const1);
    axi_write_prova_frame_index_m_axi_U->I_RDATA(frame_index_RDATA);
    axi_write_prova_frame_index_m_axi_U->I_RID(frame_index_RID);
    axi_write_prova_frame_index_m_axi_U->I_RUSER(frame_index_RUSER);
    axi_write_prova_frame_index_m_axi_U->I_RRESP(frame_index_RRESP);
    axi_write_prova_frame_index_m_axi_U->I_RLAST(frame_index_RLAST);
    axi_write_prova_frame_index_m_axi_U->I_AWVALID(frame_index_AWVALID);
    axi_write_prova_frame_index_m_axi_U->I_AWREADY(frame_index_AWREADY);
    axi_write_prova_frame_index_m_axi_U->I_AWADDR(frame_index_addr_reg_695);
    axi_write_prova_frame_index_m_axi_U->I_AWID(ap_var_for_const3);
    axi_write_prova_frame_index_m_axi_U->I_AWLEN(ap_var_for_const7);
    axi_write_prova_frame_index_m_axi_U->I_AWSIZE(ap_var_for_const4);
    axi_write_prova_frame_index_m_axi_U->I_AWLOCK(ap_var_for_const5);
    axi_write_prova_frame_index_m_axi_U->I_AWCACHE(ap_var_for_const6);
    axi_write_prova_frame_index_m_axi_U->I_AWQOS(ap_var_for_const6);
    axi_write_prova_frame_index_m_axi_U->I_AWPROT(ap_var_for_const4);
    axi_write_prova_frame_index_m_axi_U->I_AWUSER(ap_var_for_const3);
    axi_write_prova_frame_index_m_axi_U->I_AWBURST(ap_var_for_const5);
    axi_write_prova_frame_index_m_axi_U->I_AWREGION(ap_var_for_const6);
    axi_write_prova_frame_index_m_axi_U->I_WVALID(frame_index_WVALID);
    axi_write_prova_frame_index_m_axi_U->I_WREADY(frame_index_WREADY);
    axi_write_prova_frame_index_m_axi_U->I_WDATA(inner_index_V);
    axi_write_prova_frame_index_m_axi_U->I_WID(ap_var_for_const3);
    axi_write_prova_frame_index_m_axi_U->I_WUSER(ap_var_for_const3);
    axi_write_prova_frame_index_m_axi_U->I_WLAST(ap_var_for_const1);
    axi_write_prova_frame_index_m_axi_U->I_WSTRB(ap_var_for_const8);
    axi_write_prova_frame_index_m_axi_U->I_BVALID(frame_index_BVALID);
    axi_write_prova_frame_index_m_axi_U->I_BREADY(frame_index_BREADY);
    axi_write_prova_frame_index_m_axi_U->I_BRESP(frame_index_BRESP);
    axi_write_prova_frame_index_m_axi_U->I_BID(frame_index_BID);
    axi_write_prova_frame_index_m_axi_U->I_BUSER(frame_index_BUSER);
    axi_write_prova_base_ddr_addr_m_axi_U = new axi_write_prova_base_ddr_addr_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,C_M_AXI_BASE_DDR_ADDR_USER_VALUE,C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE>("axi_write_prova_base_ddr_addr_m_axi_U");
    axi_write_prova_base_ddr_addr_m_axi_U->AWVALID(m_axi_base_ddr_addr_AWVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->AWREADY(m_axi_base_ddr_addr_AWREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->AWADDR(m_axi_base_ddr_addr_AWADDR);
    axi_write_prova_base_ddr_addr_m_axi_U->AWID(m_axi_base_ddr_addr_AWID);
    axi_write_prova_base_ddr_addr_m_axi_U->AWLEN(m_axi_base_ddr_addr_AWLEN);
    axi_write_prova_base_ddr_addr_m_axi_U->AWSIZE(m_axi_base_ddr_addr_AWSIZE);
    axi_write_prova_base_ddr_addr_m_axi_U->AWBURST(m_axi_base_ddr_addr_AWBURST);
    axi_write_prova_base_ddr_addr_m_axi_U->AWLOCK(m_axi_base_ddr_addr_AWLOCK);
    axi_write_prova_base_ddr_addr_m_axi_U->AWCACHE(m_axi_base_ddr_addr_AWCACHE);
    axi_write_prova_base_ddr_addr_m_axi_U->AWPROT(m_axi_base_ddr_addr_AWPROT);
    axi_write_prova_base_ddr_addr_m_axi_U->AWQOS(m_axi_base_ddr_addr_AWQOS);
    axi_write_prova_base_ddr_addr_m_axi_U->AWREGION(m_axi_base_ddr_addr_AWREGION);
    axi_write_prova_base_ddr_addr_m_axi_U->AWUSER(m_axi_base_ddr_addr_AWUSER);
    axi_write_prova_base_ddr_addr_m_axi_U->WVALID(m_axi_base_ddr_addr_WVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->WREADY(m_axi_base_ddr_addr_WREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->WDATA(m_axi_base_ddr_addr_WDATA);
    axi_write_prova_base_ddr_addr_m_axi_U->WSTRB(m_axi_base_ddr_addr_WSTRB);
    axi_write_prova_base_ddr_addr_m_axi_U->WLAST(m_axi_base_ddr_addr_WLAST);
    axi_write_prova_base_ddr_addr_m_axi_U->WID(m_axi_base_ddr_addr_WID);
    axi_write_prova_base_ddr_addr_m_axi_U->WUSER(m_axi_base_ddr_addr_WUSER);
    axi_write_prova_base_ddr_addr_m_axi_U->ARVALID(m_axi_base_ddr_addr_ARVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->ARREADY(m_axi_base_ddr_addr_ARREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->ARADDR(m_axi_base_ddr_addr_ARADDR);
    axi_write_prova_base_ddr_addr_m_axi_U->ARID(m_axi_base_ddr_addr_ARID);
    axi_write_prova_base_ddr_addr_m_axi_U->ARLEN(m_axi_base_ddr_addr_ARLEN);
    axi_write_prova_base_ddr_addr_m_axi_U->ARSIZE(m_axi_base_ddr_addr_ARSIZE);
    axi_write_prova_base_ddr_addr_m_axi_U->ARBURST(m_axi_base_ddr_addr_ARBURST);
    axi_write_prova_base_ddr_addr_m_axi_U->ARLOCK(m_axi_base_ddr_addr_ARLOCK);
    axi_write_prova_base_ddr_addr_m_axi_U->ARCACHE(m_axi_base_ddr_addr_ARCACHE);
    axi_write_prova_base_ddr_addr_m_axi_U->ARPROT(m_axi_base_ddr_addr_ARPROT);
    axi_write_prova_base_ddr_addr_m_axi_U->ARQOS(m_axi_base_ddr_addr_ARQOS);
    axi_write_prova_base_ddr_addr_m_axi_U->ARREGION(m_axi_base_ddr_addr_ARREGION);
    axi_write_prova_base_ddr_addr_m_axi_U->ARUSER(m_axi_base_ddr_addr_ARUSER);
    axi_write_prova_base_ddr_addr_m_axi_U->RVALID(m_axi_base_ddr_addr_RVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->RREADY(m_axi_base_ddr_addr_RREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->RDATA(m_axi_base_ddr_addr_RDATA);
    axi_write_prova_base_ddr_addr_m_axi_U->RLAST(m_axi_base_ddr_addr_RLAST);
    axi_write_prova_base_ddr_addr_m_axi_U->RID(m_axi_base_ddr_addr_RID);
    axi_write_prova_base_ddr_addr_m_axi_U->RUSER(m_axi_base_ddr_addr_RUSER);
    axi_write_prova_base_ddr_addr_m_axi_U->RRESP(m_axi_base_ddr_addr_RRESP);
    axi_write_prova_base_ddr_addr_m_axi_U->BVALID(m_axi_base_ddr_addr_BVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->BREADY(m_axi_base_ddr_addr_BREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->BRESP(m_axi_base_ddr_addr_BRESP);
    axi_write_prova_base_ddr_addr_m_axi_U->BID(m_axi_base_ddr_addr_BID);
    axi_write_prova_base_ddr_addr_m_axi_U->BUSER(m_axi_base_ddr_addr_BUSER);
    axi_write_prova_base_ddr_addr_m_axi_U->ACLK(ap_clk);
    axi_write_prova_base_ddr_addr_m_axi_U->ARESET(ap_rst_n_inv);
    axi_write_prova_base_ddr_addr_m_axi_U->ACLK_EN(ap_var_for_const0);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARVALID(ap_var_for_const1);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARREADY(base_ddr_addr_ARREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARADDR(ap_var_for_const2);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARID(ap_var_for_const3);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARLEN(ap_var_for_const2);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARSIZE(ap_var_for_const4);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARLOCK(ap_var_for_const5);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARCACHE(ap_var_for_const6);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARQOS(ap_var_for_const6);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARPROT(ap_var_for_const4);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARUSER(ap_var_for_const3);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARBURST(ap_var_for_const5);
    axi_write_prova_base_ddr_addr_m_axi_U->I_ARREGION(ap_var_for_const6);
    axi_write_prova_base_ddr_addr_m_axi_U->I_RVALID(base_ddr_addr_RVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->I_RREADY(ap_var_for_const1);
    axi_write_prova_base_ddr_addr_m_axi_U->I_RDATA(base_ddr_addr_RDATA);
    axi_write_prova_base_ddr_addr_m_axi_U->I_RID(base_ddr_addr_RID);
    axi_write_prova_base_ddr_addr_m_axi_U->I_RUSER(base_ddr_addr_RUSER);
    axi_write_prova_base_ddr_addr_m_axi_U->I_RRESP(base_ddr_addr_RRESP);
    axi_write_prova_base_ddr_addr_m_axi_U->I_RLAST(base_ddr_addr_RLAST);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWVALID(base_ddr_addr_AWVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWREADY(base_ddr_addr_AWREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWADDR(base_ddr_addr_AWADDR);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWID(ap_var_for_const3);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWLEN(ap_var_for_const9);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWSIZE(ap_var_for_const4);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWLOCK(ap_var_for_const5);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWCACHE(ap_var_for_const6);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWQOS(ap_var_for_const6);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWPROT(ap_var_for_const4);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWUSER(ap_var_for_const3);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWBURST(ap_var_for_const5);
    axi_write_prova_base_ddr_addr_m_axi_U->I_AWREGION(ap_var_for_const6);
    axi_write_prova_base_ddr_addr_m_axi_U->I_WVALID(base_ddr_addr_WVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->I_WREADY(base_ddr_addr_WREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->I_WDATA(buffer_load_reg_776);
    axi_write_prova_base_ddr_addr_m_axi_U->I_WID(ap_var_for_const3);
    axi_write_prova_base_ddr_addr_m_axi_U->I_WUSER(ap_var_for_const3);
    axi_write_prova_base_ddr_addr_m_axi_U->I_WLAST(ap_var_for_const1);
    axi_write_prova_base_ddr_addr_m_axi_U->I_WSTRB(ap_var_for_const10);
    axi_write_prova_base_ddr_addr_m_axi_U->I_BVALID(base_ddr_addr_BVALID);
    axi_write_prova_base_ddr_addr_m_axi_U->I_BREADY(base_ddr_addr_BREADY);
    axi_write_prova_base_ddr_addr_m_axi_U->I_BRESP(base_ddr_addr_BRESP);
    axi_write_prova_base_ddr_addr_m_axi_U->I_BID(base_ddr_addr_BID);
    axi_write_prova_base_ddr_addr_m_axi_U->I_BUSER(base_ddr_addr_BUSER);
    buffer_U = new axi_write_prova_bbkb("buffer_U");
    buffer_U->clk(ap_clk);
    buffer_U->reset(ap_rst_n_inv);
    buffer_U->address0(buffer_address0);
    buffer_U->ce0(buffer_ce0);
    buffer_U->q0(buffer_q0);
    buffer_U->address1(buffer_address1);
    buffer_U->ce1(buffer_ce1);
    buffer_U->we1(buffer_we1);
    buffer_U->d1(buffer_d1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( inputStream_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_722 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( inputStream_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_722 );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter1);
    sensitive << ( inputStream_V_0_vld_out );
    sensitive << ( exitcond_flatten_reg_722 );

    SC_METHOD(thread_ap_block_state13_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state14_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state15_io);
    sensitive << ( exitcond_reg_762_pp1_iter1_reg );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_WREADY );

    SC_METHOD(thread_ap_block_state15_pp1_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state10);
    sensitive << ( exitcond_flatten_fu_555_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state13);
    sensitive << ( exitcond_fu_647_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( tmp_1_fu_484_p2 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_op_assign_1_phi_fu_294_p4);
    sensitive << ( BASE_ADDRESS_r );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( update_intr_read_reg_670 );
    sensitive << ( base_address_read_reg_690 );

    SC_METHOD(thread_ap_phi_mux_i_op_assign_phi_fu_285_p4);
    sensitive << ( FRAME_OFFSET );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( update_intr_read_reg_670 );
    sensitive << ( frame_buffer_offset_s_reg_679 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_359_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_722 );
    sensitive << ( i_reg_355 );
    sensitive << ( i_1_reg_742 );

    SC_METHOD(thread_ap_phi_mux_j_phi_fu_336_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_722 );
    sensitive << ( j_reg_332 );
    sensitive << ( j_mid2_reg_736 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_1_fu_484_p2 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_base_ddr_addr_AWREADY);
    sensitive << ( base_ddr_addr_AWREADY );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_base_ddr_addr_WREADY);
    sensitive << ( base_ddr_addr_WREADY );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_WREADY );

    SC_METHOD(thread_ap_sig_ioackin_frame_index_AWREADY);
    sensitive << ( frame_index_AWREADY );
    sensitive << ( ap_reg_ioackin_frame_index_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_frame_index_WREADY);
    sensitive << ( frame_index_WREADY );
    sensitive << ( ap_reg_ioackin_frame_index_WREADY );

    SC_METHOD(thread_base_ddr_addr_AWADDR);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_9_fu_636_p1 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_base_ddr_addr_AWVALID);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_base_ddr_addr_BREADY);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( base_ddr_addr_BVALID );

    SC_METHOD(thread_base_ddr_addr_WVALID);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( exitcond_reg_762_pp1_iter1_reg );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_WREADY );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_base_ddr_addr_blk_n_AW);
    sensitive << ( m_axi_base_ddr_addr_AWREADY );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_base_ddr_addr_blk_n_B);
    sensitive << ( m_axi_base_ddr_addr_BVALID );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_base_ddr_addr_blk_n_W);
    sensitive << ( m_axi_base_ddr_addr_WREADY );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond_reg_762_pp1_iter1_reg );

    SC_METHOD(thread_buffer_address0);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( indvar1_fu_659_p1 );

    SC_METHOD(thread_buffer_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_10_fu_632_p1 );

    SC_METHOD(thread_buffer_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_buffer_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_buffer_d1);
    sensitive << ( inputStream_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( temp_1_fu_611_p3 );

    SC_METHOD(thread_buffer_we1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ifzero_fu_627_p2 );

    SC_METHOD(thread_exitcond_flatten_fu_555_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_321 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_fu_647_p2);
    sensitive << ( indvar_reg_366 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_frame_count);
    sensitive << ( frame_count_inner );
    sensitive << ( tmp_1_fu_484_p2 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_frame_index_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_frame_index_AWREADY );

    SC_METHOD(thread_frame_index_BREADY);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( frame_index_BVALID );

    SC_METHOD(thread_frame_index_WVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_frame_index_WREADY );

    SC_METHOD(thread_frame_index_blk_n_AW);
    sensitive << ( m_axi_frame_index_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_frame_index_blk_n_B);
    sensitive << ( m_axi_frame_index_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_frame_index_blk_n_W);
    sensitive << ( m_axi_frame_index_WREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_1_fu_593_p3);
    sensitive << ( tmp_4_fu_573_p2 );
    sensitive << ( i_op_fu_587_p2 );

    SC_METHOD(thread_i_op_assign_1_cast_fu_433_p1);
    sensitive << ( ap_phi_mux_i_op_assign_1_phi_fu_294_p4 );

    SC_METHOD(thread_i_op_fu_587_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_359_p4 );

    SC_METHOD(thread_idx_1_fu_490_p2);
    sensitive << ( idx_reg_310 );

    SC_METHOD(thread_ifzero_fu_627_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_722 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( i_1_reg_742 );

    SC_METHOD(thread_indvar1_fu_659_p1);
    sensitive << ( indvar_reg_366 );

    SC_METHOD(thread_indvar_flatten_next_fu_561_p2);
    sensitive << ( indvar_flatten_reg_321 );

    SC_METHOD(thread_indvar_next_fu_653_p2);
    sensitive << ( indvar_reg_366 );

    SC_METHOD(thread_inputStream_V_0_ack_in);
    sensitive << ( inputStream_V_0_state );

    SC_METHOD(thread_inputStream_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_722 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_inputStream_V_0_data_out);
    sensitive << ( inputStream_V_0_payload_A );
    sensitive << ( inputStream_V_0_payload_B );
    sensitive << ( inputStream_V_0_sel );

    SC_METHOD(thread_inputStream_V_0_load_A);
    sensitive << ( inputStream_V_0_sel_wr );
    sensitive << ( inputStream_V_0_state_cmp_full );

    SC_METHOD(thread_inputStream_V_0_load_B);
    sensitive << ( inputStream_V_0_sel_wr );
    sensitive << ( inputStream_V_0_state_cmp_full );

    SC_METHOD(thread_inputStream_V_0_sel);
    sensitive << ( inputStream_V_0_sel_rd );

    SC_METHOD(thread_inputStream_V_0_state_cmp_full);
    sensitive << ( inputStream_V_0_state );

    SC_METHOD(thread_inputStream_V_0_vld_in);
    sensitive << ( inputStream_V_TVALID );

    SC_METHOD(thread_inputStream_V_0_vld_out);
    sensitive << ( inputStream_V_0_state );

    SC_METHOD(thread_inputStream_V_TDATA_blk_n);
    sensitive << ( inputStream_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_722 );

    SC_METHOD(thread_inputStream_V_TREADY);
    sensitive << ( inputStream_V_0_state );

    SC_METHOD(thread_j_mid2_fu_579_p3);
    sensitive << ( tmp_4_fu_573_p2 );
    sensitive << ( ap_phi_mux_j_phi_fu_336_p4 );
    sensitive << ( j_s_fu_567_p2 );

    SC_METHOD(thread_j_s_fu_567_p2);
    sensitive << ( ap_phi_mux_j_phi_fu_336_p4 );

    SC_METHOD(thread_offset_1_fu_664_p2);
    sensitive << ( offset1_reg_300 );

    SC_METHOD(thread_offset_fu_460_p2);
    sensitive << ( tmp_8_fu_450_p4 );
    sensitive << ( i_op_assign_1_cast_fu_433_p1 );

    SC_METHOD(thread_op2_assign_fu_504_p2);
    sensitive << ( tmp_2_cast_fu_500_p1 );

    SC_METHOD(thread_p_tmp_7_fu_524_p3);
    sensitive << ( tmp_5_fu_513_p2 );
    sensitive << ( tmp_7_fu_519_p2 );

    SC_METHOD(thread_r_V_fu_444_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( r_V_fu_444_p00 );

    SC_METHOD(thread_r_V_fu_444_p00);
    sensitive << ( ap_phi_mux_i_op_assign_phi_fu_285_p4 );

    SC_METHOD(thread_r_V_fu_444_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( r_V_fu_444_p10 );

    SC_METHOD(thread_r_V_fu_444_p10);
    sensitive << ( t_V_reg_701 );

    SC_METHOD(thread_r_V_fu_444_p2);
    sensitive << ( r_V_fu_444_p0 );
    sensitive << ( r_V_fu_444_p1 );

    SC_METHOD(thread_temp_1_fu_611_p3);
    sensitive << ( tmp_4_reg_731 );
    sensitive << ( tmp_12_fu_601_p4 );

    SC_METHOD(thread_temp_2_fu_618_p3);
    sensitive << ( inputStream_V_0_data_out );
    sensitive << ( temp_1_fu_611_p3 );

    SC_METHOD(thread_tmp_10_fu_632_p1);
    sensitive << ( j_mid2_reg_736 );

    SC_METHOD(thread_tmp_12_fu_601_p4);
    sensitive << ( temp_reg_343 );

    SC_METHOD(thread_tmp_1_fu_484_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( idx_reg_310 );
    sensitive << ( tmp_6_fu_480_p1 );

    SC_METHOD(thread_tmp_2_cast_fu_500_p1);
    sensitive << ( FRAME_BUFFER_NUMBER_r );

    SC_METHOD(thread_tmp_2_fu_542_p2);
    sensitive << ( frame_count_inner );

    SC_METHOD(thread_tmp_3_fu_377_p1);
    sensitive << ( frame_index_V );

    SC_METHOD(thread_tmp_4_cast_fu_510_p1);
    sensitive << ( t_V_reg_701 );

    SC_METHOD(thread_tmp_4_fu_573_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( exitcond_flatten_fu_555_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_phi_fu_359_p4 );

    SC_METHOD(thread_tmp_5_fu_513_p2);
    sensitive << ( tmp_1_fu_484_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_4_cast_fu_510_p1 );
    sensitive << ( op2_assign_fu_504_p2 );

    SC_METHOD(thread_tmp_6_fu_480_p1);
    sensitive << ( tmp_s_fu_470_p4 );

    SC_METHOD(thread_tmp_7_fu_519_p2);
    sensitive << ( t_V_reg_701 );

    SC_METHOD(thread_tmp_8_fu_450_p4);
    sensitive << ( r_V_fu_444_p2 );

    SC_METHOD(thread_tmp_9_fu_636_p1);
    sensitive << ( offset1_reg_300 );

    SC_METHOD(thread_tmp_s_fu_470_p4);
    sensitive << ( FRAME_BUFFER_DIM_r );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( frame_index_BVALID );
    sensitive << ( base_ddr_addr_BVALID );
    sensitive << ( ap_sig_ioackin_frame_index_WREADY );
    sensitive << ( tmp_1_fu_484_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_flatten_fu_555_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_AWREADY );
    sensitive << ( exitcond_fu_647_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_sig_ioackin_frame_index_AWREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const9);

    SC_THREAD(thread_ap_var_for_const10);

    ap_CS_fsm = "00000000000000001";
    inputStream_V_0_sel_rd = SC_LOGIC_0;
    inputStream_V_0_sel_wr = SC_LOGIC_0;
    inputStream_V_0_state = "00";
    inner_index_V = "00000000";
    FRAME_OFFSET = "00000000000001001011000000000000";
    BASE_ADDRESS_r = "00000000000000000000000000000";
    FRAME_BUFFER_DIM_r = "00000000000001001011000000000000";
    FRAME_BUFFER_NUMBER_r = "00001000";
    frame_count_inner = "00000000000000000000000000000000";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_reg_ioackin_frame_index_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_frame_index_WREADY = SC_LOGIC_0;
    ap_reg_ioackin_base_ddr_addr_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_base_ddr_addr_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axi_write_prova_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_frame_index_AWVALID, "(port)m_axi_frame_index_AWVALID");
    sc_trace(mVcdFile, m_axi_frame_index_AWREADY, "(port)m_axi_frame_index_AWREADY");
    sc_trace(mVcdFile, m_axi_frame_index_AWADDR, "(port)m_axi_frame_index_AWADDR");
    sc_trace(mVcdFile, m_axi_frame_index_AWID, "(port)m_axi_frame_index_AWID");
    sc_trace(mVcdFile, m_axi_frame_index_AWLEN, "(port)m_axi_frame_index_AWLEN");
    sc_trace(mVcdFile, m_axi_frame_index_AWSIZE, "(port)m_axi_frame_index_AWSIZE");
    sc_trace(mVcdFile, m_axi_frame_index_AWBURST, "(port)m_axi_frame_index_AWBURST");
    sc_trace(mVcdFile, m_axi_frame_index_AWLOCK, "(port)m_axi_frame_index_AWLOCK");
    sc_trace(mVcdFile, m_axi_frame_index_AWCACHE, "(port)m_axi_frame_index_AWCACHE");
    sc_trace(mVcdFile, m_axi_frame_index_AWPROT, "(port)m_axi_frame_index_AWPROT");
    sc_trace(mVcdFile, m_axi_frame_index_AWQOS, "(port)m_axi_frame_index_AWQOS");
    sc_trace(mVcdFile, m_axi_frame_index_AWREGION, "(port)m_axi_frame_index_AWREGION");
    sc_trace(mVcdFile, m_axi_frame_index_AWUSER, "(port)m_axi_frame_index_AWUSER");
    sc_trace(mVcdFile, m_axi_frame_index_WVALID, "(port)m_axi_frame_index_WVALID");
    sc_trace(mVcdFile, m_axi_frame_index_WREADY, "(port)m_axi_frame_index_WREADY");
    sc_trace(mVcdFile, m_axi_frame_index_WDATA, "(port)m_axi_frame_index_WDATA");
    sc_trace(mVcdFile, m_axi_frame_index_WSTRB, "(port)m_axi_frame_index_WSTRB");
    sc_trace(mVcdFile, m_axi_frame_index_WLAST, "(port)m_axi_frame_index_WLAST");
    sc_trace(mVcdFile, m_axi_frame_index_WID, "(port)m_axi_frame_index_WID");
    sc_trace(mVcdFile, m_axi_frame_index_WUSER, "(port)m_axi_frame_index_WUSER");
    sc_trace(mVcdFile, m_axi_frame_index_ARVALID, "(port)m_axi_frame_index_ARVALID");
    sc_trace(mVcdFile, m_axi_frame_index_ARREADY, "(port)m_axi_frame_index_ARREADY");
    sc_trace(mVcdFile, m_axi_frame_index_ARADDR, "(port)m_axi_frame_index_ARADDR");
    sc_trace(mVcdFile, m_axi_frame_index_ARID, "(port)m_axi_frame_index_ARID");
    sc_trace(mVcdFile, m_axi_frame_index_ARLEN, "(port)m_axi_frame_index_ARLEN");
    sc_trace(mVcdFile, m_axi_frame_index_ARSIZE, "(port)m_axi_frame_index_ARSIZE");
    sc_trace(mVcdFile, m_axi_frame_index_ARBURST, "(port)m_axi_frame_index_ARBURST");
    sc_trace(mVcdFile, m_axi_frame_index_ARLOCK, "(port)m_axi_frame_index_ARLOCK");
    sc_trace(mVcdFile, m_axi_frame_index_ARCACHE, "(port)m_axi_frame_index_ARCACHE");
    sc_trace(mVcdFile, m_axi_frame_index_ARPROT, "(port)m_axi_frame_index_ARPROT");
    sc_trace(mVcdFile, m_axi_frame_index_ARQOS, "(port)m_axi_frame_index_ARQOS");
    sc_trace(mVcdFile, m_axi_frame_index_ARREGION, "(port)m_axi_frame_index_ARREGION");
    sc_trace(mVcdFile, m_axi_frame_index_ARUSER, "(port)m_axi_frame_index_ARUSER");
    sc_trace(mVcdFile, m_axi_frame_index_RVALID, "(port)m_axi_frame_index_RVALID");
    sc_trace(mVcdFile, m_axi_frame_index_RREADY, "(port)m_axi_frame_index_RREADY");
    sc_trace(mVcdFile, m_axi_frame_index_RDATA, "(port)m_axi_frame_index_RDATA");
    sc_trace(mVcdFile, m_axi_frame_index_RLAST, "(port)m_axi_frame_index_RLAST");
    sc_trace(mVcdFile, m_axi_frame_index_RID, "(port)m_axi_frame_index_RID");
    sc_trace(mVcdFile, m_axi_frame_index_RUSER, "(port)m_axi_frame_index_RUSER");
    sc_trace(mVcdFile, m_axi_frame_index_RRESP, "(port)m_axi_frame_index_RRESP");
    sc_trace(mVcdFile, m_axi_frame_index_BVALID, "(port)m_axi_frame_index_BVALID");
    sc_trace(mVcdFile, m_axi_frame_index_BREADY, "(port)m_axi_frame_index_BREADY");
    sc_trace(mVcdFile, m_axi_frame_index_BRESP, "(port)m_axi_frame_index_BRESP");
    sc_trace(mVcdFile, m_axi_frame_index_BID, "(port)m_axi_frame_index_BID");
    sc_trace(mVcdFile, m_axi_frame_index_BUSER, "(port)m_axi_frame_index_BUSER");
    sc_trace(mVcdFile, inputStream_V_TDATA, "(port)inputStream_V_TDATA");
    sc_trace(mVcdFile, inputStream_V_TVALID, "(port)inputStream_V_TVALID");
    sc_trace(mVcdFile, inputStream_V_TREADY, "(port)inputStream_V_TREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWVALID, "(port)m_axi_base_ddr_addr_AWVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWREADY, "(port)m_axi_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWADDR, "(port)m_axi_base_ddr_addr_AWADDR");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWID, "(port)m_axi_base_ddr_addr_AWID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWLEN, "(port)m_axi_base_ddr_addr_AWLEN");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWSIZE, "(port)m_axi_base_ddr_addr_AWSIZE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWBURST, "(port)m_axi_base_ddr_addr_AWBURST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWLOCK, "(port)m_axi_base_ddr_addr_AWLOCK");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWCACHE, "(port)m_axi_base_ddr_addr_AWCACHE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWPROT, "(port)m_axi_base_ddr_addr_AWPROT");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWQOS, "(port)m_axi_base_ddr_addr_AWQOS");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWREGION, "(port)m_axi_base_ddr_addr_AWREGION");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWUSER, "(port)m_axi_base_ddr_addr_AWUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WVALID, "(port)m_axi_base_ddr_addr_WVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WREADY, "(port)m_axi_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WDATA, "(port)m_axi_base_ddr_addr_WDATA");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WSTRB, "(port)m_axi_base_ddr_addr_WSTRB");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WLAST, "(port)m_axi_base_ddr_addr_WLAST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WID, "(port)m_axi_base_ddr_addr_WID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WUSER, "(port)m_axi_base_ddr_addr_WUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARVALID, "(port)m_axi_base_ddr_addr_ARVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARREADY, "(port)m_axi_base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARADDR, "(port)m_axi_base_ddr_addr_ARADDR");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARID, "(port)m_axi_base_ddr_addr_ARID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARLEN, "(port)m_axi_base_ddr_addr_ARLEN");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARSIZE, "(port)m_axi_base_ddr_addr_ARSIZE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARBURST, "(port)m_axi_base_ddr_addr_ARBURST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARLOCK, "(port)m_axi_base_ddr_addr_ARLOCK");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARCACHE, "(port)m_axi_base_ddr_addr_ARCACHE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARPROT, "(port)m_axi_base_ddr_addr_ARPROT");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARQOS, "(port)m_axi_base_ddr_addr_ARQOS");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARREGION, "(port)m_axi_base_ddr_addr_ARREGION");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARUSER, "(port)m_axi_base_ddr_addr_ARUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RVALID, "(port)m_axi_base_ddr_addr_RVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RREADY, "(port)m_axi_base_ddr_addr_RREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RDATA, "(port)m_axi_base_ddr_addr_RDATA");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RLAST, "(port)m_axi_base_ddr_addr_RLAST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RID, "(port)m_axi_base_ddr_addr_RID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RUSER, "(port)m_axi_base_ddr_addr_RUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RRESP, "(port)m_axi_base_ddr_addr_RRESP");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BVALID, "(port)m_axi_base_ddr_addr_BVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BREADY, "(port)m_axi_base_ddr_addr_BREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BRESP, "(port)m_axi_base_ddr_addr_BRESP");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BID, "(port)m_axi_base_ddr_addr_BID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BUSER, "(port)m_axi_base_ddr_addr_BUSER");
    sc_trace(mVcdFile, frame_count, "(port)frame_count");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inputStream_V_0_data_out, "inputStream_V_0_data_out");
    sc_trace(mVcdFile, inputStream_V_0_vld_in, "inputStream_V_0_vld_in");
    sc_trace(mVcdFile, inputStream_V_0_vld_out, "inputStream_V_0_vld_out");
    sc_trace(mVcdFile, inputStream_V_0_ack_in, "inputStream_V_0_ack_in");
    sc_trace(mVcdFile, inputStream_V_0_ack_out, "inputStream_V_0_ack_out");
    sc_trace(mVcdFile, inputStream_V_0_payload_A, "inputStream_V_0_payload_A");
    sc_trace(mVcdFile, inputStream_V_0_payload_B, "inputStream_V_0_payload_B");
    sc_trace(mVcdFile, inputStream_V_0_sel_rd, "inputStream_V_0_sel_rd");
    sc_trace(mVcdFile, inputStream_V_0_sel_wr, "inputStream_V_0_sel_wr");
    sc_trace(mVcdFile, inputStream_V_0_sel, "inputStream_V_0_sel");
    sc_trace(mVcdFile, inputStream_V_0_load_A, "inputStream_V_0_load_A");
    sc_trace(mVcdFile, inputStream_V_0_load_B, "inputStream_V_0_load_B");
    sc_trace(mVcdFile, inputStream_V_0_state, "inputStream_V_0_state");
    sc_trace(mVcdFile, inputStream_V_0_state_cmp_full, "inputStream_V_0_state_cmp_full");
    sc_trace(mVcdFile, frame_index_V, "frame_index_V");
    sc_trace(mVcdFile, base_address, "base_address");
    sc_trace(mVcdFile, frame_buffer_dim, "frame_buffer_dim");
    sc_trace(mVcdFile, frame_buffer_offset, "frame_buffer_offset");
    sc_trace(mVcdFile, frame_buffer_number, "frame_buffer_number");
    sc_trace(mVcdFile, update_intr, "update_intr");
    sc_trace(mVcdFile, inner_index_V, "inner_index_V");
    sc_trace(mVcdFile, FRAME_OFFSET, "FRAME_OFFSET");
    sc_trace(mVcdFile, BASE_ADDRESS_r, "BASE_ADDRESS_r");
    sc_trace(mVcdFile, FRAME_BUFFER_DIM_r, "FRAME_BUFFER_DIM_r");
    sc_trace(mVcdFile, FRAME_BUFFER_NUMBER_r, "FRAME_BUFFER_NUMBER_r");
    sc_trace(mVcdFile, frame_count_inner, "frame_count_inner");
    sc_trace(mVcdFile, frame_index_blk_n_AW, "frame_index_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, frame_index_blk_n_W, "frame_index_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, frame_index_blk_n_B, "frame_index_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, inputStream_V_TDATA_blk_n, "inputStream_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_722, "exitcond_flatten_reg_722");
    sc_trace(mVcdFile, base_ddr_addr_blk_n_AW, "base_ddr_addr_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, base_ddr_addr_blk_n_W, "base_ddr_addr_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, exitcond_reg_762, "exitcond_reg_762");
    sc_trace(mVcdFile, exitcond_reg_762_pp1_iter1_reg, "exitcond_reg_762_pp1_iter1_reg");
    sc_trace(mVcdFile, base_ddr_addr_blk_n_B, "base_ddr_addr_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, frame_index_AWVALID, "frame_index_AWVALID");
    sc_trace(mVcdFile, frame_index_AWREADY, "frame_index_AWREADY");
    sc_trace(mVcdFile, frame_index_WVALID, "frame_index_WVALID");
    sc_trace(mVcdFile, frame_index_WREADY, "frame_index_WREADY");
    sc_trace(mVcdFile, frame_index_ARREADY, "frame_index_ARREADY");
    sc_trace(mVcdFile, frame_index_RVALID, "frame_index_RVALID");
    sc_trace(mVcdFile, frame_index_RDATA, "frame_index_RDATA");
    sc_trace(mVcdFile, frame_index_RLAST, "frame_index_RLAST");
    sc_trace(mVcdFile, frame_index_RID, "frame_index_RID");
    sc_trace(mVcdFile, frame_index_RUSER, "frame_index_RUSER");
    sc_trace(mVcdFile, frame_index_RRESP, "frame_index_RRESP");
    sc_trace(mVcdFile, frame_index_BVALID, "frame_index_BVALID");
    sc_trace(mVcdFile, frame_index_BREADY, "frame_index_BREADY");
    sc_trace(mVcdFile, frame_index_BRESP, "frame_index_BRESP");
    sc_trace(mVcdFile, frame_index_BID, "frame_index_BID");
    sc_trace(mVcdFile, frame_index_BUSER, "frame_index_BUSER");
    sc_trace(mVcdFile, base_ddr_addr_AWVALID, "base_ddr_addr_AWVALID");
    sc_trace(mVcdFile, base_ddr_addr_AWREADY, "base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, base_ddr_addr_AWADDR, "base_ddr_addr_AWADDR");
    sc_trace(mVcdFile, base_ddr_addr_WVALID, "base_ddr_addr_WVALID");
    sc_trace(mVcdFile, base_ddr_addr_WREADY, "base_ddr_addr_WREADY");
    sc_trace(mVcdFile, base_ddr_addr_ARREADY, "base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, base_ddr_addr_RVALID, "base_ddr_addr_RVALID");
    sc_trace(mVcdFile, base_ddr_addr_RDATA, "base_ddr_addr_RDATA");
    sc_trace(mVcdFile, base_ddr_addr_RLAST, "base_ddr_addr_RLAST");
    sc_trace(mVcdFile, base_ddr_addr_RID, "base_ddr_addr_RID");
    sc_trace(mVcdFile, base_ddr_addr_RUSER, "base_ddr_addr_RUSER");
    sc_trace(mVcdFile, base_ddr_addr_RRESP, "base_ddr_addr_RRESP");
    sc_trace(mVcdFile, base_ddr_addr_BVALID, "base_ddr_addr_BVALID");
    sc_trace(mVcdFile, base_ddr_addr_BREADY, "base_ddr_addr_BREADY");
    sc_trace(mVcdFile, base_ddr_addr_BRESP, "base_ddr_addr_BRESP");
    sc_trace(mVcdFile, base_ddr_addr_BID, "base_ddr_addr_BID");
    sc_trace(mVcdFile, base_ddr_addr_BUSER, "base_ddr_addr_BUSER");
    sc_trace(mVcdFile, indvar_flatten_reg_321, "indvar_flatten_reg_321");
    sc_trace(mVcdFile, j_reg_332, "j_reg_332");
    sc_trace(mVcdFile, temp_reg_343, "temp_reg_343");
    sc_trace(mVcdFile, i_reg_355, "i_reg_355");
    sc_trace(mVcdFile, indvar_reg_366, "indvar_reg_366");
    sc_trace(mVcdFile, update_intr_read_reg_670, "update_intr_read_reg_670");
    sc_trace(mVcdFile, frame_buffer_number_s_reg_674, "frame_buffer_number_s_reg_674");
    sc_trace(mVcdFile, frame_buffer_offset_s_reg_679, "frame_buffer_offset_s_reg_679");
    sc_trace(mVcdFile, frame_buffer_dim_rea_reg_685, "frame_buffer_dim_rea_reg_685");
    sc_trace(mVcdFile, base_address_read_reg_690, "base_address_read_reg_690");
    sc_trace(mVcdFile, frame_index_addr_reg_695, "frame_index_addr_reg_695");
    sc_trace(mVcdFile, t_V_reg_701, "t_V_reg_701");
    sc_trace(mVcdFile, ap_sig_ioackin_frame_index_WREADY, "ap_sig_ioackin_frame_index_WREADY");
    sc_trace(mVcdFile, offset_fu_460_p2, "offset_fu_460_p2");
    sc_trace(mVcdFile, tmp_1_fu_484_p2, "tmp_1_fu_484_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, idx_1_fu_490_p2, "idx_1_fu_490_p2");
    sc_trace(mVcdFile, idx_1_reg_717, "idx_1_reg_717");
    sc_trace(mVcdFile, exitcond_flatten_fu_555_p2, "exitcond_flatten_fu_555_p2");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter0, "ap_block_state10_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter1, "ap_block_state11_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_561_p2, "indvar_flatten_next_fu_561_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_4_fu_573_p2, "tmp_4_fu_573_p2");
    sc_trace(mVcdFile, tmp_4_reg_731, "tmp_4_reg_731");
    sc_trace(mVcdFile, j_mid2_fu_579_p3, "j_mid2_fu_579_p3");
    sc_trace(mVcdFile, j_mid2_reg_736, "j_mid2_reg_736");
    sc_trace(mVcdFile, i_1_fu_593_p3, "i_1_fu_593_p3");
    sc_trace(mVcdFile, i_1_reg_742, "i_1_reg_742");
    sc_trace(mVcdFile, temp_2_fu_618_p3, "temp_2_fu_618_p3");
    sc_trace(mVcdFile, ap_sig_ioackin_base_ddr_addr_AWREADY, "ap_sig_ioackin_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, exitcond_fu_647_p2, "exitcond_fu_647_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state13_pp1_stage0_iter0, "ap_block_state13_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage0_iter1, "ap_block_state14_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state15_pp1_stage0_iter2, "ap_block_state15_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_base_ddr_addr_WREADY, "ap_sig_ioackin_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, ap_block_state15_io, "ap_block_state15_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, indvar_next_fu_653_p2, "indvar_next_fu_653_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, buffer_q0, "buffer_q0");
    sc_trace(mVcdFile, buffer_load_reg_776, "buffer_load_reg_776");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, offset_1_fu_664_p2, "offset_1_fu_664_p2");
    sc_trace(mVcdFile, offset_1_reg_781, "offset_1_reg_781");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state10, "ap_condition_pp0_exit_iter0_state10");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state13, "ap_condition_pp1_exit_iter0_state13");
    sc_trace(mVcdFile, buffer_address0, "buffer_address0");
    sc_trace(mVcdFile, buffer_ce0, "buffer_ce0");
    sc_trace(mVcdFile, buffer_address1, "buffer_address1");
    sc_trace(mVcdFile, buffer_ce1, "buffer_ce1");
    sc_trace(mVcdFile, buffer_we1, "buffer_we1");
    sc_trace(mVcdFile, buffer_d1, "buffer_d1");
    sc_trace(mVcdFile, ap_phi_mux_i_op_assign_phi_fu_285_p4, "ap_phi_mux_i_op_assign_phi_fu_285_p4");
    sc_trace(mVcdFile, ap_phi_mux_i_op_assign_1_phi_fu_294_p4, "ap_phi_mux_i_op_assign_1_phi_fu_294_p4");
    sc_trace(mVcdFile, offset1_reg_300, "offset1_reg_300");
    sc_trace(mVcdFile, idx_reg_310, "idx_reg_310");
    sc_trace(mVcdFile, ap_phi_mux_j_phi_fu_336_p4, "ap_phi_mux_j_phi_fu_336_p4");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_359_p4, "ap_phi_mux_i_phi_fu_359_p4");
    sc_trace(mVcdFile, tmp_10_fu_632_p1, "tmp_10_fu_632_p1");
    sc_trace(mVcdFile, ifzero_fu_627_p2, "ifzero_fu_627_p2");
    sc_trace(mVcdFile, indvar1_fu_659_p1, "indvar1_fu_659_p1");
    sc_trace(mVcdFile, tmp_3_fu_377_p1, "tmp_3_fu_377_p1");
    sc_trace(mVcdFile, tmp_9_fu_636_p1, "tmp_9_fu_636_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_frame_index_AWREADY, "ap_reg_ioackin_frame_index_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_frame_index_AWREADY, "ap_sig_ioackin_frame_index_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_frame_index_WREADY, "ap_reg_ioackin_frame_index_WREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_base_ddr_addr_AWREADY, "ap_reg_ioackin_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_base_ddr_addr_WREADY, "ap_reg_ioackin_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, p_tmp_7_fu_524_p3, "p_tmp_7_fu_524_p3");
    sc_trace(mVcdFile, tmp_2_fu_542_p2, "tmp_2_fu_542_p2");
    sc_trace(mVcdFile, r_V_fu_444_p0, "r_V_fu_444_p0");
    sc_trace(mVcdFile, r_V_fu_444_p1, "r_V_fu_444_p1");
    sc_trace(mVcdFile, r_V_fu_444_p2, "r_V_fu_444_p2");
    sc_trace(mVcdFile, tmp_8_fu_450_p4, "tmp_8_fu_450_p4");
    sc_trace(mVcdFile, i_op_assign_1_cast_fu_433_p1, "i_op_assign_1_cast_fu_433_p1");
    sc_trace(mVcdFile, tmp_s_fu_470_p4, "tmp_s_fu_470_p4");
    sc_trace(mVcdFile, tmp_6_fu_480_p1, "tmp_6_fu_480_p1");
    sc_trace(mVcdFile, tmp_2_cast_fu_500_p1, "tmp_2_cast_fu_500_p1");
    sc_trace(mVcdFile, tmp_4_cast_fu_510_p1, "tmp_4_cast_fu_510_p1");
    sc_trace(mVcdFile, op2_assign_fu_504_p2, "op2_assign_fu_504_p2");
    sc_trace(mVcdFile, tmp_5_fu_513_p2, "tmp_5_fu_513_p2");
    sc_trace(mVcdFile, tmp_7_fu_519_p2, "tmp_7_fu_519_p2");
    sc_trace(mVcdFile, j_s_fu_567_p2, "j_s_fu_567_p2");
    sc_trace(mVcdFile, i_op_fu_587_p2, "i_op_fu_587_p2");
    sc_trace(mVcdFile, tmp_12_fu_601_p4, "tmp_12_fu_601_p4");
    sc_trace(mVcdFile, temp_1_fu_611_p3, "temp_1_fu_611_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, r_V_fu_444_p00, "r_V_fu_444_p00");
    sc_trace(mVcdFile, r_V_fu_444_p10, "r_V_fu_444_p10");
#endif

    }
    mHdltvinHandle.open("axi_write_prova.hdltvin.dat");
    mHdltvoutHandle.open("axi_write_prova.hdltvout.dat");
}

axi_write_prova::~axi_write_prova() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete axi_write_prova_AXILiteS_s_axi_U;
    delete axi_write_prova_frame_index_m_axi_U;
    delete axi_write_prova_base_ddr_addr_m_axi_U;
    delete buffer_U;
}

void axi_write_prova::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void axi_write_prova::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void axi_write_prova::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void axi_write_prova::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void axi_write_prova::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv1_1;
}

void axi_write_prova::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void axi_write_prova::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_1;
}

void axi_write_prova::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void axi_write_prova::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void axi_write_prova::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv32_200;
}

void axi_write_prova::thread_ap_var_for_const10() {
    ap_var_for_const10 = ap_const_lv8_FF;
}

void axi_write_prova::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state10.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                    esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state10.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state10.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                    esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state13.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, base_ddr_addr_AWREADY.read())) {
                ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_762_pp1_iter1_reg.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, base_ddr_addr_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_frame_index_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_frame_index_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_frame_index_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, frame_index_AWREADY.read())) {
                ap_reg_ioackin_frame_index_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_frame_index_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_frame_index_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_frame_index_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, frame_index_WREADY.read())) {
                ap_reg_ioackin_frame_index_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_1))) {
        i_reg_355 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_355 = i_1_reg_742.read();
    }
    if ((esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        idx_reg_310 = idx_1_reg_717.read();
    } else if ((esl_seteq<1,1,1>(frame_index_BVALID.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        idx_reg_310 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_1))) {
        indvar_flatten_reg_321 = ap_const_lv13_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_555_p2.read()))) {
        indvar_flatten_reg_321 = indvar_flatten_next_fu_561_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_647_p2.read()))) {
        indvar_reg_366 = indvar_next_fu_653_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        indvar_reg_366 = ap_const_lv10_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inner_index_V = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
             esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_0))) {
            inner_index_V = p_tmp_7_fu_524_p3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inputStream_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_vld_out.read()))) {
            inputStream_V_0_sel_rd =  (sc_logic) (~inputStream_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inputStream_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_ack_in.read()))) {
            inputStream_V_0_sel_wr =  (sc_logic) (~inputStream_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inputStream_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_2)))) {
            inputStream_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_1)))) {
            inputStream_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_ack_out.read()))))) {
            inputStream_V_0_state = ap_const_lv2_3;
        } else {
            inputStream_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_1))) {
        j_reg_332 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        j_reg_332 = j_mid2_reg_736.read();
    }
    if ((esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        offset1_reg_300 = offset_1_reg_781.read();
    } else if ((esl_seteq<1,1,1>(frame_index_BVALID.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        offset1_reg_300 = offset_fu_460_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_1))) {
        temp_reg_343 = ap_const_lv64_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        temp_reg_343 = temp_2_fu_618_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(frame_index_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, update_intr_read_reg_670.read()))) {
        BASE_ADDRESS_r = base_address_read_reg_690.read().range(31, 3);
        FRAME_BUFFER_DIM_r = frame_buffer_dim_rea_reg_685.read();
        FRAME_BUFFER_NUMBER_r = frame_buffer_number_s_reg_674.read();
        FRAME_OFFSET = frame_buffer_offset_s_reg_679.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        base_address_read_reg_690 = base_address.read();
        frame_buffer_dim_rea_reg_685 = frame_buffer_dim.read();
        frame_buffer_number_s_reg_674 = frame_buffer_number.read();
        frame_buffer_offset_s_reg_679 = frame_buffer_offset.read();
        frame_index_addr_reg_695 =  (sc_lv<32>) (tmp_3_fu_377_p1.read());
        update_intr_read_reg_670 =  (sc_lv<1>) (update_intr.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_762.read()))) {
        buffer_load_reg_776 = buffer_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_722 = exitcond_flatten_fu_555_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_762 = exitcond_fu_647_p2.read();
        exitcond_reg_762_pp1_iter1_reg = exitcond_reg_762.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_0))) {
        frame_count_inner = tmp_2_fu_542_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_555_p2.read()))) {
        i_1_reg_742 = i_1_fu_593_p3.read();
        j_mid2_reg_736 = j_mid2_fu_579_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        idx_1_reg_717 = idx_1_fu_490_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_load_A.read())) {
        inputStream_V_0_payload_A = inputStream_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_load_B.read())) {
        inputStream_V_0_payload_B = inputStream_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        offset_1_reg_781 = offset_1_fu_664_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_sig_ioackin_frame_index_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        t_V_reg_701 = inner_index_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_555_p2.read()))) {
        tmp_4_reg_731 = tmp_4_fu_573_p2.read();
    }
}

void axi_write_prova::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[9];
}

void axi_write_prova::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[11];
}

void axi_write_prova::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void axi_write_prova::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[10];
}

void axi_write_prova::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[12];
}

void axi_write_prova::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void axi_write_prova::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[16];
}

void axi_write_prova::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void axi_write_prova::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void axi_write_prova::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void axi_write_prova::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axi_write_prova::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_out.read()));
}

void axi_write_prova::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_out.read()));
}

void axi_write_prova::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axi_write_prova::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axi_write_prova::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read()));
}

void axi_write_prova::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read()));
}

void axi_write_prova::thread_ap_block_state10_pp0_stage0_iter0() {
    ap_block_state10_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axi_write_prova::thread_ap_block_state11_pp0_stage0_iter1() {
    ap_block_state11_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_out.read()));
}

void axi_write_prova::thread_ap_block_state13_pp1_stage0_iter0() {
    ap_block_state13_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axi_write_prova::thread_ap_block_state14_pp1_stage0_iter1() {
    ap_block_state14_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axi_write_prova::thread_ap_block_state15_io() {
    ap_block_state15_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_762_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()));
}

void axi_write_prova::thread_ap_block_state15_pp1_stage0_iter2() {
    ap_block_state15_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axi_write_prova::thread_ap_condition_pp0_exit_iter0_state10() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_555_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state10 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state10 = ap_const_logic_0;
    }
}

void axi_write_prova::thread_ap_condition_pp1_exit_iter0_state13() {
    if (esl_seteq<1,1,1>(exitcond_fu_647_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_0;
    }
}

void axi_write_prova::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void axi_write_prova::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void axi_write_prova::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void axi_write_prova::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void axi_write_prova::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void axi_write_prova::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void axi_write_prova::thread_ap_phi_mux_i_op_assign_1_phi_fu_294_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, update_intr_read_reg_670.read())) {
            ap_phi_mux_i_op_assign_1_phi_fu_294_p4 = BASE_ADDRESS_r.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, update_intr_read_reg_670.read())) {
            ap_phi_mux_i_op_assign_1_phi_fu_294_p4 = base_address_read_reg_690.read().range(31, 3);
        } else {
            ap_phi_mux_i_op_assign_1_phi_fu_294_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_i_op_assign_1_phi_fu_294_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void axi_write_prova::thread_ap_phi_mux_i_op_assign_phi_fu_285_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, update_intr_read_reg_670.read())) {
            ap_phi_mux_i_op_assign_phi_fu_285_p4 = FRAME_OFFSET.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, update_intr_read_reg_670.read())) {
            ap_phi_mux_i_op_assign_phi_fu_285_p4 = frame_buffer_offset_s_reg_679.read();
        } else {
            ap_phi_mux_i_op_assign_phi_fu_285_p4 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        ap_phi_mux_i_op_assign_phi_fu_285_p4 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void axi_write_prova::thread_ap_phi_mux_i_phi_fu_359_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()))) {
        ap_phi_mux_i_phi_fu_359_p4 = i_1_reg_742.read();
    } else {
        ap_phi_mux_i_phi_fu_359_p4 = i_reg_355.read();
    }
}

void axi_write_prova::thread_ap_phi_mux_j_phi_fu_336_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()))) {
        ap_phi_mux_j_phi_fu_336_p4 = j_mid2_reg_736.read();
    } else {
        ap_phi_mux_j_phi_fu_336_p4 = j_reg_332.read();
    }
}

void axi_write_prova::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void axi_write_prova::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axi_write_prova::thread_ap_sig_ioackin_base_ddr_addr_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_AWREADY.read())) {
        ap_sig_ioackin_base_ddr_addr_AWREADY = base_ddr_addr_AWREADY.read();
    } else {
        ap_sig_ioackin_base_ddr_addr_AWREADY = ap_const_logic_1;
    }
}

void axi_write_prova::thread_ap_sig_ioackin_base_ddr_addr_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_WREADY.read())) {
        ap_sig_ioackin_base_ddr_addr_WREADY = base_ddr_addr_WREADY.read();
    } else {
        ap_sig_ioackin_base_ddr_addr_WREADY = ap_const_logic_1;
    }
}

void axi_write_prova::thread_ap_sig_ioackin_frame_index_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_frame_index_AWREADY.read())) {
        ap_sig_ioackin_frame_index_AWREADY = frame_index_AWREADY.read();
    } else {
        ap_sig_ioackin_frame_index_AWREADY = ap_const_logic_1;
    }
}

void axi_write_prova::thread_ap_sig_ioackin_frame_index_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_frame_index_WREADY.read())) {
        ap_sig_ioackin_frame_index_WREADY = frame_index_WREADY.read();
    } else {
        ap_sig_ioackin_frame_index_WREADY = ap_const_logic_1;
    }
}

void axi_write_prova::thread_base_ddr_addr_AWADDR() {
    base_ddr_addr_AWADDR =  (sc_lv<32>) (tmp_9_fu_636_p1.read());
}

void axi_write_prova::thread_base_ddr_addr_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_AWREADY.read()))) {
        base_ddr_addr_AWVALID = ap_const_logic_1;
    } else {
        base_ddr_addr_AWVALID = ap_const_logic_0;
    }
}

void axi_write_prova::thread_base_ddr_addr_BREADY() {
    if ((esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        base_ddr_addr_BREADY = ap_const_logic_1;
    } else {
        base_ddr_addr_BREADY = ap_const_logic_0;
    }
}

void axi_write_prova::thread_base_ddr_addr_WVALID() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_762_pp1_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_WREADY.read()))) {
        base_ddr_addr_WVALID = ap_const_logic_1;
    } else {
        base_ddr_addr_WVALID = ap_const_logic_0;
    }
}

void axi_write_prova::thread_base_ddr_addr_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        base_ddr_addr_blk_n_AW = m_axi_base_ddr_addr_AWREADY.read();
    } else {
        base_ddr_addr_blk_n_AW = ap_const_logic_1;
    }
}

void axi_write_prova::thread_base_ddr_addr_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        base_ddr_addr_blk_n_B = m_axi_base_ddr_addr_BVALID.read();
    } else {
        base_ddr_addr_blk_n_B = ap_const_logic_1;
    }
}

void axi_write_prova::thread_base_ddr_addr_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_762_pp1_iter1_reg.read()))) {
        base_ddr_addr_blk_n_W = m_axi_base_ddr_addr_WREADY.read();
    } else {
        base_ddr_addr_blk_n_W = ap_const_logic_1;
    }
}

void axi_write_prova::thread_buffer_address0() {
    buffer_address0 =  (sc_lv<9>) (indvar1_fu_659_p1.read());
}

void axi_write_prova::thread_buffer_address1() {
    buffer_address1 =  (sc_lv<9>) (tmp_10_fu_632_p1.read());
}

void axi_write_prova::thread_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1))) {
        buffer_ce0 = ap_const_logic_1;
    } else {
        buffer_ce0 = ap_const_logic_0;
    }
}

void axi_write_prova::thread_buffer_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        buffer_ce1 = ap_const_logic_1;
    } else {
        buffer_ce1 = ap_const_logic_0;
    }
}

void axi_write_prova::thread_buffer_d1() {
    buffer_d1 = esl_concat<8,56>(inputStream_V_0_data_out.read(), temp_1_fu_611_p3.read());
}

void axi_write_prova::thread_buffer_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ifzero_fu_627_p2.read()))) {
        buffer_we1 = ap_const_logic_1;
    } else {
        buffer_we1 = ap_const_logic_0;
    }
}

void axi_write_prova::thread_exitcond_flatten_fu_555_p2() {
    exitcond_flatten_fu_555_p2 = (!indvar_flatten_reg_321.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_321.read() == ap_const_lv13_1000);
}

void axi_write_prova::thread_exitcond_fu_647_p2() {
    exitcond_fu_647_p2 = (!indvar_reg_366.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(indvar_reg_366.read() == ap_const_lv10_200);
}

void axi_write_prova::thread_frame_count() {
    frame_count = (!frame_count_inner.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(frame_count_inner.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axi_write_prova::thread_frame_index_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_frame_index_AWREADY.read()))) {
        frame_index_AWVALID = ap_const_logic_1;
    } else {
        frame_index_AWVALID = ap_const_logic_0;
    }
}

void axi_write_prova::thread_frame_index_BREADY() {
    if ((esl_seteq<1,1,1>(frame_index_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        frame_index_BREADY = ap_const_logic_1;
    } else {
        frame_index_BREADY = ap_const_logic_0;
    }
}

void axi_write_prova::thread_frame_index_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_frame_index_WREADY.read()))) {
        frame_index_WVALID = ap_const_logic_1;
    } else {
        frame_index_WVALID = ap_const_logic_0;
    }
}

void axi_write_prova::thread_frame_index_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        frame_index_blk_n_AW = m_axi_frame_index_AWREADY.read();
    } else {
        frame_index_blk_n_AW = ap_const_logic_1;
    }
}

void axi_write_prova::thread_frame_index_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        frame_index_blk_n_B = m_axi_frame_index_BVALID.read();
    } else {
        frame_index_blk_n_B = ap_const_logic_1;
    }
}

void axi_write_prova::thread_frame_index_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        frame_index_blk_n_W = m_axi_frame_index_WREADY.read();
    } else {
        frame_index_blk_n_W = ap_const_logic_1;
    }
}

void axi_write_prova::thread_i_1_fu_593_p3() {
    i_1_fu_593_p3 = (!tmp_4_fu_573_p2.read()[0].is_01())? sc_lv<4>(): ((tmp_4_fu_573_p2.read()[0].to_bool())? ap_const_lv4_1: i_op_fu_587_p2.read());
}

void axi_write_prova::thread_i_op_assign_1_cast_fu_433_p1() {
    i_op_assign_1_cast_fu_433_p1 = esl_zext<32,29>(ap_phi_mux_i_op_assign_1_phi_fu_294_p4.read());
}

void axi_write_prova::thread_i_op_fu_587_p2() {
    i_op_fu_587_p2 = (!ap_phi_mux_i_phi_fu_359_p4.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(ap_phi_mux_i_phi_fu_359_p4.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void axi_write_prova::thread_idx_1_fu_490_p2() {
    idx_1_fu_490_p2 = (!idx_reg_310.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(idx_reg_310.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axi_write_prova::thread_ifzero_fu_627_p2() {
    ifzero_fu_627_p2 = (!i_1_reg_742.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_742.read() == ap_const_lv4_8);
}

void axi_write_prova::thread_indvar1_fu_659_p1() {
    indvar1_fu_659_p1 = esl_zext<64,10>(indvar_reg_366.read());
}

void axi_write_prova::thread_indvar_flatten_next_fu_561_p2() {
    indvar_flatten_next_fu_561_p2 = (!indvar_flatten_reg_321.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(indvar_flatten_reg_321.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void axi_write_prova::thread_indvar_next_fu_653_p2() {
    indvar_next_fu_653_p2 = (!indvar_reg_366.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(indvar_reg_366.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void axi_write_prova::thread_inputStream_V_0_ack_in() {
    inputStream_V_0_ack_in = inputStream_V_0_state.read()[1];
}

void axi_write_prova::thread_inputStream_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inputStream_V_0_ack_out = ap_const_logic_1;
    } else {
        inputStream_V_0_ack_out = ap_const_logic_0;
    }
}

void axi_write_prova::thread_inputStream_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_sel.read())) {
        inputStream_V_0_data_out = inputStream_V_0_payload_B.read();
    } else {
        inputStream_V_0_data_out = inputStream_V_0_payload_A.read();
    }
}

void axi_write_prova::thread_inputStream_V_0_load_A() {
    inputStream_V_0_load_A = (inputStream_V_0_state_cmp_full.read() & ~inputStream_V_0_sel_wr.read());
}

void axi_write_prova::thread_inputStream_V_0_load_B() {
    inputStream_V_0_load_B = (inputStream_V_0_sel_wr.read() & inputStream_V_0_state_cmp_full.read());
}

void axi_write_prova::thread_inputStream_V_0_sel() {
    inputStream_V_0_sel = inputStream_V_0_sel_rd.read();
}

void axi_write_prova::thread_inputStream_V_0_state_cmp_full() {
    inputStream_V_0_state_cmp_full =  (sc_logic) ((!inputStream_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inputStream_V_0_state.read() != ap_const_lv2_1))[0];
}

void axi_write_prova::thread_inputStream_V_0_vld_in() {
    inputStream_V_0_vld_in = inputStream_V_TVALID.read();
}

void axi_write_prova::thread_inputStream_V_0_vld_out() {
    inputStream_V_0_vld_out = inputStream_V_0_state.read()[0];
}

void axi_write_prova::thread_inputStream_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_722.read()))) {
        inputStream_V_TDATA_blk_n = inputStream_V_0_state.read()[0];
    } else {
        inputStream_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void axi_write_prova::thread_inputStream_V_TREADY() {
    inputStream_V_TREADY = inputStream_V_0_state.read()[1];
}

void axi_write_prova::thread_j_mid2_fu_579_p3() {
    j_mid2_fu_579_p3 = (!tmp_4_fu_573_p2.read()[0].is_01())? sc_lv<10>(): ((tmp_4_fu_573_p2.read()[0].to_bool())? j_s_fu_567_p2.read(): ap_phi_mux_j_phi_fu_336_p4.read());
}

void axi_write_prova::thread_j_s_fu_567_p2() {
    j_s_fu_567_p2 = (!ap_phi_mux_j_phi_fu_336_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_j_phi_fu_336_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void axi_write_prova::thread_offset_1_fu_664_p2() {
    offset_1_fu_664_p2 = (!offset1_reg_300.read().is_01() || !ap_const_lv32_200.is_01())? sc_lv<32>(): (sc_bigint<32>(offset1_reg_300.read()) + sc_biguint<32>(ap_const_lv32_200));
}

void axi_write_prova::thread_offset_fu_460_p2() {
    offset_fu_460_p2 = (!tmp_8_fu_450_p4.read().is_01() || !i_op_assign_1_cast_fu_433_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_8_fu_450_p4.read()) + sc_biguint<32>(i_op_assign_1_cast_fu_433_p1.read()));
}

void axi_write_prova::thread_op2_assign_fu_504_p2() {
    op2_assign_fu_504_p2 = (!tmp_2_cast_fu_500_p1.read().is_01() || !ap_const_lv9_1FF.is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_2_cast_fu_500_p1.read()) + sc_bigint<9>(ap_const_lv9_1FF));
}

void axi_write_prova::thread_p_tmp_7_fu_524_p3() {
    p_tmp_7_fu_524_p3 = (!tmp_5_fu_513_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_fu_513_p2.read()[0].to_bool())? ap_const_lv8_0: tmp_7_fu_519_p2.read());
}

void axi_write_prova::thread_r_V_fu_444_p0() {
    r_V_fu_444_p0 =  (sc_lv<32>) (r_V_fu_444_p00.read());
}

void axi_write_prova::thread_r_V_fu_444_p00() {
    r_V_fu_444_p00 = esl_zext<35,32>(ap_phi_mux_i_op_assign_phi_fu_285_p4.read());
}

void axi_write_prova::thread_r_V_fu_444_p1() {
    r_V_fu_444_p1 =  (sc_lv<8>) (r_V_fu_444_p10.read());
}

void axi_write_prova::thread_r_V_fu_444_p10() {
    r_V_fu_444_p10 = esl_zext<35,8>(t_V_reg_701.read());
}

void axi_write_prova::thread_r_V_fu_444_p2() {
    r_V_fu_444_p2 = (!r_V_fu_444_p0.read().is_01() || !r_V_fu_444_p1.read().is_01())? sc_lv<35>(): sc_biguint<32>(r_V_fu_444_p0.read()) * sc_biguint<8>(r_V_fu_444_p1.read());
}

void axi_write_prova::thread_temp_1_fu_611_p3() {
    temp_1_fu_611_p3 = (!tmp_4_reg_731.read()[0].is_01())? sc_lv<56>(): ((tmp_4_reg_731.read()[0].to_bool())? ap_const_lv56_0: tmp_12_fu_601_p4.read());
}

void axi_write_prova::thread_temp_2_fu_618_p3() {
    temp_2_fu_618_p3 = esl_concat<8,56>(inputStream_V_0_data_out.read(), temp_1_fu_611_p3.read());
}

void axi_write_prova::thread_tmp_10_fu_632_p1() {
    tmp_10_fu_632_p1 = esl_zext<64,10>(j_mid2_reg_736.read());
}

void axi_write_prova::thread_tmp_12_fu_601_p4() {
    tmp_12_fu_601_p4 = temp_reg_343.read().range(63, 8);
}

void axi_write_prova::thread_tmp_1_fu_484_p2() {
    tmp_1_fu_484_p2 = (!idx_reg_310.read().is_01() || !tmp_6_fu_480_p1.read().is_01())? sc_lv<1>(): (sc_biguint<32>(idx_reg_310.read()) < sc_biguint<32>(tmp_6_fu_480_p1.read()));
}

void axi_write_prova::thread_tmp_2_cast_fu_500_p1() {
    tmp_2_cast_fu_500_p1 = esl_zext<9,8>(FRAME_BUFFER_NUMBER_r.read());
}

void axi_write_prova::thread_tmp_2_fu_542_p2() {
    tmp_2_fu_542_p2 = (!frame_count_inner.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(frame_count_inner.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axi_write_prova::thread_tmp_3_fu_377_p1() {
    tmp_3_fu_377_p1 = esl_sext<64,32>(frame_index_V.read());
}

void axi_write_prova::thread_tmp_4_cast_fu_510_p1() {
    tmp_4_cast_fu_510_p1 = esl_zext<9,8>(t_V_reg_701.read());
}

void axi_write_prova::thread_tmp_4_fu_573_p2() {
    tmp_4_fu_573_p2 = (!ap_phi_mux_i_phi_fu_359_p4.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_phi_fu_359_p4.read() == ap_const_lv4_8);
}

void axi_write_prova::thread_tmp_5_fu_513_p2() {
    tmp_5_fu_513_p2 = (!tmp_4_cast_fu_510_p1.read().is_01() || !op2_assign_fu_504_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_cast_fu_510_p1.read() == op2_assign_fu_504_p2.read());
}

void axi_write_prova::thread_tmp_6_fu_480_p1() {
    tmp_6_fu_480_p1 = esl_zext<32,20>(tmp_s_fu_470_p4.read());
}

void axi_write_prova::thread_tmp_7_fu_519_p2() {
    tmp_7_fu_519_p2 = (!t_V_reg_701.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(t_V_reg_701.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void axi_write_prova::thread_tmp_8_fu_450_p4() {
    tmp_8_fu_450_p4 = r_V_fu_444_p2.read().range(34, 3);
}

void axi_write_prova::thread_tmp_9_fu_636_p1() {
    tmp_9_fu_636_p1 = esl_sext<64,32>(offset1_reg_300.read());
}

void axi_write_prova::thread_tmp_s_fu_470_p4() {
    tmp_s_fu_470_p4 = FRAME_BUFFER_DIM_r.read().range(31, 12);
}

void axi_write_prova::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_frame_index_AWREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_frame_index_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(frame_index_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(tmp_1_fu_484_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            if (!(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_fu_555_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_fu_555_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 2048 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_fu_647_p2.read(), ap_const_lv1_1)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(exitcond_fu_647_p2.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

void axi_write_prova::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_frame_index_AWVALID\" :  \"" << m_axi_frame_index_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_AWREADY\" :  \"" << m_axi_frame_index_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWADDR\" :  \"" << m_axi_frame_index_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWID\" :  \"" << m_axi_frame_index_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWLEN\" :  \"" << m_axi_frame_index_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWSIZE\" :  \"" << m_axi_frame_index_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWBURST\" :  \"" << m_axi_frame_index_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWLOCK\" :  \"" << m_axi_frame_index_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWCACHE\" :  \"" << m_axi_frame_index_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWPROT\" :  \"" << m_axi_frame_index_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWQOS\" :  \"" << m_axi_frame_index_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWREGION\" :  \"" << m_axi_frame_index_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_AWUSER\" :  \"" << m_axi_frame_index_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_WVALID\" :  \"" << m_axi_frame_index_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_WREADY\" :  \"" << m_axi_frame_index_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_WDATA\" :  \"" << m_axi_frame_index_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_WSTRB\" :  \"" << m_axi_frame_index_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_WLAST\" :  \"" << m_axi_frame_index_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_WID\" :  \"" << m_axi_frame_index_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_WUSER\" :  \"" << m_axi_frame_index_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARVALID\" :  \"" << m_axi_frame_index_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_ARREADY\" :  \"" << m_axi_frame_index_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARADDR\" :  \"" << m_axi_frame_index_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARID\" :  \"" << m_axi_frame_index_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARLEN\" :  \"" << m_axi_frame_index_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARSIZE\" :  \"" << m_axi_frame_index_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARBURST\" :  \"" << m_axi_frame_index_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARLOCK\" :  \"" << m_axi_frame_index_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARCACHE\" :  \"" << m_axi_frame_index_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARPROT\" :  \"" << m_axi_frame_index_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARQOS\" :  \"" << m_axi_frame_index_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARREGION\" :  \"" << m_axi_frame_index_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_ARUSER\" :  \"" << m_axi_frame_index_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_RVALID\" :  \"" << m_axi_frame_index_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_RREADY\" :  \"" << m_axi_frame_index_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_RDATA\" :  \"" << m_axi_frame_index_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_RLAST\" :  \"" << m_axi_frame_index_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_RID\" :  \"" << m_axi_frame_index_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_RUSER\" :  \"" << m_axi_frame_index_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_RRESP\" :  \"" << m_axi_frame_index_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_BVALID\" :  \"" << m_axi_frame_index_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_frame_index_BREADY\" :  \"" << m_axi_frame_index_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_BRESP\" :  \"" << m_axi_frame_index_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_BID\" :  \"" << m_axi_frame_index_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_frame_index_BUSER\" :  \"" << m_axi_frame_index_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_V_TDATA\" :  \"" << inputStream_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_V_TVALID\" :  \"" << inputStream_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputStream_V_TREADY\" :  \"" << inputStream_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWVALID\" :  \"" << m_axi_base_ddr_addr_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_AWREADY\" :  \"" << m_axi_base_ddr_addr_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWADDR\" :  \"" << m_axi_base_ddr_addr_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWID\" :  \"" << m_axi_base_ddr_addr_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWLEN\" :  \"" << m_axi_base_ddr_addr_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWSIZE\" :  \"" << m_axi_base_ddr_addr_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWBURST\" :  \"" << m_axi_base_ddr_addr_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWLOCK\" :  \"" << m_axi_base_ddr_addr_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWCACHE\" :  \"" << m_axi_base_ddr_addr_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWPROT\" :  \"" << m_axi_base_ddr_addr_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWQOS\" :  \"" << m_axi_base_ddr_addr_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWREGION\" :  \"" << m_axi_base_ddr_addr_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWUSER\" :  \"" << m_axi_base_ddr_addr_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WVALID\" :  \"" << m_axi_base_ddr_addr_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_WREADY\" :  \"" << m_axi_base_ddr_addr_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WDATA\" :  \"" << m_axi_base_ddr_addr_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WSTRB\" :  \"" << m_axi_base_ddr_addr_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WLAST\" :  \"" << m_axi_base_ddr_addr_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WID\" :  \"" << m_axi_base_ddr_addr_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WUSER\" :  \"" << m_axi_base_ddr_addr_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARVALID\" :  \"" << m_axi_base_ddr_addr_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_ARREADY\" :  \"" << m_axi_base_ddr_addr_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARADDR\" :  \"" << m_axi_base_ddr_addr_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARID\" :  \"" << m_axi_base_ddr_addr_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARLEN\" :  \"" << m_axi_base_ddr_addr_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARSIZE\" :  \"" << m_axi_base_ddr_addr_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARBURST\" :  \"" << m_axi_base_ddr_addr_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARLOCK\" :  \"" << m_axi_base_ddr_addr_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARCACHE\" :  \"" << m_axi_base_ddr_addr_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARPROT\" :  \"" << m_axi_base_ddr_addr_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARQOS\" :  \"" << m_axi_base_ddr_addr_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARREGION\" :  \"" << m_axi_base_ddr_addr_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARUSER\" :  \"" << m_axi_base_ddr_addr_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RVALID\" :  \"" << m_axi_base_ddr_addr_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_RREADY\" :  \"" << m_axi_base_ddr_addr_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RDATA\" :  \"" << m_axi_base_ddr_addr_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RLAST\" :  \"" << m_axi_base_ddr_addr_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RID\" :  \"" << m_axi_base_ddr_addr_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RUSER\" :  \"" << m_axi_base_ddr_addr_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RRESP\" :  \"" << m_axi_base_ddr_addr_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BVALID\" :  \"" << m_axi_base_ddr_addr_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_BREADY\" :  \"" << m_axi_base_ddr_addr_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BRESP\" :  \"" << m_axi_base_ddr_addr_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BID\" :  \"" << m_axi_base_ddr_addr_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BUSER\" :  \"" << m_axi_base_ddr_addr_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_count\" :  \"" << frame_count.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

