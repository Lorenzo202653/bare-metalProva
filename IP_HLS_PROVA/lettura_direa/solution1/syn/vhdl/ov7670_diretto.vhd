-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ov7670_diretto is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    data_in : IN STD_LOGIC_VECTOR (7 downto 0);
    href_V : IN STD_LOGIC_VECTOR (0 downto 0);
    vsync_V : IN STD_LOGIC_VECTOR (0 downto 0);
    data_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    line_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    frame_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ov7670_diretto is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ov7670_diretto,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=41.669998,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.958000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=137,HLS_SYN_LUT=326}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_out_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal data_out_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal data_out_1_vld_in : STD_LOGIC;
    signal data_out_1_vld_out : STD_LOGIC;
    signal data_out_1_ack_in : STD_LOGIC;
    signal data_out_1_ack_out : STD_LOGIC;
    signal data_out_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal data_out_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal data_out_1_sel_rd : STD_LOGIC := '0';
    signal data_out_1_sel_wr : STD_LOGIC := '0';
    signal data_out_1_sel : STD_LOGIC;
    signal data_out_1_load_A : STD_LOGIC;
    signal data_out_1_load_B : STD_LOGIC;
    signal data_out_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_1_state_cmp_full : STD_LOGIC;
    signal count_lines : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal first : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal count_readings : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal brmerge_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal brmerge_reg_231 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_235 : STD_LOGIC_VECTOR (0 downto 0);
    signal href_V_read_read_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal or_cond_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_assign_fu_62 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op66_write_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal frame_valid_V_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal p_not1_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_condition_342 : BOOLEAN;
    signal ap_condition_183 : BOOLEAN;
    signal ap_condition_264 : BOOLEAN;

    component ov7670_diretto_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    ov7670_diretto_AXILiteS_s_axi_U : component ov7670_diretto_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_lines_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                count_lines <= ap_const_lv32_0;
            else
                if ((ap_const_boolean_1 = ap_condition_183)) then
                    if ((ap_const_boolean_1 = ap_condition_342)) then 
                        count_lines <= tmp_6_fu_197_p2;
                    elsif (((or_cond1_fu_169_p2 = ap_const_lv1_0) and (or_cond_fu_157_p2 = ap_const_lv1_0))) then 
                        count_lines <= ap_const_lv32_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    count_readings_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                count_readings <= ap_const_lv32_0;
            else
                if ((ap_const_boolean_1 = ap_condition_264)) then
                    if ((href_V = ap_const_lv1_1)) then 
                        count_readings <= tmp_4_fu_209_p2;
                    elsif (((tmp_5_fu_185_p2 = ap_const_lv1_1) and (href_V_read_read_fu_78_p2 = ap_const_lv1_0))) then 
                        count_readings <= ap_const_lv32_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    data_out_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_1_ack_out = ap_const_logic_1) and (data_out_1_vld_out = ap_const_logic_1))) then 
                                        data_out_1_sel_rd <= not(data_out_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_1_sel_wr <= ap_const_logic_0;
            else
                if (((data_out_1_ack_in = ap_const_logic_1) and (data_out_1_vld_in = ap_const_logic_1))) then 
                                        data_out_1_sel_wr <= not(data_out_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_out_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_1_state = ap_const_lv2_2) and (data_out_1_vld_in = ap_const_logic_0)) or ((data_out_1_state = ap_const_lv2_3) and (data_out_1_vld_in = ap_const_logic_0) and (data_out_1_ack_out = ap_const_logic_1)))) then 
                    data_out_1_state <= ap_const_lv2_2;
                elsif ((((data_out_1_state = ap_const_lv2_1) and (data_out_1_ack_out = ap_const_logic_0)) or ((data_out_1_state = ap_const_lv2_3) and (data_out_1_ack_out = ap_const_logic_0) and (data_out_1_vld_in = ap_const_logic_1)))) then 
                    data_out_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_1_vld_in = ap_const_logic_0) and (data_out_1_ack_out = ap_const_logic_1))) and not(((data_out_1_ack_out = ap_const_logic_0) and (data_out_1_vld_in = ap_const_logic_1))) and (data_out_1_state = ap_const_lv2_3)) or ((data_out_1_state = ap_const_lv2_1) and (data_out_1_ack_out = ap_const_logic_1)) or ((data_out_1_state = ap_const_lv2_2) and (data_out_1_vld_in = ap_const_logic_1)))) then 
                    data_out_1_state <= ap_const_lv2_3;
                else 
                    data_out_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    first_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                first <= ap_const_lv1_1;
            else
                if (((brmerge_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
                    first <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    frame_valid_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frame_valid_V_preg <= ap_const_lv1_0;
            else
                if (((or_cond_fu_157_p2 = ap_const_lv1_1) and (brmerge_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    frame_valid_V_preg <= ap_const_lv1_1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((brmerge_fu_133_p2 = ap_const_lv1_1) and (or_cond_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    frame_valid_V_preg <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                brmerge_reg_231 <= brmerge_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                data_in_assign_fu_62 <= data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_1_load_A = ap_const_logic_1)) then
                data_out_1_payload_A <= data_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_1_load_B = ap_const_logic_1)) then
                data_out_1_payload_B <= data_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                or_cond_reg_235 <= or_cond_fu_157_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, href_V, data_out_1_ack_in, ap_CS_fsm_state2, brmerge_fu_133_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, href_V_read_read_fu_78_p2, ap_block_state2_io, or_cond_fu_157_p2, ap_block_state5_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((or_cond_fu_157_p2 = ap_const_lv1_1) and (href_V = ap_const_lv1_1) and (brmerge_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (((brmerge_fu_133_p2 = ap_const_lv1_1) and (href_V_read_read_fu_78_p2 = ap_const_lv1_0)) or ((brmerge_fu_133_p2 = ap_const_lv1_1) and (or_cond_fu_157_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((brmerge_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((data_out_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((data_out_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((data_out_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_io_assign_proc : process(data_out_1_ack_in, brmerge_fu_133_p2)
    begin
                ap_block_state2_io <= ((brmerge_fu_133_p2 = ap_const_lv1_0) and (data_out_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(data_out_1_ack_in, ap_predicate_op66_write_state5)
    begin
                ap_block_state5_io <= ((data_out_1_ack_in = ap_const_logic_0) and (ap_predicate_op66_write_state5 = ap_const_boolean_1));
    end process;


    ap_condition_183_assign_proc : process(ap_CS_fsm_state2, brmerge_fu_133_p2, ap_block_state2_io)
    begin
                ap_condition_183 <= ((brmerge_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io));
    end process;


    ap_condition_264_assign_proc : process(ap_CS_fsm_state2, brmerge_fu_133_p2, ap_block_state2_io, or_cond_fu_157_p2)
    begin
                ap_condition_264 <= ((or_cond_fu_157_p2 = ap_const_lv1_1) and (brmerge_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io));
    end process;


    ap_condition_342_assign_proc : process(href_V_read_read_fu_78_p2, or_cond_fu_157_p2, tmp_5_fu_185_p2)
    begin
                ap_condition_342 <= ((tmp_5_fu_185_p2 = ap_const_lv1_1) and (or_cond_fu_157_p2 = ap_const_lv1_1) and (href_V_read_read_fu_78_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(data_out_1_ack_in, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((data_out_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op66_write_state5_assign_proc : process(href_V, brmerge_reg_231, or_cond_reg_235)
    begin
                ap_predicate_op66_write_state5 <= ((href_V = ap_const_lv1_1) and (or_cond_reg_235 = ap_const_lv1_1) and (brmerge_reg_231 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(data_out_1_ack_in, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((data_out_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    brmerge_fu_133_p2 <= (vsync_V or p_not1_fu_127_p2);
    data_out_1_ack_in <= data_out_1_state(1);
    data_out_1_ack_out <= data_out_TREADY;

    data_out_1_data_in_assign_proc : process(ap_CS_fsm_state2, brmerge_fu_133_p2, ap_CS_fsm_state4, data_in_assign_fu_62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_out_1_data_in <= data_in_assign_fu_62;
        elsif (((brmerge_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_out_1_data_in <= ap_const_lv8_0;
        else 
            data_out_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    data_out_1_data_out_assign_proc : process(data_out_1_payload_A, data_out_1_payload_B, data_out_1_sel)
    begin
        if ((data_out_1_sel = ap_const_logic_1)) then 
            data_out_1_data_out <= data_out_1_payload_B;
        else 
            data_out_1_data_out <= data_out_1_payload_A;
        end if; 
    end process;

    data_out_1_load_A <= (not(data_out_1_sel_wr) and data_out_1_state_cmp_full);
    data_out_1_load_B <= (data_out_1_state_cmp_full and data_out_1_sel_wr);
    data_out_1_sel <= data_out_1_sel_rd;
    data_out_1_state_cmp_full <= '0' when (data_out_1_state = ap_const_lv2_1) else '1';

    data_out_1_vld_in_assign_proc : process(data_out_1_ack_in, ap_CS_fsm_state2, brmerge_fu_133_p2, ap_CS_fsm_state4, ap_block_state2_io)
    begin
        if ((((data_out_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((brmerge_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io)))) then 
            data_out_1_vld_in <= ap_const_logic_1;
        else 
            data_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_1_vld_out <= data_out_1_state(0);
    data_out_TDATA <= data_out_1_data_out;

    data_out_TDATA_blk_n_assign_proc : process(href_V, data_out_1_state, ap_CS_fsm_state2, brmerge_fu_133_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, brmerge_reg_231, or_cond_reg_235)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((href_V = ap_const_lv1_1) and (or_cond_reg_235 = ap_const_lv1_1) and (brmerge_reg_231 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((brmerge_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_out_TDATA_blk_n <= data_out_1_state(1);
        else 
            data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_TVALID <= data_out_1_state(0);

    frame_valid_V_assign_proc : process(ap_CS_fsm_state2, brmerge_fu_133_p2, ap_CS_fsm_state3, or_cond_fu_157_p2, frame_valid_V_preg)
    begin
        if (((or_cond_fu_157_p2 = ap_const_lv1_1) and (brmerge_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            frame_valid_V <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((brmerge_fu_133_p2 = ap_const_lv1_1) and (or_cond_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            frame_valid_V <= ap_const_lv1_0;
        else 
            frame_valid_V <= frame_valid_V_preg;
        end if; 
    end process;

    href_V_read_read_fu_78_p2 <= href_V;

    line_valid_V_assign_proc : process(data_out_1_ack_in, ap_CS_fsm_state2, brmerge_fu_133_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, href_V_read_read_fu_78_p2, or_cond_fu_157_p2, ap_predicate_op66_write_state5)
    begin
        if (((data_out_1_ack_in = ap_const_logic_1) and (ap_predicate_op66_write_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            line_valid_V <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((or_cond_fu_157_p2 = ap_const_lv1_1) and (brmerge_fu_133_p2 = ap_const_lv1_1) and (href_V_read_read_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            line_valid_V <= ap_const_lv1_0;
        else 
            line_valid_V <= ap_const_lv1_0;
        end if; 
    end process;

    or_cond1_fu_169_p2 <= (tmp_3_fu_163_p2 and p_not_fu_145_p2);
    or_cond_fu_157_p2 <= (tmp_2_fu_151_p2 and p_not_fu_145_p2);
    p_not1_fu_127_p2 <= (first xor ap_const_lv1_1);
    p_not_fu_145_p2 <= (vsync_V xor ap_const_lv1_1);
    tmp_2_fu_151_p2 <= "1" when (unsigned(count_lines) < unsigned(ap_const_lv32_1E0)) else "0";
    tmp_3_fu_163_p2 <= "1" when (count_lines = ap_const_lv32_1E0) else "0";
    tmp_4_fu_209_p2 <= std_logic_vector(unsigned(count_readings) + unsigned(ap_const_lv32_1));
    tmp_5_fu_185_p2 <= "1" when (count_readings = ap_const_lv32_500) else "0";
    tmp_6_fu_197_p2 <= std_logic_vector(unsigned(count_lines) + unsigned(ap_const_lv32_1));
end behav;
