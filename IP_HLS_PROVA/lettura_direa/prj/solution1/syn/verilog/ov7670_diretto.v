// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ov7670_diretto,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=86,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=835,HLS_SYN_LUT=1343,HLS_VERSION=2018_3}" *)

module ov7670_diretto (
        ap_clk,
        ap_rst_n,
        m_axi_data_out_AWVALID,
        m_axi_data_out_AWREADY,
        m_axi_data_out_AWADDR,
        m_axi_data_out_AWID,
        m_axi_data_out_AWLEN,
        m_axi_data_out_AWSIZE,
        m_axi_data_out_AWBURST,
        m_axi_data_out_AWLOCK,
        m_axi_data_out_AWCACHE,
        m_axi_data_out_AWPROT,
        m_axi_data_out_AWQOS,
        m_axi_data_out_AWREGION,
        m_axi_data_out_AWUSER,
        m_axi_data_out_WVALID,
        m_axi_data_out_WREADY,
        m_axi_data_out_WDATA,
        m_axi_data_out_WSTRB,
        m_axi_data_out_WLAST,
        m_axi_data_out_WID,
        m_axi_data_out_WUSER,
        m_axi_data_out_ARVALID,
        m_axi_data_out_ARREADY,
        m_axi_data_out_ARADDR,
        m_axi_data_out_ARID,
        m_axi_data_out_ARLEN,
        m_axi_data_out_ARSIZE,
        m_axi_data_out_ARBURST,
        m_axi_data_out_ARLOCK,
        m_axi_data_out_ARCACHE,
        m_axi_data_out_ARPROT,
        m_axi_data_out_ARQOS,
        m_axi_data_out_ARREGION,
        m_axi_data_out_ARUSER,
        m_axi_data_out_RVALID,
        m_axi_data_out_RREADY,
        m_axi_data_out_RDATA,
        m_axi_data_out_RLAST,
        m_axi_data_out_RID,
        m_axi_data_out_RUSER,
        m_axi_data_out_RRESP,
        m_axi_data_out_BVALID,
        m_axi_data_out_BREADY,
        m_axi_data_out_BRESP,
        m_axi_data_out_BID,
        m_axi_data_out_BUSER,
        data_in_V,
        href_V,
        vsync_V,
        line_valid_V,
        frame_valid_V,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_pp0_stage0 = 21'd32768;
parameter    ap_ST_fsm_state19 = 21'd65536;
parameter    ap_ST_fsm_state20 = 21'd131072;
parameter    ap_ST_fsm_state21 = 21'd262144;
parameter    ap_ST_fsm_state22 = 21'd524288;
parameter    ap_ST_fsm_state23 = 21'd1048576;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_OUT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_OUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_OUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_OUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_OUT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_OUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_OUT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_out_AWVALID;
input   m_axi_data_out_AWREADY;
output  [C_M_AXI_DATA_OUT_ADDR_WIDTH - 1:0] m_axi_data_out_AWADDR;
output  [C_M_AXI_DATA_OUT_ID_WIDTH - 1:0] m_axi_data_out_AWID;
output  [7:0] m_axi_data_out_AWLEN;
output  [2:0] m_axi_data_out_AWSIZE;
output  [1:0] m_axi_data_out_AWBURST;
output  [1:0] m_axi_data_out_AWLOCK;
output  [3:0] m_axi_data_out_AWCACHE;
output  [2:0] m_axi_data_out_AWPROT;
output  [3:0] m_axi_data_out_AWQOS;
output  [3:0] m_axi_data_out_AWREGION;
output  [C_M_AXI_DATA_OUT_AWUSER_WIDTH - 1:0] m_axi_data_out_AWUSER;
output   m_axi_data_out_WVALID;
input   m_axi_data_out_WREADY;
output  [C_M_AXI_DATA_OUT_DATA_WIDTH - 1:0] m_axi_data_out_WDATA;
output  [C_M_AXI_DATA_OUT_WSTRB_WIDTH - 1:0] m_axi_data_out_WSTRB;
output   m_axi_data_out_WLAST;
output  [C_M_AXI_DATA_OUT_ID_WIDTH - 1:0] m_axi_data_out_WID;
output  [C_M_AXI_DATA_OUT_WUSER_WIDTH - 1:0] m_axi_data_out_WUSER;
output   m_axi_data_out_ARVALID;
input   m_axi_data_out_ARREADY;
output  [C_M_AXI_DATA_OUT_ADDR_WIDTH - 1:0] m_axi_data_out_ARADDR;
output  [C_M_AXI_DATA_OUT_ID_WIDTH - 1:0] m_axi_data_out_ARID;
output  [7:0] m_axi_data_out_ARLEN;
output  [2:0] m_axi_data_out_ARSIZE;
output  [1:0] m_axi_data_out_ARBURST;
output  [1:0] m_axi_data_out_ARLOCK;
output  [3:0] m_axi_data_out_ARCACHE;
output  [2:0] m_axi_data_out_ARPROT;
output  [3:0] m_axi_data_out_ARQOS;
output  [3:0] m_axi_data_out_ARREGION;
output  [C_M_AXI_DATA_OUT_ARUSER_WIDTH - 1:0] m_axi_data_out_ARUSER;
input   m_axi_data_out_RVALID;
output   m_axi_data_out_RREADY;
input  [C_M_AXI_DATA_OUT_DATA_WIDTH - 1:0] m_axi_data_out_RDATA;
input   m_axi_data_out_RLAST;
input  [C_M_AXI_DATA_OUT_ID_WIDTH - 1:0] m_axi_data_out_RID;
input  [C_M_AXI_DATA_OUT_RUSER_WIDTH - 1:0] m_axi_data_out_RUSER;
input  [1:0] m_axi_data_out_RRESP;
input   m_axi_data_out_BVALID;
output   m_axi_data_out_BREADY;
input  [1:0] m_axi_data_out_BRESP;
input  [C_M_AXI_DATA_OUT_ID_WIDTH - 1:0] m_axi_data_out_BID;
input  [C_M_AXI_DATA_OUT_BUSER_WIDTH - 1:0] m_axi_data_out_BUSER;
input  [7:0] data_in_V;
input  [0:0] href_V;
input  [0:0] vsync_V;
output  [0:0] line_valid_V;
output  [0:0] frame_valid_V;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg[0:0] line_valid_V;
reg[0:0] frame_valid_V;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] data_out_offset;
reg   [0:0] first;
reg   [31:0] count_lines;
reg   [31:0] count_readings;
reg   [10:0] tmp_address0;
reg    tmp_ce0;
wire   [7:0] tmp_q0;
wire   [10:0] tmp_address1;
reg    tmp_ce1;
reg    tmp_we1;
reg    data_out_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    data_out_blk_n_W;
wire    ap_CS_fsm_state3;
reg    data_out_blk_n_B;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_470;
reg   [0:0] exitcond_reg_470_pp0_iter1_reg;
wire    ap_CS_fsm_state23;
reg   [0:0] first_load_reg_443;
reg   [0:0] or_cond_reg_452;
wire   [0:0] href_V_read_read_fu_134_p2;
reg   [0:0] tmp_4_reg_459;
wire   [0:0] vsync_V_read_read_fu_128_p2;
reg    data_out_AWVALID;
wire    data_out_AWREADY;
reg   [31:0] data_out_AWADDR;
reg   [31:0] data_out_AWLEN;
reg    data_out_WVALID;
wire    data_out_WREADY;
reg   [7:0] data_out_WDATA;
wire    data_out_ARREADY;
wire    data_out_RVALID;
wire   [7:0] data_out_RDATA;
wire    data_out_RLAST;
wire   [0:0] data_out_RID;
wire   [0:0] data_out_RUSER;
wire   [1:0] data_out_RRESP;
wire    data_out_BVALID;
reg    data_out_BREADY;
wire   [1:0] data_out_BRESP;
wire   [0:0] data_out_BID;
wire   [0:0] data_out_BUSER;
reg   [10:0] indvar_reg_233;
reg   [7:0] reg_244;
reg    ap_sig_ioackin_data_out_AWREADY;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state16_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
reg    ap_sig_ioackin_data_out_WREADY;
reg    ap_block_state18_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] data_out_addr_1_reg_437;
wire   [0:0] first_load_load_fu_264_p1;
reg   [31:0] count_lines_load_reg_447;
wire   [0:0] or_cond_fu_290_p2;
wire   [0:0] tmp_4_fu_318_p2;
reg   [31:0] data_out_addr_reg_463;
wire   [0:0] exitcond_fu_395_p2;
wire   [10:0] indvar_next_fu_401_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state16;
wire   [63:0] tmp_2_fu_378_p1;
wire   [63:0] indvar1_fu_407_p1;
wire  signed [63:0] tmp_5_fu_250_p1;
wire  signed [63:0] data_out2_sum_cast_fu_368_p1;
reg    ap_reg_ioackin_data_out_AWREADY;
reg    ap_reg_ioackin_data_out_WREADY;
reg    ap_predicate_op134_writeresp_state23;
reg    ap_block_state23;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] or_cond1_fu_302_p2;
wire   [31:0] tmp_8_fu_418_p2;
wire    ap_CS_fsm_state19;
wire   [31:0] tmp_3_fu_383_p2;
reg   [0:0] frame_valid_V_preg;
reg   [0:0] line_valid_V_preg;
wire  signed [31:0] tmp_5_fu_250_p0;
wire  signed [31:0] tmp_5_cast_fu_254_p0;
wire   [0:0] tmp_1_1_fu_284_p2;
wire   [0:0] p_not_fu_274_p2;
wire   [0:0] tmp_1_fu_296_p2;
wire   [8:0] tmp_1_2_fu_324_p1;
wire   [18:0] p_shl_fu_328_p3;
wire   [16:0] p_shl6_fu_340_p3;
wire   [19:0] p_shl6_cast_fu_348_p1;
wire   [19:0] p_shl_cast_fu_336_p1;
wire   [19:0] offset_fu_352_p2;
wire  signed [32:0] tmp_5_cast_fu_254_p1;
wire   [32:0] tmp_6_cast_fu_358_p1;
wire   [32:0] data_out2_sum_fu_362_p2;
reg   [20:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 first = 1'd1;
#0 count_lines = 32'd0;
#0 count_readings = 32'd0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_data_out_AWREADY = 1'b0;
#0 ap_reg_ioackin_data_out_WREADY = 1'b0;
#0 frame_valid_V_preg = 1'd0;
#0 line_valid_V_preg = 1'd0;
end

ov7670_diretto_tmp #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
tmp_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tmp_address0),
    .ce0(tmp_ce0),
    .q0(tmp_q0),
    .address1(tmp_address1),
    .ce1(tmp_ce1),
    .we1(tmp_we1),
    .d1(data_in_V)
);

ov7670_diretto_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ov7670_diretto_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .data_out_offset(data_out_offset)
);

ov7670_diretto_data_out_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_OUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_OUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_OUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_OUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_OUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_OUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_OUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_OUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_OUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_OUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_OUT_CACHE_VALUE ))
ov7670_diretto_data_out_m_axi_U(
    .AWVALID(m_axi_data_out_AWVALID),
    .AWREADY(m_axi_data_out_AWREADY),
    .AWADDR(m_axi_data_out_AWADDR),
    .AWID(m_axi_data_out_AWID),
    .AWLEN(m_axi_data_out_AWLEN),
    .AWSIZE(m_axi_data_out_AWSIZE),
    .AWBURST(m_axi_data_out_AWBURST),
    .AWLOCK(m_axi_data_out_AWLOCK),
    .AWCACHE(m_axi_data_out_AWCACHE),
    .AWPROT(m_axi_data_out_AWPROT),
    .AWQOS(m_axi_data_out_AWQOS),
    .AWREGION(m_axi_data_out_AWREGION),
    .AWUSER(m_axi_data_out_AWUSER),
    .WVALID(m_axi_data_out_WVALID),
    .WREADY(m_axi_data_out_WREADY),
    .WDATA(m_axi_data_out_WDATA),
    .WSTRB(m_axi_data_out_WSTRB),
    .WLAST(m_axi_data_out_WLAST),
    .WID(m_axi_data_out_WID),
    .WUSER(m_axi_data_out_WUSER),
    .ARVALID(m_axi_data_out_ARVALID),
    .ARREADY(m_axi_data_out_ARREADY),
    .ARADDR(m_axi_data_out_ARADDR),
    .ARID(m_axi_data_out_ARID),
    .ARLEN(m_axi_data_out_ARLEN),
    .ARSIZE(m_axi_data_out_ARSIZE),
    .ARBURST(m_axi_data_out_ARBURST),
    .ARLOCK(m_axi_data_out_ARLOCK),
    .ARCACHE(m_axi_data_out_ARCACHE),
    .ARPROT(m_axi_data_out_ARPROT),
    .ARQOS(m_axi_data_out_ARQOS),
    .ARREGION(m_axi_data_out_ARREGION),
    .ARUSER(m_axi_data_out_ARUSER),
    .RVALID(m_axi_data_out_RVALID),
    .RREADY(m_axi_data_out_RREADY),
    .RDATA(m_axi_data_out_RDATA),
    .RLAST(m_axi_data_out_RLAST),
    .RID(m_axi_data_out_RID),
    .RUSER(m_axi_data_out_RUSER),
    .RRESP(m_axi_data_out_RRESP),
    .BVALID(m_axi_data_out_BVALID),
    .BREADY(m_axi_data_out_BREADY),
    .BRESP(m_axi_data_out_BRESP),
    .BID(m_axi_data_out_BID),
    .BUSER(m_axi_data_out_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(data_out_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_out_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(data_out_RDATA),
    .I_RID(data_out_RID),
    .I_RUSER(data_out_RUSER),
    .I_RRESP(data_out_RRESP),
    .I_RLAST(data_out_RLAST),
    .I_AWVALID(data_out_AWVALID),
    .I_AWREADY(data_out_AWREADY),
    .I_AWADDR(data_out_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(data_out_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(data_out_WVALID),
    .I_WREADY(data_out_WREADY),
    .I_WDATA(data_out_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(data_out_BVALID),
    .I_BREADY(data_out_BREADY),
    .I_BRESP(data_out_BRESP),
    .I_BID(data_out_BID),
    .I_BUSER(data_out_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_sig_ioackin_data_out_AWREADY == 1'b0) | (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state16)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_sig_ioackin_data_out_AWREADY == 1'b0) | (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_data_out_AWREADY <= 1'b0;
    end else begin
        if (((~((ap_sig_ioackin_data_out_AWREADY == 1'b0) | (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | ((ap_sig_ioackin_data_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_sig_ioackin_data_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_data_out_AWREADY <= 1'b0;
        end else if ((((data_out_BVALID == 1'b1) & (data_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((data_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_data_out_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_data_out_WREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_470_pp0_iter1_reg == 1'd0)) | ((ap_sig_ioackin_data_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_sig_ioackin_data_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_data_out_WREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (data_out_WREADY == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_470_pp0_iter1_reg == 1'd0)) | ((data_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((data_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_data_out_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        count_lines <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            count_lines <= tmp_8_fu_418_p2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((or_cond1_fu_302_p2 == 1'd0) & (or_cond_fu_290_p2 == 1'd0) & (first_load_load_fu_264_p1 == 1'd0)) | ((or_cond1_fu_302_p2 == 1'd0) & (or_cond_fu_290_p2 == 1'd0) & (vsync_V == 1'd1))))) begin
            count_lines <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        count_readings <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            count_readings <= 32'd0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (or_cond_fu_290_p2 == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1)) | ((or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1))))) begin
            count_readings <= tmp_3_fu_383_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        first <= 1'd1;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((first_load_load_fu_264_p1 == 1'd0) | (vsync_V == 1'd1)))) begin
            first <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frame_valid_V_preg <= 1'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (or_cond_fu_290_p2 == 1'd1)) | ((or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1))))) begin
            frame_valid_V_preg <= 1'd1;
        end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((or_cond_fu_290_p2 == 1'd0) & (first_load_load_fu_264_p1 == 1'd0)) | ((or_cond_fu_290_p2 == 1'd0) & (vsync_V == 1'd1)))) | ((data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
            frame_valid_V_preg <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        line_valid_V_preg <= 1'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (or_cond_fu_290_p2 == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1)) | ((or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1))))) begin
            line_valid_V_preg <= 1'd1;
        end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((tmp_4_fu_318_p2 == 1'd0) & (first_load_load_fu_264_p1 == 1'd0) & (href_V == 1'd0) & (or_cond_fu_290_p2 == 1'd1)) | ((tmp_4_fu_318_p2 == 1'd0) & (href_V == 1'd0) & (or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1)))) | ((data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
            line_valid_V_preg <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_395_p2 == 1'd0))) begin
        indvar_reg_233 <= indvar_next_fu_401_p2;
    end else if ((~((ap_sig_ioackin_data_out_AWREADY == 1'b0) | (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        indvar_reg_233 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((first_load_load_fu_264_p1 == 1'd0) | (vsync_V == 1'd1)))) begin
        count_lines_load_reg_447 <= count_lines;
        or_cond_reg_452 <= or_cond_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_out_addr_1_reg_437 <= tmp_5_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (href_V == 1'd0) & (tmp_4_fu_318_p2 == 1'd1) & (or_cond_fu_290_p2 == 1'd1)) | ((href_V == 1'd0) & (tmp_4_fu_318_p2 == 1'd1) & (or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1))))) begin
        data_out_addr_reg_463 <= data_out2_sum_cast_fu_368_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_470 <= exitcond_fu_395_p2;
        exitcond_reg_470_pp0_iter1_reg <= exitcond_reg_470;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (vsync_V_read_read_fu_128_p2 == 1'd0))) begin
        first_load_reg_443 <= first;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_470 == 1'd0)) | ((ap_sig_ioackin_data_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        reg_244 <= tmp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (href_V == 1'd0) & (or_cond_fu_290_p2 == 1'd1)) | ((href_V == 1'd0) & (or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1))))) begin
        tmp_4_reg_459 <= tmp_4_fu_318_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_395_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op134_writeresp_state23 == 1'b1) & (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op134_writeresp_state23 == 1'b1) & (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_data_out_AWREADY == 1'b0)) begin
        ap_sig_ioackin_data_out_AWREADY = data_out_AWREADY;
    end else begin
        ap_sig_ioackin_data_out_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_data_out_WREADY == 1'b0)) begin
        ap_sig_ioackin_data_out_WREADY = data_out_WREADY;
    end else begin
        ap_sig_ioackin_data_out_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)))) begin
        data_out_AWADDR = data_out_addr_reg_463;
    end else if (((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_out_AWADDR = data_out_addr_1_reg_437;
    end else begin
        data_out_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        data_out_AWLEN = 32'd1280;
    end else if ((((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_AWLEN = 32'd1;
    end else begin
        data_out_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_data_out_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_AWVALID = 1'b1;
    end else begin
        data_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op134_writeresp_state23 == 1'b1) & (data_out_BVALID == 1'b0)) & (ap_predicate_op134_writeresp_state23 == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | (~((ap_sig_ioackin_data_out_AWREADY == 1'b0) | (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | ((data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        data_out_BREADY = 1'b1;
    end else begin
        data_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_data_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_470_pp0_iter1_reg == 1'd0)) | ((ap_reg_ioackin_data_out_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)))) begin
        data_out_WDATA = reg_244;
    end else if (((ap_reg_ioackin_data_out_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        data_out_WDATA = 8'd0;
    end else begin
        data_out_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_data_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_470_pp0_iter1_reg == 1'd0)) | ((ap_reg_ioackin_data_out_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_reg_ioackin_data_out_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        data_out_WVALID = 1'b1;
    end else begin
        data_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        data_out_blk_n_AW = m_axi_data_out_AWREADY;
    end else begin
        data_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state23) & (((href_V == 1'd0) & (vsync_V == 1'd1) & (tmp_4_reg_459 == 1'd1) & (or_cond_reg_452 == 1'd1)) | ((href_V == 1'd0) & (first_load_reg_443 == 1'd0) & (tmp_4_reg_459 == 1'd1) & (or_cond_reg_452 == 1'd1)))))) begin
        data_out_blk_n_B = m_axi_data_out_BVALID;
    end else begin
        data_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_470_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        data_out_blk_n_W = m_axi_data_out_WREADY;
    end else begin
        data_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (or_cond_fu_290_p2 == 1'd1)) | ((or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1))))) begin
        frame_valid_V = 1'd1;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((or_cond_fu_290_p2 == 1'd0) & (first_load_load_fu_264_p1 == 1'd0)) | ((or_cond_fu_290_p2 == 1'd0) & (vsync_V == 1'd1)))) | ((data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        frame_valid_V = 1'd0;
    end else begin
        frame_valid_V = frame_valid_V_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (or_cond_fu_290_p2 == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1)) | ((or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1))))) begin
        line_valid_V = 1'd1;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((tmp_4_fu_318_p2 == 1'd0) & (first_load_load_fu_264_p1 == 1'd0) & (href_V == 1'd0) & (or_cond_fu_290_p2 == 1'd1)) | ((tmp_4_fu_318_p2 == 1'd0) & (href_V == 1'd0) & (or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1)))) | (~((ap_predicate_op134_writeresp_state23 == 1'b1) & (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state23) & (((href_V == 1'd0) & (vsync_V == 1'd1) & (tmp_4_reg_459 == 1'd1) & (or_cond_reg_452 == 1'd1)) | ((href_V == 1'd0) & (first_load_reg_443 == 1'd0) & (tmp_4_reg_459 == 1'd1) & (or_cond_reg_452 == 1'd1)))) | ((data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        line_valid_V = 1'd0;
    end else begin
        line_valid_V = line_valid_V_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        tmp_address0 = indvar1_fu_407_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_address0 = 11'd0;
    end else begin
        tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        tmp_ce0 = 1'b1;
    end else begin
        tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_ce1 = 1'b1;
    end else begin
        tmp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (or_cond_fu_290_p2 == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1)) | ((or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1))))) begin
        tmp_we1 = 1'b1;
    end else begin
        tmp_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((first_load_load_fu_264_p1 == 1'd0) & (href_V == 1'd0) & (tmp_4_fu_318_p2 == 1'd1) & (or_cond_fu_290_p2 == 1'd1)) | ((href_V == 1'd0) & (tmp_4_fu_318_p2 == 1'd1) & (or_cond_fu_290_p2 == 1'd1) & (vsync_V == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((((((tmp_4_fu_318_p2 == 1'd0) & (first_load_load_fu_264_p1 == 1'd0)) | ((first_load_load_fu_264_p1 == 1'd0) & (href_V_read_read_fu_134_p2 == 1'd1))) | ((or_cond_fu_290_p2 == 1'd0) & (first_load_load_fu_264_p1 == 1'd0))) | ((tmp_4_fu_318_p2 == 1'd0) & (vsync_V == 1'd1))) | ((vsync_V == 1'd1) & (href_V_read_read_fu_134_p2 == 1'd1))) | ((or_cond_fu_290_p2 == 1'd0) & (vsync_V == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (vsync_V_read_read_fu_128_p2 == 1'd0) & (first_load_load_fu_264_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_data_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_data_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((data_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_data_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_sig_ioackin_data_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if ((~((ap_sig_ioackin_data_out_AWREADY == 1'b0) | (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_395_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_395_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if ((~((ap_predicate_op134_writeresp_state23 == 1'b1) & (data_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state16_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((ap_sig_ioackin_data_out_WREADY == 1'b0) & (exitcond_reg_470_pp0_iter1_reg == 1'd0));
end

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23 = ((ap_predicate_op134_writeresp_state23 == 1'b1) & (data_out_BVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op134_writeresp_state23 = (((href_V == 1'd0) & (vsync_V == 1'd1) & (tmp_4_reg_459 == 1'd1) & (or_cond_reg_452 == 1'd1)) | ((href_V == 1'd0) & (first_load_reg_443 == 1'd0) & (tmp_4_reg_459 == 1'd1) & (or_cond_reg_452 == 1'd1)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_out2_sum_cast_fu_368_p1 = $signed(data_out2_sum_fu_362_p2);

assign data_out2_sum_fu_362_p2 = ($signed(tmp_5_cast_fu_254_p1) + $signed(tmp_6_cast_fu_358_p1));

assign exitcond_fu_395_p2 = ((indvar_reg_233 == 11'd1280) ? 1'b1 : 1'b0);

assign first_load_load_fu_264_p1 = first;

assign href_V_read_read_fu_134_p2 = href_V;

assign indvar1_fu_407_p1 = indvar_reg_233;

assign indvar_next_fu_401_p2 = (indvar_reg_233 + 11'd1);

assign offset_fu_352_p2 = (p_shl6_cast_fu_348_p1 + p_shl_cast_fu_336_p1);

assign or_cond1_fu_302_p2 = (tmp_1_fu_296_p2 & p_not_fu_274_p2);

assign or_cond_fu_290_p2 = (tmp_1_1_fu_284_p2 & p_not_fu_274_p2);

assign p_not_fu_274_p2 = (vsync_V ^ 1'd1);

assign p_shl6_cast_fu_348_p1 = p_shl6_fu_340_p3;

assign p_shl6_fu_340_p3 = {{tmp_1_2_fu_324_p1}, {8'd0}};

assign p_shl_cast_fu_336_p1 = p_shl_fu_328_p3;

assign p_shl_fu_328_p3 = {{tmp_1_2_fu_324_p1}, {10'd0}};

assign tmp_1_1_fu_284_p2 = ((count_lines < 32'd480) ? 1'b1 : 1'b0);

assign tmp_1_2_fu_324_p1 = count_lines[8:0];

assign tmp_1_fu_296_p2 = ((count_lines == 32'd480) ? 1'b1 : 1'b0);

assign tmp_2_fu_378_p1 = count_readings;

assign tmp_3_fu_383_p2 = (count_readings + 32'd1);

assign tmp_4_fu_318_p2 = ((count_readings == 32'd1280) ? 1'b1 : 1'b0);

assign tmp_5_cast_fu_254_p0 = data_out_offset;

assign tmp_5_cast_fu_254_p1 = tmp_5_cast_fu_254_p0;

assign tmp_5_fu_250_p0 = data_out_offset;

assign tmp_5_fu_250_p1 = tmp_5_fu_250_p0;

assign tmp_6_cast_fu_358_p1 = offset_fu_352_p2;

assign tmp_8_fu_418_p2 = (count_lines_load_reg_447 + 32'd1);

assign tmp_address1 = tmp_2_fu_378_p1;

assign vsync_V_read_read_fu_128_p2 = vsync_V;

endmodule //ov7670_diretto
