// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ov7670_diretto_HH_
#define _ov7670_diretto_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ov7670_diretto_tmp.h"
#include "ov7670_diretto_AXILiteS_s_axi.h"
#include "ov7670_diretto_data_out_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_DATA_OUT_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_DATA_OUT_ID_WIDTH = 1,
         unsigned int C_M_AXI_DATA_OUT_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_DATA_OUT_DATA_WIDTH = 32,
         unsigned int C_M_AXI_DATA_OUT_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_DATA_OUT_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_DATA_OUT_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_DATA_OUT_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct ov7670_diretto : public sc_module {
    // Port declarations 70
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_data_out_AWVALID;
    sc_in< sc_logic > m_axi_data_out_AWREADY;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_ADDR_WIDTH> > m_axi_data_out_AWADDR;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_ID_WIDTH> > m_axi_data_out_AWID;
    sc_out< sc_lv<8> > m_axi_data_out_AWLEN;
    sc_out< sc_lv<3> > m_axi_data_out_AWSIZE;
    sc_out< sc_lv<2> > m_axi_data_out_AWBURST;
    sc_out< sc_lv<2> > m_axi_data_out_AWLOCK;
    sc_out< sc_lv<4> > m_axi_data_out_AWCACHE;
    sc_out< sc_lv<3> > m_axi_data_out_AWPROT;
    sc_out< sc_lv<4> > m_axi_data_out_AWQOS;
    sc_out< sc_lv<4> > m_axi_data_out_AWREGION;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_AWUSER_WIDTH> > m_axi_data_out_AWUSER;
    sc_out< sc_logic > m_axi_data_out_WVALID;
    sc_in< sc_logic > m_axi_data_out_WREADY;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_DATA_WIDTH> > m_axi_data_out_WDATA;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_DATA_WIDTH/8> > m_axi_data_out_WSTRB;
    sc_out< sc_logic > m_axi_data_out_WLAST;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_ID_WIDTH> > m_axi_data_out_WID;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_WUSER_WIDTH> > m_axi_data_out_WUSER;
    sc_out< sc_logic > m_axi_data_out_ARVALID;
    sc_in< sc_logic > m_axi_data_out_ARREADY;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_ADDR_WIDTH> > m_axi_data_out_ARADDR;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_ID_WIDTH> > m_axi_data_out_ARID;
    sc_out< sc_lv<8> > m_axi_data_out_ARLEN;
    sc_out< sc_lv<3> > m_axi_data_out_ARSIZE;
    sc_out< sc_lv<2> > m_axi_data_out_ARBURST;
    sc_out< sc_lv<2> > m_axi_data_out_ARLOCK;
    sc_out< sc_lv<4> > m_axi_data_out_ARCACHE;
    sc_out< sc_lv<3> > m_axi_data_out_ARPROT;
    sc_out< sc_lv<4> > m_axi_data_out_ARQOS;
    sc_out< sc_lv<4> > m_axi_data_out_ARREGION;
    sc_out< sc_uint<C_M_AXI_DATA_OUT_ARUSER_WIDTH> > m_axi_data_out_ARUSER;
    sc_in< sc_logic > m_axi_data_out_RVALID;
    sc_out< sc_logic > m_axi_data_out_RREADY;
    sc_in< sc_uint<C_M_AXI_DATA_OUT_DATA_WIDTH> > m_axi_data_out_RDATA;
    sc_in< sc_logic > m_axi_data_out_RLAST;
    sc_in< sc_uint<C_M_AXI_DATA_OUT_ID_WIDTH> > m_axi_data_out_RID;
    sc_in< sc_uint<C_M_AXI_DATA_OUT_RUSER_WIDTH> > m_axi_data_out_RUSER;
    sc_in< sc_lv<2> > m_axi_data_out_RRESP;
    sc_in< sc_logic > m_axi_data_out_BVALID;
    sc_out< sc_logic > m_axi_data_out_BREADY;
    sc_in< sc_lv<2> > m_axi_data_out_BRESP;
    sc_in< sc_uint<C_M_AXI_DATA_OUT_ID_WIDTH> > m_axi_data_out_BID;
    sc_in< sc_uint<C_M_AXI_DATA_OUT_BUSER_WIDTH> > m_axi_data_out_BUSER;
    sc_in< sc_lv<8> > data_in_V;
    sc_in< sc_lv<1> > href_V;
    sc_in< sc_lv<1> > vsync_V;
    sc_out< sc_lv<1> > line_valid_V;
    sc_out< sc_lv<1> > frame_valid_V;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const7;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const6;


    // Module declarations
    ov7670_diretto(sc_module_name name);
    SC_HAS_PROCESS(ov7670_diretto);

    ~ov7670_diretto();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    ov7670_diretto_tmp* tmp_U;
    ov7670_diretto_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* ov7670_diretto_AXILiteS_s_axi_U;
    ov7670_diretto_data_out_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_DATA_OUT_ID_WIDTH,C_M_AXI_DATA_OUT_ADDR_WIDTH,C_M_AXI_DATA_OUT_DATA_WIDTH,C_M_AXI_DATA_OUT_AWUSER_WIDTH,C_M_AXI_DATA_OUT_ARUSER_WIDTH,C_M_AXI_DATA_OUT_WUSER_WIDTH,C_M_AXI_DATA_OUT_RUSER_WIDTH,C_M_AXI_DATA_OUT_BUSER_WIDTH,C_M_AXI_DATA_OUT_USER_VALUE,C_M_AXI_DATA_OUT_PROT_VALUE,C_M_AXI_DATA_OUT_CACHE_VALUE>* ov7670_diretto_data_out_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<21> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > data_out_offset;
    sc_signal< sc_lv<1> > first;
    sc_signal< sc_lv<32> > count_lines;
    sc_signal< sc_lv<32> > count_readings;
    sc_signal< sc_lv<11> > tmp_address0;
    sc_signal< sc_logic > tmp_ce0;
    sc_signal< sc_lv<8> > tmp_q0;
    sc_signal< sc_lv<11> > tmp_address1;
    sc_signal< sc_logic > tmp_ce1;
    sc_signal< sc_logic > tmp_we1;
    sc_signal< sc_logic > data_out_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > data_out_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > data_out_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_470;
    sc_signal< sc_lv<1> > exitcond_reg_470_pp0_iter1_reg;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<1> > first_load_reg_443;
    sc_signal< sc_lv<1> > or_cond_reg_452;
    sc_signal< sc_lv<1> > href_V_read_read_fu_134_p2;
    sc_signal< sc_lv<1> > tmp_4_reg_459;
    sc_signal< sc_lv<1> > vsync_V_read_read_fu_128_p2;
    sc_signal< sc_logic > data_out_AWVALID;
    sc_signal< sc_logic > data_out_AWREADY;
    sc_signal< sc_lv<32> > data_out_AWADDR;
    sc_signal< sc_lv<32> > data_out_AWLEN;
    sc_signal< sc_logic > data_out_WVALID;
    sc_signal< sc_logic > data_out_WREADY;
    sc_signal< sc_lv<8> > data_out_WDATA;
    sc_signal< sc_logic > data_out_ARREADY;
    sc_signal< sc_logic > data_out_RVALID;
    sc_signal< sc_lv<8> > data_out_RDATA;
    sc_signal< sc_logic > data_out_RLAST;
    sc_signal< sc_lv<1> > data_out_RID;
    sc_signal< sc_lv<1> > data_out_RUSER;
    sc_signal< sc_lv<2> > data_out_RRESP;
    sc_signal< sc_logic > data_out_BVALID;
    sc_signal< sc_logic > data_out_BREADY;
    sc_signal< sc_lv<2> > data_out_BRESP;
    sc_signal< sc_lv<1> > data_out_BID;
    sc_signal< sc_lv<1> > data_out_BUSER;
    sc_signal< sc_lv<11> > indvar_reg_233;
    sc_signal< sc_lv<8> > reg_244;
    sc_signal< sc_logic > ap_sig_ioackin_data_out_AWREADY;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state16_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state17_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state18_pp0_stage0_iter2;
    sc_signal< sc_logic > ap_sig_ioackin_data_out_WREADY;
    sc_signal< bool > ap_block_state18_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > data_out_addr_1_reg_437;
    sc_signal< sc_lv<1> > first_load_load_fu_264_p1;
    sc_signal< sc_lv<32> > count_lines_load_reg_447;
    sc_signal< sc_lv<1> > or_cond_fu_290_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_318_p2;
    sc_signal< sc_lv<32> > data_out_addr_reg_463;
    sc_signal< sc_lv<1> > exitcond_fu_395_p2;
    sc_signal< sc_lv<11> > indvar_next_fu_401_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state16;
    sc_signal< sc_lv<64> > tmp_2_fu_378_p1;
    sc_signal< sc_lv<64> > indvar1_fu_407_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_250_p1;
    sc_signal< sc_lv<64> > data_out2_sum_cast_fu_368_p1;
    sc_signal< sc_logic > ap_reg_ioackin_data_out_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_data_out_WREADY;
    sc_signal< bool > ap_predicate_op134_writeresp_state23;
    sc_signal< bool > ap_block_state23;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > or_cond1_fu_302_p2;
    sc_signal< sc_lv<32> > tmp_8_fu_418_p2;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_lv<32> > tmp_3_fu_383_p2;
    sc_signal< sc_lv<1> > frame_valid_V_preg;
    sc_signal< sc_lv<1> > line_valid_V_preg;
    sc_signal< sc_lv<32> > tmp_5_fu_250_p0;
    sc_signal< sc_lv<32> > tmp_5_cast_fu_254_p0;
    sc_signal< sc_lv<1> > tmp_1_1_fu_284_p2;
    sc_signal< sc_lv<1> > p_not_fu_274_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_296_p2;
    sc_signal< sc_lv<9> > tmp_1_2_fu_324_p1;
    sc_signal< sc_lv<19> > p_shl_fu_328_p3;
    sc_signal< sc_lv<17> > p_shl6_fu_340_p3;
    sc_signal< sc_lv<20> > p_shl6_cast_fu_348_p1;
    sc_signal< sc_lv<20> > p_shl_cast_fu_336_p1;
    sc_signal< sc_lv<20> > offset_fu_352_p2;
    sc_signal< sc_lv<33> > tmp_5_cast_fu_254_p1;
    sc_signal< sc_lv<33> > tmp_6_cast_fu_358_p1;
    sc_signal< sc_lv<33> > data_out2_sum_fu_362_p2;
    sc_signal< sc_lv<21> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<21> ap_ST_fsm_state1;
    static const sc_lv<21> ap_ST_fsm_state2;
    static const sc_lv<21> ap_ST_fsm_state3;
    static const sc_lv<21> ap_ST_fsm_state4;
    static const sc_lv<21> ap_ST_fsm_state5;
    static const sc_lv<21> ap_ST_fsm_state6;
    static const sc_lv<21> ap_ST_fsm_state7;
    static const sc_lv<21> ap_ST_fsm_state8;
    static const sc_lv<21> ap_ST_fsm_state9;
    static const sc_lv<21> ap_ST_fsm_state10;
    static const sc_lv<21> ap_ST_fsm_state11;
    static const sc_lv<21> ap_ST_fsm_state12;
    static const sc_lv<21> ap_ST_fsm_state13;
    static const sc_lv<21> ap_ST_fsm_state14;
    static const sc_lv<21> ap_ST_fsm_state15;
    static const sc_lv<21> ap_ST_fsm_pp0_stage0;
    static const sc_lv<21> ap_ST_fsm_state19;
    static const sc_lv<21> ap_ST_fsm_state20;
    static const sc_lv<21> ap_ST_fsm_state21;
    static const sc_lv<21> ap_ST_fsm_state22;
    static const sc_lv<21> ap_ST_fsm_state23;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_E;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_14;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_DATA_OUT_USER_VALUE;
    static const int C_M_AXI_DATA_OUT_PROT_VALUE;
    static const int C_M_AXI_DATA_OUT_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_500;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1E0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<11> ap_const_lv11_500;
    static const sc_lv<11> ap_const_lv11_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state16_pp0_stage0_iter0();
    void thread_ap_block_state17_pp0_stage0_iter1();
    void thread_ap_block_state18_io();
    void thread_ap_block_state18_pp0_stage0_iter2();
    void thread_ap_block_state23();
    void thread_ap_condition_pp0_exit_iter0_state16();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_predicate_op134_writeresp_state23();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_data_out_AWREADY();
    void thread_ap_sig_ioackin_data_out_WREADY();
    void thread_data_out2_sum_cast_fu_368_p1();
    void thread_data_out2_sum_fu_362_p2();
    void thread_data_out_AWADDR();
    void thread_data_out_AWLEN();
    void thread_data_out_AWVALID();
    void thread_data_out_BREADY();
    void thread_data_out_WDATA();
    void thread_data_out_WVALID();
    void thread_data_out_blk_n_AW();
    void thread_data_out_blk_n_B();
    void thread_data_out_blk_n_W();
    void thread_exitcond_fu_395_p2();
    void thread_first_load_load_fu_264_p1();
    void thread_frame_valid_V();
    void thread_href_V_read_read_fu_134_p2();
    void thread_indvar1_fu_407_p1();
    void thread_indvar_next_fu_401_p2();
    void thread_line_valid_V();
    void thread_offset_fu_352_p2();
    void thread_or_cond1_fu_302_p2();
    void thread_or_cond_fu_290_p2();
    void thread_p_not_fu_274_p2();
    void thread_p_shl6_cast_fu_348_p1();
    void thread_p_shl6_fu_340_p3();
    void thread_p_shl_cast_fu_336_p1();
    void thread_p_shl_fu_328_p3();
    void thread_tmp_1_1_fu_284_p2();
    void thread_tmp_1_2_fu_324_p1();
    void thread_tmp_1_fu_296_p2();
    void thread_tmp_2_fu_378_p1();
    void thread_tmp_3_fu_383_p2();
    void thread_tmp_4_fu_318_p2();
    void thread_tmp_5_cast_fu_254_p0();
    void thread_tmp_5_cast_fu_254_p1();
    void thread_tmp_5_fu_250_p0();
    void thread_tmp_5_fu_250_p1();
    void thread_tmp_6_cast_fu_358_p1();
    void thread_tmp_8_fu_418_p2();
    void thread_tmp_address0();
    void thread_tmp_address1();
    void thread_tmp_ce0();
    void thread_tmp_ce1();
    void thread_tmp_we1();
    void thread_vsync_V_read_read_fu_128_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
