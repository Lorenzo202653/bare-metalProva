-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ov7670_diretto is
generic (
    C_M_AXI_DATA_OUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_OUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_OUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data_out_AWVALID : OUT STD_LOGIC;
    m_axi_data_out_AWREADY : IN STD_LOGIC;
    m_axi_data_out_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_data_out_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_ID_WIDTH-1 downto 0);
    m_axi_data_out_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_out_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_AWUSER_WIDTH-1 downto 0);
    m_axi_data_out_WVALID : OUT STD_LOGIC;
    m_axi_data_out_WREADY : IN STD_LOGIC;
    m_axi_data_out_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_DATA_WIDTH-1 downto 0);
    m_axi_data_out_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_DATA_WIDTH/8-1 downto 0);
    m_axi_data_out_WLAST : OUT STD_LOGIC;
    m_axi_data_out_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_ID_WIDTH-1 downto 0);
    m_axi_data_out_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_WUSER_WIDTH-1 downto 0);
    m_axi_data_out_ARVALID : OUT STD_LOGIC;
    m_axi_data_out_ARREADY : IN STD_LOGIC;
    m_axi_data_out_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_data_out_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_ID_WIDTH-1 downto 0);
    m_axi_data_out_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_out_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_ARUSER_WIDTH-1 downto 0);
    m_axi_data_out_RVALID : IN STD_LOGIC;
    m_axi_data_out_RREADY : OUT STD_LOGIC;
    m_axi_data_out_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_DATA_WIDTH-1 downto 0);
    m_axi_data_out_RLAST : IN STD_LOGIC;
    m_axi_data_out_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_ID_WIDTH-1 downto 0);
    m_axi_data_out_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_RUSER_WIDTH-1 downto 0);
    m_axi_data_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_out_BVALID : IN STD_LOGIC;
    m_axi_data_out_BREADY : OUT STD_LOGIC;
    m_axi_data_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_out_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_ID_WIDTH-1 downto 0);
    m_axi_data_out_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUT_BUSER_WIDTH-1 downto 0);
    data_in_V : IN STD_LOGIC_VECTOR (7 downto 0);
    href_V : IN STD_LOGIC_VECTOR (0 downto 0);
    vsync_V : IN STD_LOGIC_VECTOR (0 downto 0);
    line_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    frame_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ov7670_diretto is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ov7670_diretto,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=86,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=835,HLS_SYN_LUT=1343,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_out_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal first : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal count_lines : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal count_readings : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tmp_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_ce0 : STD_LOGIC;
    signal tmp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_ce1 : STD_LOGIC;
    signal tmp_we1 : STD_LOGIC;
    signal data_out_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal data_out_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_out_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_470_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal first_load_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_452 : STD_LOGIC_VECTOR (0 downto 0);
    signal href_V_read_read_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal vsync_V_read_read_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_AWVALID : STD_LOGIC;
    signal data_out_AWREADY : STD_LOGIC;
    signal data_out_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_WVALID : STD_LOGIC;
    signal data_out_WREADY : STD_LOGIC;
    signal data_out_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal data_out_ARREADY : STD_LOGIC;
    signal data_out_RVALID : STD_LOGIC;
    signal data_out_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal data_out_RLAST : STD_LOGIC;
    signal data_out_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_out_BVALID : STD_LOGIC;
    signal data_out_BREADY : STD_LOGIC;
    signal data_out_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_out_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_233 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_data_out_AWREADY : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state16_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_data_out_WREADY : STD_LOGIC;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_out_addr_1_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_load_load_fu_264_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_lines_load_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_addr_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_401_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state16 : STD_LOGIC;
    signal tmp_2_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar1_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_out2_sum_cast_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_data_out_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_data_out_WREADY : STD_LOGIC := '0';
    signal ap_predicate_op134_writeresp_state23 : BOOLEAN;
    signal ap_block_state23 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal or_cond1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_3_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_valid_V_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal line_valid_V_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_5_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_2_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_328_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl6_fu_340_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl6_cast_fu_348_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl_cast_fu_336_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal offset_fu_352_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_cast_fu_254_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_cast_fu_358_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal data_out2_sum_fu_362_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component ov7670_diretto_tmp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ov7670_diretto_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data_out_offset : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ov7670_diretto_data_out_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    tmp_U : component ov7670_diretto_tmp
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tmp_address0,
        ce0 => tmp_ce0,
        q0 => tmp_q0,
        address1 => tmp_address1,
        ce1 => tmp_ce1,
        we1 => tmp_we1,
        d1 => data_in_V);

    ov7670_diretto_AXILiteS_s_axi_U : component ov7670_diretto_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data_out_offset => data_out_offset);

    ov7670_diretto_data_out_m_axi_U : component ov7670_diretto_data_out_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_OUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_OUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_OUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_OUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_OUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_OUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_OUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_OUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_OUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_OUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_OUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_out_AWVALID,
        AWREADY => m_axi_data_out_AWREADY,
        AWADDR => m_axi_data_out_AWADDR,
        AWID => m_axi_data_out_AWID,
        AWLEN => m_axi_data_out_AWLEN,
        AWSIZE => m_axi_data_out_AWSIZE,
        AWBURST => m_axi_data_out_AWBURST,
        AWLOCK => m_axi_data_out_AWLOCK,
        AWCACHE => m_axi_data_out_AWCACHE,
        AWPROT => m_axi_data_out_AWPROT,
        AWQOS => m_axi_data_out_AWQOS,
        AWREGION => m_axi_data_out_AWREGION,
        AWUSER => m_axi_data_out_AWUSER,
        WVALID => m_axi_data_out_WVALID,
        WREADY => m_axi_data_out_WREADY,
        WDATA => m_axi_data_out_WDATA,
        WSTRB => m_axi_data_out_WSTRB,
        WLAST => m_axi_data_out_WLAST,
        WID => m_axi_data_out_WID,
        WUSER => m_axi_data_out_WUSER,
        ARVALID => m_axi_data_out_ARVALID,
        ARREADY => m_axi_data_out_ARREADY,
        ARADDR => m_axi_data_out_ARADDR,
        ARID => m_axi_data_out_ARID,
        ARLEN => m_axi_data_out_ARLEN,
        ARSIZE => m_axi_data_out_ARSIZE,
        ARBURST => m_axi_data_out_ARBURST,
        ARLOCK => m_axi_data_out_ARLOCK,
        ARCACHE => m_axi_data_out_ARCACHE,
        ARPROT => m_axi_data_out_ARPROT,
        ARQOS => m_axi_data_out_ARQOS,
        ARREGION => m_axi_data_out_ARREGION,
        ARUSER => m_axi_data_out_ARUSER,
        RVALID => m_axi_data_out_RVALID,
        RREADY => m_axi_data_out_RREADY,
        RDATA => m_axi_data_out_RDATA,
        RLAST => m_axi_data_out_RLAST,
        RID => m_axi_data_out_RID,
        RUSER => m_axi_data_out_RUSER,
        RRESP => m_axi_data_out_RRESP,
        BVALID => m_axi_data_out_BVALID,
        BREADY => m_axi_data_out_BREADY,
        BRESP => m_axi_data_out_BRESP,
        BID => m_axi_data_out_BID,
        BUSER => m_axi_data_out_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data_out_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data_out_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data_out_RDATA,
        I_RID => data_out_RID,
        I_RUSER => data_out_RUSER,
        I_RRESP => data_out_RRESP,
        I_RLAST => data_out_RLAST,
        I_AWVALID => data_out_AWVALID,
        I_AWREADY => data_out_AWREADY,
        I_AWADDR => data_out_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => data_out_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => data_out_WVALID,
        I_WREADY => data_out_WREADY,
        I_WDATA => data_out_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => data_out_BVALID,
        I_BREADY => data_out_BREADY,
        I_BRESP => data_out_BRESP,
        I_BID => data_out_BID,
        I_BUSER => data_out_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_0) or (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state16)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_0) or (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_data_out_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_data_out_AWREADY <= ap_const_logic_0;
            else
                if (((not(((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_0) or (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_data_out_AWREADY <= ap_const_logic_0;
                elsif ((((data_out_BVALID = ap_const_logic_1) and (data_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((data_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((data_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_data_out_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_data_out_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_data_out_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_470_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_sig_ioackin_data_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_sig_ioackin_data_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_data_out_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (data_out_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_470_pp0_iter1_reg = ap_const_lv1_0)) or ((data_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((data_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_data_out_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    count_lines_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                count_lines <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    count_lines <= tmp_8_fu_418_p2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((or_cond1_fu_302_p2 = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_0) and (first_load_load_fu_264_p1 = ap_const_lv1_0)) or ((or_cond1_fu_302_p2 = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_0) and (vsync_V = ap_const_lv1_1))))) then 
                    count_lines <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    count_readings_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                count_readings <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    count_readings <= ap_const_lv32_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1)) or ((or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1))))) then 
                    count_readings <= tmp_3_fu_383_p2;
                end if; 
            end if;
        end if;
    end process;


    first_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                first <= ap_const_lv1_1;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and ((first_load_load_fu_264_p1 = ap_const_lv1_0) or (vsync_V = ap_const_lv1_1)))) then 
                    first <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    frame_valid_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frame_valid_V_preg <= ap_const_lv1_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1)) or ((or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1))))) then 
                    frame_valid_V_preg <= ap_const_lv1_1;
                elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((or_cond_fu_290_p2 = ap_const_lv1_0) and (first_load_load_fu_264_p1 = ap_const_lv1_0)) or ((or_cond_fu_290_p2 = ap_const_lv1_0) and (vsync_V = ap_const_lv1_1)))) or ((data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    frame_valid_V_preg <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    line_valid_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                line_valid_V_preg <= ap_const_lv1_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1)) or ((or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1))))) then 
                    line_valid_V_preg <= ap_const_lv1_1;
                elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((tmp_4_fu_318_p2 = ap_const_lv1_0) and (first_load_load_fu_264_p1 = ap_const_lv1_0) and (href_V = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1)) or ((tmp_4_fu_318_p2 = ap_const_lv1_0) and (href_V = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1)))) or ((data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    line_valid_V_preg <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_fu_395_p2 = ap_const_lv1_0))) then 
                indvar_reg_233 <= indvar_next_fu_401_p2;
            elsif ((not(((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_0) or (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                indvar_reg_233 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and ((first_load_load_fu_264_p1 = ap_const_lv1_0) or (vsync_V = ap_const_lv1_1)))) then
                count_lines_load_reg_447 <= count_lines;
                or_cond_reg_452 <= or_cond_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_out_addr_1_reg_437 <= tmp_5_fu_250_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (href_V = ap_const_lv1_0) and (tmp_4_fu_318_p2 = ap_const_lv1_1) and (or_cond_fu_290_p2 = ap_const_lv1_1)) or ((href_V = ap_const_lv1_0) and (tmp_4_fu_318_p2 = ap_const_lv1_1) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1))))) then
                data_out_addr_reg_463 <= data_out2_sum_cast_fu_368_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_470 <= exitcond_fu_395_p2;
                exitcond_reg_470_pp0_iter1_reg <= exitcond_reg_470;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (vsync_V_read_read_fu_128_p2 = ap_const_lv1_0))) then
                first_load_reg_443 <= first;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_470 = ap_const_lv1_0)) or ((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then
                reg_244 <= tmp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (href_V = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1)) or ((href_V = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1))))) then
                tmp_4_reg_459 <= tmp_4_fu_318_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, href_V, vsync_V, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_enable_reg_pp0_iter2, ap_CS_fsm_state23, href_V_read_read_fu_134_p2, vsync_V_read_read_fu_128_p2, data_out_BVALID, ap_sig_ioackin_data_out_AWREADY, ap_enable_reg_pp0_iter1, ap_sig_ioackin_data_out_WREADY, first_load_load_fu_264_p1, or_cond_fu_290_p2, tmp_4_fu_318_p2, exitcond_fu_395_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_predicate_op134_writeresp_state23)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (href_V = ap_const_lv1_0) and (tmp_4_fu_318_p2 = ap_const_lv1_1) and (or_cond_fu_290_p2 = ap_const_lv1_1)) or ((href_V = ap_const_lv1_0) and (tmp_4_fu_318_p2 = ap_const_lv1_1) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((((((tmp_4_fu_318_p2 = ap_const_lv1_0) and (first_load_load_fu_264_p1 = ap_const_lv1_0)) or ((first_load_load_fu_264_p1 = ap_const_lv1_0) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1))) or ((or_cond_fu_290_p2 = ap_const_lv1_0) and (first_load_load_fu_264_p1 = ap_const_lv1_0))) or ((tmp_4_fu_318_p2 = ap_const_lv1_0) and (vsync_V = ap_const_lv1_1))) or ((vsync_V = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1))) or ((or_cond_fu_290_p2 = ap_const_lv1_0) and (vsync_V = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (vsync_V_read_read_fu_128_p2 = ap_const_lv1_0) and (first_load_load_fu_264_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_sig_ioackin_data_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_sig_ioackin_data_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if ((not(((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_0) or (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_395_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_395_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if ((not(((ap_predicate_op134_writeresp_state23 = ap_const_boolean_1) and (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state18_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state18_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state16_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(exitcond_reg_470_pp0_iter1_reg, ap_sig_ioackin_data_out_WREADY)
    begin
                ap_block_state18_io <= ((ap_sig_ioackin_data_out_WREADY = ap_const_logic_0) and (exitcond_reg_470_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_assign_proc : process(data_out_BVALID, ap_predicate_op134_writeresp_state23)
    begin
                ap_block_state23 <= ((ap_predicate_op134_writeresp_state23 = ap_const_boolean_1) and (data_out_BVALID = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state16_assign_proc : process(exitcond_fu_395_p2)
    begin
        if ((exitcond_fu_395_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23, data_out_BVALID, ap_predicate_op134_writeresp_state23)
    begin
        if ((not(((ap_predicate_op134_writeresp_state23 = ap_const_boolean_1) and (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op134_writeresp_state23_assign_proc : process(href_V, vsync_V, first_load_reg_443, or_cond_reg_452, tmp_4_reg_459)
    begin
                ap_predicate_op134_writeresp_state23 <= (((href_V = ap_const_lv1_0) and (vsync_V = ap_const_lv1_1) and (tmp_4_reg_459 = ap_const_lv1_1) and (or_cond_reg_452 = ap_const_lv1_1)) or ((href_V = ap_const_lv1_0) and (first_load_reg_443 = ap_const_lv1_0) and (tmp_4_reg_459 = ap_const_lv1_1) and (or_cond_reg_452 = ap_const_lv1_1)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, data_out_BVALID, ap_predicate_op134_writeresp_state23)
    begin
        if ((not(((ap_predicate_op134_writeresp_state23 = ap_const_boolean_1) and (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_data_out_AWREADY_assign_proc : process(data_out_AWREADY, ap_reg_ioackin_data_out_AWREADY)
    begin
        if ((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_data_out_AWREADY <= data_out_AWREADY;
        else 
            ap_sig_ioackin_data_out_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_data_out_WREADY_assign_proc : process(data_out_WREADY, ap_reg_ioackin_data_out_WREADY)
    begin
        if ((ap_reg_ioackin_data_out_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_data_out_WREADY <= data_out_WREADY;
        else 
            ap_sig_ioackin_data_out_WREADY <= ap_const_logic_1;
        end if; 
    end process;

        data_out2_sum_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_out2_sum_fu_362_p2),64));

    data_out2_sum_fu_362_p2 <= std_logic_vector(signed(tmp_5_cast_fu_254_p1) + signed(tmp_6_cast_fu_358_p1));

    data_out_AWADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state15, data_out_BVALID, data_out_addr_1_reg_437, data_out_addr_reg_463, ap_reg_ioackin_data_out_AWREADY)
    begin
        if ((((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            data_out_AWADDR <= data_out_addr_reg_463;
        elsif (((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_out_AWADDR <= data_out_addr_1_reg_437;
        else 
            data_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_AWLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state15, data_out_BVALID, ap_reg_ioackin_data_out_AWREADY)
    begin
        if (((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            data_out_AWLEN <= ap_const_lv32_500;
        elsif ((((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_out_AWLEN <= ap_const_lv32_1;
        else 
            data_out_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state15, data_out_BVALID, ap_reg_ioackin_data_out_AWREADY)
    begin
        if ((((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_data_out_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_out_AWVALID <= ap_const_logic_1;
        else 
            data_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_out_BREADY_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state23, data_out_BVALID, ap_sig_ioackin_data_out_AWREADY, ap_predicate_op134_writeresp_state23)
    begin
        if (((not(((ap_predicate_op134_writeresp_state23 = ap_const_boolean_1) and (data_out_BVALID = ap_const_logic_0))) and (ap_predicate_op134_writeresp_state23 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((ap_sig_ioackin_data_out_AWREADY = ap_const_logic_0) or (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            data_out_BREADY <= ap_const_logic_1;
        else 
            data_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_out_WDATA_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_enable_reg_pp0_iter2, exitcond_reg_470_pp0_iter1_reg, reg_244, ap_reg_ioackin_data_out_WREADY, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_data_out_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_470_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_reg_ioackin_data_out_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            data_out_WDATA <= reg_244;
        elsif (((ap_reg_ioackin_data_out_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_out_WDATA <= ap_const_lv8_0;
        else 
            data_out_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    data_out_WVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_enable_reg_pp0_iter2, exitcond_reg_470_pp0_iter1_reg, ap_reg_ioackin_data_out_WREADY, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_data_out_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_470_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_reg_ioackin_data_out_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_reg_ioackin_data_out_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data_out_WVALID <= ap_const_logic_1;
        else 
            data_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_out_blk_n_AW_assign_proc : process(m_axi_data_out_AWREADY, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_out_blk_n_AW <= m_axi_data_out_AWREADY;
        else 
            data_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data_out_blk_n_B_assign_proc : process(m_axi_data_out_BVALID, href_V, vsync_V, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state23, first_load_reg_443, or_cond_reg_452, tmp_4_reg_459)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (((href_V = ap_const_lv1_0) and (vsync_V = ap_const_lv1_1) and (tmp_4_reg_459 = ap_const_lv1_1) and (or_cond_reg_452 = ap_const_lv1_1)) or ((href_V = ap_const_lv1_0) and (first_load_reg_443 = ap_const_lv1_0) and (tmp_4_reg_459 = ap_const_lv1_1) and (or_cond_reg_452 = ap_const_lv1_1)))))) then 
            data_out_blk_n_B <= m_axi_data_out_BVALID;
        else 
            data_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data_out_blk_n_W_assign_proc : process(m_axi_data_out_WREADY, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, exitcond_reg_470_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_470_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            data_out_blk_n_W <= m_axi_data_out_WREADY;
        else 
            data_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_395_p2 <= "1" when (indvar_reg_233 = ap_const_lv11_500) else "0";
    first_load_load_fu_264_p1 <= first;

    frame_valid_V_assign_proc : process(ap_start, ap_CS_fsm_state1, vsync_V, ap_CS_fsm_state8, data_out_BVALID, first_load_load_fu_264_p1, or_cond_fu_290_p2, frame_valid_V_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1)) or ((or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1))))) then 
            frame_valid_V <= ap_const_lv1_1;
        elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((or_cond_fu_290_p2 = ap_const_lv1_0) and (first_load_load_fu_264_p1 = ap_const_lv1_0)) or ((or_cond_fu_290_p2 = ap_const_lv1_0) and (vsync_V = ap_const_lv1_1)))) or ((data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            frame_valid_V <= ap_const_lv1_0;
        else 
            frame_valid_V <= frame_valid_V_preg;
        end if; 
    end process;

    href_V_read_read_fu_134_p2 <= href_V;
    indvar1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_233),64));
    indvar_next_fu_401_p2 <= std_logic_vector(unsigned(indvar_reg_233) + unsigned(ap_const_lv11_1));

    line_valid_V_assign_proc : process(ap_start, ap_CS_fsm_state1, href_V, vsync_V, ap_CS_fsm_state8, ap_CS_fsm_state23, first_load_reg_443, or_cond_reg_452, href_V_read_read_fu_134_p2, tmp_4_reg_459, data_out_BVALID, first_load_load_fu_264_p1, or_cond_fu_290_p2, tmp_4_fu_318_p2, ap_predicate_op134_writeresp_state23, line_valid_V_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1)) or ((or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1))))) then 
            line_valid_V <= ap_const_lv1_1;
        elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((tmp_4_fu_318_p2 = ap_const_lv1_0) and (first_load_load_fu_264_p1 = ap_const_lv1_0) and (href_V = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1)) or ((tmp_4_fu_318_p2 = ap_const_lv1_0) and (href_V = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1)))) or (not(((ap_predicate_op134_writeresp_state23 = ap_const_boolean_1) and (data_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23) and (((href_V = ap_const_lv1_0) and (vsync_V = ap_const_lv1_1) and (tmp_4_reg_459 = ap_const_lv1_1) and (or_cond_reg_452 = ap_const_lv1_1)) or ((href_V = ap_const_lv1_0) and (first_load_reg_443 = ap_const_lv1_0) and (tmp_4_reg_459 = ap_const_lv1_1) and (or_cond_reg_452 = ap_const_lv1_1)))) or ((data_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            line_valid_V <= ap_const_lv1_0;
        else 
            line_valid_V <= line_valid_V_preg;
        end if; 
    end process;

    offset_fu_352_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_348_p1) + unsigned(p_shl_cast_fu_336_p1));
    or_cond1_fu_302_p2 <= (tmp_1_fu_296_p2 and p_not_fu_274_p2);
    or_cond_fu_290_p2 <= (tmp_1_1_fu_284_p2 and p_not_fu_274_p2);
    p_not_fu_274_p2 <= (vsync_V xor ap_const_lv1_1);
    p_shl6_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_340_p3),20));
    p_shl6_fu_340_p3 <= (tmp_1_2_fu_324_p1 & ap_const_lv8_0);
    p_shl_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_328_p3),20));
    p_shl_fu_328_p3 <= (tmp_1_2_fu_324_p1 & ap_const_lv10_0);
    tmp_1_1_fu_284_p2 <= "1" when (unsigned(count_lines) < unsigned(ap_const_lv32_1E0)) else "0";
    tmp_1_2_fu_324_p1 <= count_lines(9 - 1 downto 0);
    tmp_1_fu_296_p2 <= "1" when (count_lines = ap_const_lv32_1E0) else "0";
    tmp_2_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_readings),64));
    tmp_3_fu_383_p2 <= std_logic_vector(unsigned(count_readings) + unsigned(ap_const_lv32_1));
    tmp_4_fu_318_p2 <= "1" when (count_readings = ap_const_lv32_500) else "0";
    tmp_5_cast_fu_254_p0 <= data_out_offset;
        tmp_5_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_cast_fu_254_p0),33));

    tmp_5_fu_250_p0 <= data_out_offset;
        tmp_5_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_250_p0),64));

    tmp_6_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_fu_352_p2),33));
    tmp_8_fu_418_p2 <= std_logic_vector(unsigned(count_lines_load_reg_447) + unsigned(ap_const_lv32_1));

    tmp_address0_assign_proc : process(ap_CS_fsm_state1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, indvar1_fu_407_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            tmp_address0 <= indvar1_fu_407_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tmp_address0 <= ap_const_lv11_0;
        else 
            tmp_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    tmp_address1 <= tmp_2_fu_378_p1(11 - 1 downto 0);

    tmp_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_ce1 <= ap_const_logic_1;
        else 
            tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, vsync_V, href_V_read_read_fu_134_p2, first_load_load_fu_264_p1, or_cond_fu_290_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((first_load_load_fu_264_p1 = ap_const_lv1_0) and (or_cond_fu_290_p2 = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1)) or ((or_cond_fu_290_p2 = ap_const_lv1_1) and (vsync_V = ap_const_lv1_1) and (href_V_read_read_fu_134_p2 = ap_const_lv1_1))))) then 
            tmp_we1 <= ap_const_logic_1;
        else 
            tmp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    vsync_V_read_read_fu_128_p2 <= vsync_V;
end behav;
