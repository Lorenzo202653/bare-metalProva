// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ov7670_memcpy.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ov7670_memcpy::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ov7670_memcpy::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state1 = "1";
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state2 = "10";
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state3 = "100";
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state4 = "1000";
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state5 = "10000";
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state6 = "100000";
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> ov7670_memcpy::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> ov7670_memcpy::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ov7670_memcpy::ap_const_boolean_1 = true;
const sc_lv<1> ov7670_memcpy::ap_const_lv1_1 = "1";
const sc_lv<32> ov7670_memcpy::ap_const_lv32_2 = "10";
const sc_lv<32> ov7670_memcpy::ap_const_lv32_3 = "11";
const sc_lv<32> ov7670_memcpy::ap_const_lv32_8 = "1000";
const int ov7670_memcpy::C_S_AXI_DATA_WIDTH = "100000";
const int ov7670_memcpy::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_memcpy::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_memcpy::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int ov7670_memcpy::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> ov7670_memcpy::ap_const_lv32_1 = "1";
const sc_lv<1> ov7670_memcpy::ap_const_lv1_0 = "0";
const sc_lv<3> ov7670_memcpy::ap_const_lv3_0 = "000";
const sc_lv<2> ov7670_memcpy::ap_const_lv2_0 = "00";
const sc_lv<4> ov7670_memcpy::ap_const_lv4_0 = "0000";
const sc_lv<32> ov7670_memcpy::ap_const_lv32_1E0 = "111100000";
const sc_lv<32> ov7670_memcpy::ap_const_lv32_500 = "10100000000";
const sc_lv<10> ov7670_memcpy::ap_const_lv10_0 = "0000000000";
const sc_lv<8> ov7670_memcpy::ap_const_lv8_0 = "00000000";

ov7670_memcpy::ov7670_memcpy(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ov7670_memcpy_AXILiteS_s_axi_U = new ov7670_memcpy_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("ov7670_memcpy_AXILiteS_s_axi_U");
    ov7670_memcpy_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    ov7670_memcpy_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    ov7670_memcpy_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    ov7670_memcpy_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    ov7670_memcpy_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    ov7670_memcpy_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    ov7670_memcpy_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    ov7670_memcpy_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    ov7670_memcpy_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    ov7670_memcpy_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    ov7670_memcpy_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    ov7670_memcpy_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    ov7670_memcpy_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    ov7670_memcpy_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    ov7670_memcpy_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    ov7670_memcpy_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    ov7670_memcpy_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    ov7670_memcpy_AXILiteS_s_axi_U->ACLK(ap_clk);
    ov7670_memcpy_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    ov7670_memcpy_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    ov7670_memcpy_AXILiteS_s_axi_U->ap_start(ap_start);
    ov7670_memcpy_AXILiteS_s_axi_U->interrupt(interrupt);
    ov7670_memcpy_AXILiteS_s_axi_U->ap_ready(ap_ready);
    ov7670_memcpy_AXILiteS_s_axi_U->ap_done(ap_done);
    ov7670_memcpy_AXILiteS_s_axi_U->ap_idle(ap_idle);
    ov7670_memcpy_AXILiteS_s_axi_U->data_out(data_out);
    ov7670_memcpy_gmem_m_axi_U = new ov7670_memcpy_gmem_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("ov7670_memcpy_gmem_m_axi_U");
    ov7670_memcpy_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    ov7670_memcpy_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    ov7670_memcpy_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    ov7670_memcpy_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    ov7670_memcpy_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    ov7670_memcpy_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    ov7670_memcpy_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    ov7670_memcpy_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    ov7670_memcpy_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    ov7670_memcpy_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    ov7670_memcpy_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    ov7670_memcpy_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    ov7670_memcpy_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    ov7670_memcpy_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    ov7670_memcpy_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    ov7670_memcpy_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    ov7670_memcpy_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    ov7670_memcpy_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    ov7670_memcpy_gmem_m_axi_U->WID(m_axi_gmem_WID);
    ov7670_memcpy_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    ov7670_memcpy_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    ov7670_memcpy_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    ov7670_memcpy_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    ov7670_memcpy_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    ov7670_memcpy_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    ov7670_memcpy_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    ov7670_memcpy_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    ov7670_memcpy_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    ov7670_memcpy_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    ov7670_memcpy_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    ov7670_memcpy_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    ov7670_memcpy_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    ov7670_memcpy_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    ov7670_memcpy_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    ov7670_memcpy_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    ov7670_memcpy_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    ov7670_memcpy_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    ov7670_memcpy_gmem_m_axi_U->RID(m_axi_gmem_RID);
    ov7670_memcpy_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    ov7670_memcpy_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    ov7670_memcpy_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    ov7670_memcpy_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    ov7670_memcpy_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    ov7670_memcpy_gmem_m_axi_U->BID(m_axi_gmem_BID);
    ov7670_memcpy_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    ov7670_memcpy_gmem_m_axi_U->ACLK(ap_clk);
    ov7670_memcpy_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    ov7670_memcpy_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    ov7670_memcpy_gmem_m_axi_U->I_ARVALID(ap_var_for_const1);
    ov7670_memcpy_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    ov7670_memcpy_gmem_m_axi_U->I_ARADDR(ap_var_for_const2);
    ov7670_memcpy_gmem_m_axi_U->I_ARID(ap_var_for_const3);
    ov7670_memcpy_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    ov7670_memcpy_gmem_m_axi_U->I_ARSIZE(ap_var_for_const4);
    ov7670_memcpy_gmem_m_axi_U->I_ARLOCK(ap_var_for_const5);
    ov7670_memcpy_gmem_m_axi_U->I_ARCACHE(ap_var_for_const6);
    ov7670_memcpy_gmem_m_axi_U->I_ARQOS(ap_var_for_const6);
    ov7670_memcpy_gmem_m_axi_U->I_ARPROT(ap_var_for_const4);
    ov7670_memcpy_gmem_m_axi_U->I_ARUSER(ap_var_for_const3);
    ov7670_memcpy_gmem_m_axi_U->I_ARBURST(ap_var_for_const5);
    ov7670_memcpy_gmem_m_axi_U->I_ARREGION(ap_var_for_const6);
    ov7670_memcpy_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    ov7670_memcpy_gmem_m_axi_U->I_RREADY(ap_var_for_const1);
    ov7670_memcpy_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    ov7670_memcpy_gmem_m_axi_U->I_RID(gmem_RID);
    ov7670_memcpy_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    ov7670_memcpy_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    ov7670_memcpy_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    ov7670_memcpy_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    ov7670_memcpy_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    ov7670_memcpy_gmem_m_axi_U->I_AWADDR(gmem_addr_reg_351);
    ov7670_memcpy_gmem_m_axi_U->I_AWID(ap_var_for_const3);
    ov7670_memcpy_gmem_m_axi_U->I_AWLEN(ap_var_for_const7);
    ov7670_memcpy_gmem_m_axi_U->I_AWSIZE(ap_var_for_const4);
    ov7670_memcpy_gmem_m_axi_U->I_AWLOCK(ap_var_for_const5);
    ov7670_memcpy_gmem_m_axi_U->I_AWCACHE(ap_var_for_const6);
    ov7670_memcpy_gmem_m_axi_U->I_AWQOS(ap_var_for_const6);
    ov7670_memcpy_gmem_m_axi_U->I_AWPROT(ap_var_for_const4);
    ov7670_memcpy_gmem_m_axi_U->I_AWUSER(ap_var_for_const3);
    ov7670_memcpy_gmem_m_axi_U->I_AWBURST(ap_var_for_const5);
    ov7670_memcpy_gmem_m_axi_U->I_AWREGION(ap_var_for_const6);
    ov7670_memcpy_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    ov7670_memcpy_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    ov7670_memcpy_gmem_m_axi_U->I_WDATA(data_in_assign_fu_86);
    ov7670_memcpy_gmem_m_axi_U->I_WID(ap_var_for_const3);
    ov7670_memcpy_gmem_m_axi_U->I_WUSER(ap_var_for_const3);
    ov7670_memcpy_gmem_m_axi_U->I_WLAST(ap_var_for_const1);
    ov7670_memcpy_gmem_m_axi_U->I_WSTRB(ap_var_for_const8);
    ov7670_memcpy_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    ov7670_memcpy_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    ov7670_memcpy_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    ov7670_memcpy_gmem_m_axi_U->I_BID(gmem_BID);
    ov7670_memcpy_gmem_m_axi_U->I_BUSER(gmem_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state9);
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_predicate_op88_writeresp_state9 );

    SC_METHOD(thread_ap_condition_302);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge_fu_175_p2 );
    sensitive << ( or_cond_fu_199_p2 );

    SC_METHOD(thread_ap_condition_444);
    sensitive << ( href_V_read_read_fu_108_p2 );
    sensitive << ( or_cond_fu_199_p2 );
    sensitive << ( tmp_9_fu_227_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_predicate_op88_writeresp_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op88_writeresp_state9);
    sensitive << ( href_V );
    sensitive << ( brmerge_reg_337 );
    sensitive << ( or_cond_reg_341 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_predicate_op88_writeresp_state9 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_brmerge_fu_175_p2);
    sensitive << ( vsync_V );
    sensitive << ( p_not1_fu_169_p2 );

    SC_METHOD(thread_data_out2_sum_cast_fu_305_p1);
    sensitive << ( data_out2_sum_fu_299_p2 );

    SC_METHOD(thread_data_out2_sum_fu_299_p2);
    sensitive << ( tmp_1_cast_fu_157_p1 );
    sensitive << ( tmp_7_cast_fu_295_p1 );

    SC_METHOD(thread_frame_valid_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge_fu_175_p2 );
    sensitive << ( or_cond_fu_199_p2 );
    sensitive << ( frame_valid_V_preg );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_predicate_op88_writeresp_state9 );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( href_V );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( brmerge_reg_337 );
    sensitive << ( or_cond_reg_341 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_href_V_read_read_fu_108_p2);
    sensitive << ( href_V );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_line_valid_V);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( href_V_read_read_fu_108_p2 );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge_fu_175_p2 );
    sensitive << ( or_cond_fu_199_p2 );
    sensitive << ( ap_predicate_op88_writeresp_state9 );

    SC_METHOD(thread_or_cond1_fu_211_p2);
    sensitive << ( p_not_fu_187_p2 );
    sensitive << ( tmp_3_fu_205_p2 );

    SC_METHOD(thread_or_cond_fu_199_p2);
    sensitive << ( tmp_2_fu_193_p2 );
    sensitive << ( p_not_fu_187_p2 );

    SC_METHOD(thread_p_not1_fu_169_p2);
    sensitive << ( first );

    SC_METHOD(thread_p_not_fu_187_p2);
    sensitive << ( vsync_V );

    SC_METHOD(thread_p_shl1_cast_fu_275_p1);
    sensitive << ( p_shl1_fu_267_p3 );

    SC_METHOD(thread_p_shl1_fu_267_p3);
    sensitive << ( tmp_1_fu_251_p1 );

    SC_METHOD(thread_p_shl_cast_fu_263_p1);
    sensitive << ( p_shl_fu_255_p3 );

    SC_METHOD(thread_p_shl_fu_255_p3);
    sensitive << ( tmp_1_fu_251_p1 );

    SC_METHOD(thread_tmp1_cast_fu_285_p1);
    sensitive << ( tmp1_fu_279_p2 );

    SC_METHOD(thread_tmp1_fu_279_p2);
    sensitive << ( p_shl_cast_fu_263_p1 );
    sensitive << ( p_shl1_cast_fu_275_p1 );

    SC_METHOD(thread_tmp_1_cast_fu_157_p1);
    sensitive << ( data_out );

    SC_METHOD(thread_tmp_1_fu_251_p1);
    sensitive << ( count_lines );

    SC_METHOD(thread_tmp_2_fu_193_p2);
    sensitive << ( count_lines );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge_fu_175_p2 );

    SC_METHOD(thread_tmp_3_fu_205_p2);
    sensitive << ( count_lines );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge_fu_175_p2 );
    sensitive << ( or_cond_fu_199_p2 );

    SC_METHOD(thread_tmp_6_fu_289_p2);
    sensitive << ( count_readings );
    sensitive << ( tmp1_cast_fu_285_p1 );

    SC_METHOD(thread_tmp_7_cast_fu_295_p1);
    sensitive << ( tmp_6_fu_289_p2 );

    SC_METHOD(thread_tmp_8_fu_315_p2);
    sensitive << ( count_readings );

    SC_METHOD(thread_tmp_9_fu_227_p2);
    sensitive << ( count_readings );
    sensitive << ( href_V_read_read_fu_108_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge_fu_175_p2 );
    sensitive << ( or_cond_fu_199_p2 );

    SC_METHOD(thread_tmp_s_fu_239_p2);
    sensitive << ( count_lines );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( href_V );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge_fu_175_p2 );
    sensitive << ( or_cond_fu_199_p2 );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( ap_predicate_op88_writeresp_state9 );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    ap_CS_fsm = "000000001";
    count_lines = "00000000000000000000000000000000";
    first = "1";
    count_readings = "00000000000000000000000000000000";
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    frame_valid_V_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ov7670_memcpy_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, data_in, "(port)data_in");
    sc_trace(mVcdFile, href_V, "(port)href_V");
    sc_trace(mVcdFile, vsync_V, "(port)vsync_V");
    sc_trace(mVcdFile, line_valid_V, "(port)line_valid_V");
    sc_trace(mVcdFile, frame_valid_V, "(port)frame_valid_V");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, data_out, "data_out");
    sc_trace(mVcdFile, count_lines, "count_lines");
    sc_trace(mVcdFile, first, "first");
    sc_trace(mVcdFile, count_readings, "count_readings");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, brmerge_reg_337, "brmerge_reg_337");
    sc_trace(mVcdFile, or_cond_reg_341, "or_cond_reg_341");
    sc_trace(mVcdFile, href_V_read_read_fu_108_p2, "href_V_read_read_fu_108_p2");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, brmerge_fu_175_p2, "brmerge_fu_175_p2");
    sc_trace(mVcdFile, or_cond_fu_199_p2, "or_cond_fu_199_p2");
    sc_trace(mVcdFile, gmem_addr_reg_351, "gmem_addr_reg_351");
    sc_trace(mVcdFile, data_out2_sum_cast_fu_305_p1, "data_out2_sum_cast_fu_305_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_predicate_op88_writeresp_state9, "ap_predicate_op88_writeresp_state9");
    sc_trace(mVcdFile, ap_block_state9, "ap_block_state9");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, or_cond1_fu_211_p2, "or_cond1_fu_211_p2");
    sc_trace(mVcdFile, tmp_s_fu_239_p2, "tmp_s_fu_239_p2");
    sc_trace(mVcdFile, tmp_9_fu_227_p2, "tmp_9_fu_227_p2");
    sc_trace(mVcdFile, tmp_8_fu_315_p2, "tmp_8_fu_315_p2");
    sc_trace(mVcdFile, data_in_assign_fu_86, "data_in_assign_fu_86");
    sc_trace(mVcdFile, frame_valid_V_preg, "frame_valid_V_preg");
    sc_trace(mVcdFile, p_not1_fu_169_p2, "p_not1_fu_169_p2");
    sc_trace(mVcdFile, tmp_2_fu_193_p2, "tmp_2_fu_193_p2");
    sc_trace(mVcdFile, p_not_fu_187_p2, "p_not_fu_187_p2");
    sc_trace(mVcdFile, tmp_3_fu_205_p2, "tmp_3_fu_205_p2");
    sc_trace(mVcdFile, tmp_1_fu_251_p1, "tmp_1_fu_251_p1");
    sc_trace(mVcdFile, p_shl_fu_255_p3, "p_shl_fu_255_p3");
    sc_trace(mVcdFile, p_shl1_fu_267_p3, "p_shl1_fu_267_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_263_p1, "p_shl_cast_fu_263_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_275_p1, "p_shl1_cast_fu_275_p1");
    sc_trace(mVcdFile, tmp1_fu_279_p2, "tmp1_fu_279_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_285_p1, "tmp1_cast_fu_285_p1");
    sc_trace(mVcdFile, tmp_6_fu_289_p2, "tmp_6_fu_289_p2");
    sc_trace(mVcdFile, tmp_1_cast_fu_157_p1, "tmp_1_cast_fu_157_p1");
    sc_trace(mVcdFile, tmp_7_cast_fu_295_p1, "tmp_7_cast_fu_295_p1");
    sc_trace(mVcdFile, data_out2_sum_fu_299_p2, "data_out2_sum_fu_299_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_444, "ap_condition_444");
    sc_trace(mVcdFile, ap_condition_302, "ap_condition_302");
#endif

    }
    mHdltvinHandle.open("ov7670_memcpy.hdltvin.dat");
    mHdltvoutHandle.open("ov7670_memcpy.hdltvout.dat");
}

ov7670_memcpy::~ov7670_memcpy() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ov7670_memcpy_AXILiteS_s_axi_U;
    delete ov7670_memcpy_gmem_m_axi_U;
}

void ov7670_memcpy::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ov7670_memcpy::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void ov7670_memcpy::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void ov7670_memcpy::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv1_1;
}

void ov7670_memcpy::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_1;
}

void ov7670_memcpy::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void ov7670_memcpy::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void ov7670_memcpy::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void ov7670_memcpy::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void ov7670_memcpy::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read())) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        count_lines = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_condition_444.read(), ap_const_boolean_1)) {
                count_lines = tmp_s_fu_239_p2.read();
            } else if ((esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_0) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, or_cond1_fu_211_p2.read()))) {
                count_lines = ap_const_lv32_0;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        count_readings = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_302.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(href_V.read(), ap_const_lv1_1)) {
                count_readings = tmp_8_fu_315_p2.read();
            } else if ((esl_seteq<1,1,1>(href_V_read_read_fu_108_p2.read(), ap_const_lv1_0) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_fu_227_p2.read()))) {
                count_readings = ap_const_lv32_0;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        first = ap_const_lv1_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1))) {
            first = ap_const_lv1_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        frame_valid_V_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_1))) {
            frame_valid_V_preg = ap_const_lv1_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_0)))) {
            frame_valid_V_preg = ap_const_lv1_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        brmerge_reg_337 = brmerge_fu_175_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        data_in_assign_fu_86 = data_in.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(href_V.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_addr_reg_351 =  (sc_lv<32>) (data_out2_sum_cast_fu_305_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1))) {
        or_cond_reg_341 = or_cond_fu_199_p2.read();
    }
}

void ov7670_memcpy::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ov7670_memcpy::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ov7670_memcpy::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ov7670_memcpy::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ov7670_memcpy::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void ov7670_memcpy::thread_ap_block_state9() {
    ap_block_state9 = (esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_predicate_op88_writeresp_state9.read(), ap_const_boolean_1));
}

void ov7670_memcpy::thread_ap_condition_302() {
    ap_condition_302 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_1));
}

void ov7670_memcpy::thread_ap_condition_444() {
    ap_condition_444 = (esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(href_V_read_read_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_fu_227_p2.read()));
}

void ov7670_memcpy::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_predicate_op88_writeresp_state9.read(), ap_const_boolean_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ov7670_memcpy::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ov7670_memcpy::thread_ap_predicate_op88_writeresp_state9() {
    ap_predicate_op88_writeresp_state9 = (esl_seteq<1,1,1>(ap_const_lv1_1, brmerge_reg_337.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_341.read()) && esl_seteq<1,1,1>(href_V.read(), ap_const_lv1_1));
}

void ov7670_memcpy::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_predicate_op88_writeresp_state9.read(), ap_const_boolean_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ov7670_memcpy::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ov7670_memcpy::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void ov7670_memcpy::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void ov7670_memcpy::thread_brmerge_fu_175_p2() {
    brmerge_fu_175_p2 = (vsync_V.read() | p_not1_fu_169_p2.read());
}

void ov7670_memcpy::thread_data_out2_sum_cast_fu_305_p1() {
    data_out2_sum_cast_fu_305_p1 = esl_sext<64,34>(data_out2_sum_fu_299_p2.read());
}

void ov7670_memcpy::thread_data_out2_sum_fu_299_p2() {
    data_out2_sum_fu_299_p2 = (!tmp_1_cast_fu_157_p1.read().is_01() || !tmp_7_cast_fu_295_p1.read().is_01())? sc_lv<34>(): (sc_bigint<34>(tmp_1_cast_fu_157_p1.read()) + sc_biguint<34>(tmp_7_cast_fu_295_p1.read()));
}

void ov7670_memcpy::thread_frame_valid_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_1))) {
        frame_valid_V = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_0)))) {
        frame_valid_V = ap_const_lv1_0;
    } else {
        frame_valid_V = frame_valid_V_preg.read();
    }
}

void ov7670_memcpy::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void ov7670_memcpy::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_predicate_op88_writeresp_state9.read(), ap_const_boolean_1) && 
         !(esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_predicate_op88_writeresp_state9.read(), ap_const_boolean_1)))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void ov7670_memcpy::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void ov7670_memcpy::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void ov7670_memcpy::thread_gmem_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, brmerge_reg_337.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_341.read()) && 
         esl_seteq<1,1,1>(href_V.read(), ap_const_lv1_1))) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void ov7670_memcpy::thread_gmem_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void ov7670_memcpy::thread_href_V_read_read_fu_108_p2() {
    href_V_read_read_fu_108_p2 = href_V.read();
}

void ov7670_memcpy::thread_line_valid_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_predicate_op88_writeresp_state9.read(), ap_const_boolean_1) && 
         !(esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_predicate_op88_writeresp_state9.read(), ap_const_boolean_1)))) {
        line_valid_V = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(href_V_read_read_fu_108_p2.read(), ap_const_lv1_0)))) {
        line_valid_V = ap_const_lv1_0;
    } else {
        line_valid_V = ap_const_lv1_0;
    }
}

void ov7670_memcpy::thread_or_cond1_fu_211_p2() {
    or_cond1_fu_211_p2 = (tmp_3_fu_205_p2.read() & p_not_fu_187_p2.read());
}

void ov7670_memcpy::thread_or_cond_fu_199_p2() {
    or_cond_fu_199_p2 = (tmp_2_fu_193_p2.read() & p_not_fu_187_p2.read());
}

void ov7670_memcpy::thread_p_not1_fu_169_p2() {
    p_not1_fu_169_p2 = (first.read() ^ ap_const_lv1_1);
}

void ov7670_memcpy::thread_p_not_fu_187_p2() {
    p_not_fu_187_p2 = (vsync_V.read() ^ ap_const_lv1_1);
}

void ov7670_memcpy::thread_p_shl1_cast_fu_275_p1() {
    p_shl1_cast_fu_275_p1 = esl_zext<20,17>(p_shl1_fu_267_p3.read());
}

void ov7670_memcpy::thread_p_shl1_fu_267_p3() {
    p_shl1_fu_267_p3 = esl_concat<9,8>(tmp_1_fu_251_p1.read(), ap_const_lv8_0);
}

void ov7670_memcpy::thread_p_shl_cast_fu_263_p1() {
    p_shl_cast_fu_263_p1 = esl_zext<20,19>(p_shl_fu_255_p3.read());
}

void ov7670_memcpy::thread_p_shl_fu_255_p3() {
    p_shl_fu_255_p3 = esl_concat<9,10>(tmp_1_fu_251_p1.read(), ap_const_lv10_0);
}

void ov7670_memcpy::thread_tmp1_cast_fu_285_p1() {
    tmp1_cast_fu_285_p1 = esl_zext<32,20>(tmp1_fu_279_p2.read());
}

void ov7670_memcpy::thread_tmp1_fu_279_p2() {
    tmp1_fu_279_p2 = (!p_shl_cast_fu_263_p1.read().is_01() || !p_shl1_cast_fu_275_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(p_shl_cast_fu_263_p1.read()) + sc_biguint<20>(p_shl1_cast_fu_275_p1.read()));
}

void ov7670_memcpy::thread_tmp_1_cast_fu_157_p1() {
    tmp_1_cast_fu_157_p1 = esl_sext<34,32>(data_out.read());
}

void ov7670_memcpy::thread_tmp_1_fu_251_p1() {
    tmp_1_fu_251_p1 = count_lines.read().range(9-1, 0);
}

void ov7670_memcpy::thread_tmp_2_fu_193_p2() {
    tmp_2_fu_193_p2 = (!count_lines.read().is_01() || !ap_const_lv32_1E0.is_01())? sc_lv<1>(): (sc_biguint<32>(count_lines.read()) < sc_biguint<32>(ap_const_lv32_1E0));
}

void ov7670_memcpy::thread_tmp_3_fu_205_p2() {
    tmp_3_fu_205_p2 = (!count_lines.read().is_01() || !ap_const_lv32_1E0.is_01())? sc_lv<1>(): sc_lv<1>(count_lines.read() == ap_const_lv32_1E0);
}

void ov7670_memcpy::thread_tmp_6_fu_289_p2() {
    tmp_6_fu_289_p2 = (!tmp1_cast_fu_285_p1.read().is_01() || !count_readings.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp1_cast_fu_285_p1.read()) + sc_biguint<32>(count_readings.read()));
}

void ov7670_memcpy::thread_tmp_7_cast_fu_295_p1() {
    tmp_7_cast_fu_295_p1 = esl_zext<34,32>(tmp_6_fu_289_p2.read());
}

void ov7670_memcpy::thread_tmp_8_fu_315_p2() {
    tmp_8_fu_315_p2 = (!ap_const_lv32_1.is_01() || !count_readings.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(count_readings.read()));
}

void ov7670_memcpy::thread_tmp_9_fu_227_p2() {
    tmp_9_fu_227_p2 = (!count_readings.read().is_01() || !ap_const_lv32_500.is_01())? sc_lv<1>(): sc_lv<1>(count_readings.read() == ap_const_lv32_500);
}

void ov7670_memcpy::thread_tmp_s_fu_239_p2() {
    tmp_s_fu_239_p2 = (!count_lines.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(count_lines.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void ov7670_memcpy::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(or_cond_fu_199_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(brmerge_fu_175_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(href_V.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_predicate_op88_writeresp_state9.read(), ap_const_boolean_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

void ov7670_memcpy::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in\" :  \"" << data_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"href_V\" :  \"" << href_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vsync_V\" :  \"" << vsync_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"line_valid_V\" :  \"" << line_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_valid_V\" :  \"" << frame_valid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

