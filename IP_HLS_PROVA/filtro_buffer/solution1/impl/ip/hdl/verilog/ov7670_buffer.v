// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ov7670_buffer,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.331000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=133,HLS_SYN_LUT=276}" *)

module ov7670_buffer (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        inStream_V_V_TDATA,
        inStream_V_V_TVALID,
        inStream_V_V_TREADY,
        enable_raw_stream,
        outStream_LUMA_V_V_TDATA,
        outStream_LUMA_V_V_TVALID,
        outStream_LUMA_V_V_TREADY,
        outStream_CHROMA_V_V_TDATA,
        outStream_CHROMA_V_V_TVALID,
        outStream_CHROMA_V_V_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [7:0] inStream_V_V_TDATA;
input   inStream_V_V_TVALID;
output   inStream_V_V_TREADY;
input   enable_raw_stream;
output  [7:0] outStream_LUMA_V_V_TDATA;
output   outStream_LUMA_V_V_TVALID;
input   outStream_LUMA_V_V_TREADY;
output  [7:0] outStream_CHROMA_V_V_TDATA;
output   outStream_CHROMA_V_V_TVALID;
input   outStream_CHROMA_V_V_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] inStream_V_V_0_data_out;
wire    inStream_V_V_0_vld_in;
wire    inStream_V_V_0_vld_out;
wire    inStream_V_V_0_ack_in;
reg    inStream_V_V_0_ack_out;
reg   [7:0] inStream_V_V_0_payload_A;
reg   [7:0] inStream_V_V_0_payload_B;
reg    inStream_V_V_0_sel_rd;
reg    inStream_V_V_0_sel_wr;
wire    inStream_V_V_0_sel;
wire    inStream_V_V_0_load_A;
wire    inStream_V_V_0_load_B;
reg   [1:0] inStream_V_V_0_state;
wire    inStream_V_V_0_state_cmp_full;
wire   [31:0] outStream_grayscale_V;
reg   [7:0] outStream_LUMA_V_V_1_data_out;
reg    outStream_LUMA_V_V_1_vld_in;
wire    outStream_LUMA_V_V_1_vld_out;
wire    outStream_LUMA_V_V_1_ack_in;
wire    outStream_LUMA_V_V_1_ack_out;
reg   [7:0] outStream_LUMA_V_V_1_payload_A;
reg   [7:0] outStream_LUMA_V_V_1_payload_B;
reg    outStream_LUMA_V_V_1_sel_rd;
reg    outStream_LUMA_V_V_1_sel_wr;
wire    outStream_LUMA_V_V_1_sel;
wire    outStream_LUMA_V_V_1_load_A;
wire    outStream_LUMA_V_V_1_load_B;
reg   [1:0] outStream_LUMA_V_V_1_state;
wire    outStream_LUMA_V_V_1_state_cmp_full;
reg   [7:0] outStream_CHROMA_V_V_1_data_out;
reg    outStream_CHROMA_V_V_1_vld_in;
wire    outStream_CHROMA_V_V_1_vld_out;
wire    outStream_CHROMA_V_V_1_ack_in;
wire    outStream_CHROMA_V_V_1_ack_out;
reg   [7:0] outStream_CHROMA_V_V_1_payload_A;
reg   [7:0] outStream_CHROMA_V_V_1_payload_B;
reg    outStream_CHROMA_V_V_1_sel_rd;
reg    outStream_CHROMA_V_V_1_sel_wr;
wire    outStream_CHROMA_V_V_1_sel;
wire    outStream_CHROMA_V_V_1_load_A;
wire    outStream_CHROMA_V_V_1_load_B;
reg   [1:0] outStream_CHROMA_V_V_1_state;
wire    outStream_CHROMA_V_V_1_state_cmp_full;
reg   [0:0] grayscale_valid;
reg    inStream_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    outStream_LUMA_V_V_TDATA_blk_n;
wire   [0:0] enable_raw_stream_re_read_fu_64_p2;
wire    ap_CS_fsm_state3;
reg   [0:0] grayscale_valid_load_reg_111;
reg    outStream_CHROMA_V_V_TDATA_blk_n;
reg    ap_predicate_op25_write_state2;
reg    ap_predicate_op27_write_state2;
reg    ap_block_state2_io;
wire   [0:0] tmp_5_fu_90_p2;
reg    ap_block_state3;
reg    ap_predicate_op28_write_state3;
reg    ap_predicate_op31_write_state3;
reg    ap_block_state3_io;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 inStream_V_V_0_sel_rd = 1'b0;
#0 inStream_V_V_0_sel_wr = 1'b0;
#0 inStream_V_V_0_state = 2'd0;
#0 outStream_LUMA_V_V_1_sel_rd = 1'b0;
#0 outStream_LUMA_V_V_1_sel_wr = 1'b0;
#0 outStream_LUMA_V_V_1_state = 2'd0;
#0 outStream_CHROMA_V_V_1_sel_rd = 1'b0;
#0 outStream_CHROMA_V_V_1_sel_wr = 1'b0;
#0 outStream_CHROMA_V_V_1_state = 2'd0;
#0 grayscale_valid = 1'd0;
end

ov7670_buffer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ov7670_buffer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .outStream_grayscale_V(outStream_grayscale_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grayscale_valid <= 1'd0;
    end else begin
        if ((~((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_fsm_state3))) begin
            grayscale_valid <= tmp_5_fu_90_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_V_0_ack_out == 1'b1) & (inStream_V_V_0_vld_out == 1'b1))) begin
            inStream_V_V_0_sel_rd <= ~inStream_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_V_0_ack_in == 1'b1) & (inStream_V_V_0_vld_in == 1'b1))) begin
            inStream_V_V_0_sel_wr <= ~inStream_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_V_0_state == 2'd2) & (inStream_V_V_0_vld_in == 1'b0)) | ((inStream_V_V_0_state == 2'd3) & (inStream_V_V_0_vld_in == 1'b0) & (inStream_V_V_0_ack_out == 1'b1)))) begin
            inStream_V_V_0_state <= 2'd2;
        end else if ((((inStream_V_V_0_state == 2'd1) & (inStream_V_V_0_ack_out == 1'b0)) | ((inStream_V_V_0_state == 2'd3) & (inStream_V_V_0_ack_out == 1'b0) & (inStream_V_V_0_vld_in == 1'b1)))) begin
            inStream_V_V_0_state <= 2'd1;
        end else if (((~((inStream_V_V_0_vld_in == 1'b0) & (inStream_V_V_0_ack_out == 1'b1)) & ~((inStream_V_V_0_ack_out == 1'b0) & (inStream_V_V_0_vld_in == 1'b1)) & (inStream_V_V_0_state == 2'd3)) | ((inStream_V_V_0_state == 2'd1) & (inStream_V_V_0_ack_out == 1'b1)) | ((inStream_V_V_0_state == 2'd2) & (inStream_V_V_0_vld_in == 1'b1)))) begin
            inStream_V_V_0_state <= 2'd3;
        end else begin
            inStream_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_CHROMA_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_CHROMA_V_V_1_ack_out == 1'b1) & (outStream_CHROMA_V_V_1_vld_out == 1'b1))) begin
            outStream_CHROMA_V_V_1_sel_rd <= ~outStream_CHROMA_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_CHROMA_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_CHROMA_V_V_1_ack_in == 1'b1) & (outStream_CHROMA_V_V_1_vld_in == 1'b1))) begin
            outStream_CHROMA_V_V_1_sel_wr <= ~outStream_CHROMA_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_CHROMA_V_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_CHROMA_V_V_1_vld_in == 1'b0) & (outStream_CHROMA_V_V_1_state == 2'd2)) | ((outStream_CHROMA_V_V_1_vld_in == 1'b0) & (outStream_CHROMA_V_V_1_ack_out == 1'b1) & (outStream_CHROMA_V_V_1_state == 2'd3)))) begin
            outStream_CHROMA_V_V_1_state <= 2'd2;
        end else if ((((outStream_CHROMA_V_V_1_ack_out == 1'b0) & (outStream_CHROMA_V_V_1_state == 2'd1)) | ((outStream_CHROMA_V_V_1_ack_out == 1'b0) & (outStream_CHROMA_V_V_1_vld_in == 1'b1) & (outStream_CHROMA_V_V_1_state == 2'd3)))) begin
            outStream_CHROMA_V_V_1_state <= 2'd1;
        end else if (((~((outStream_CHROMA_V_V_1_vld_in == 1'b0) & (outStream_CHROMA_V_V_1_ack_out == 1'b1)) & ~((outStream_CHROMA_V_V_1_ack_out == 1'b0) & (outStream_CHROMA_V_V_1_vld_in == 1'b1)) & (outStream_CHROMA_V_V_1_state == 2'd3)) | ((outStream_CHROMA_V_V_1_ack_out == 1'b1) & (outStream_CHROMA_V_V_1_state == 2'd1)) | ((outStream_CHROMA_V_V_1_vld_in == 1'b1) & (outStream_CHROMA_V_V_1_state == 2'd2)))) begin
            outStream_CHROMA_V_V_1_state <= 2'd3;
        end else begin
            outStream_CHROMA_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_LUMA_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_LUMA_V_V_1_ack_out == 1'b1) & (outStream_LUMA_V_V_1_vld_out == 1'b1))) begin
            outStream_LUMA_V_V_1_sel_rd <= ~outStream_LUMA_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_LUMA_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_LUMA_V_V_1_ack_in == 1'b1) & (outStream_LUMA_V_V_1_vld_in == 1'b1))) begin
            outStream_LUMA_V_V_1_sel_wr <= ~outStream_LUMA_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_LUMA_V_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_LUMA_V_V_1_vld_in == 1'b0) & (outStream_LUMA_V_V_1_state == 2'd2)) | ((outStream_LUMA_V_V_1_vld_in == 1'b0) & (outStream_LUMA_V_V_1_ack_out == 1'b1) & (outStream_LUMA_V_V_1_state == 2'd3)))) begin
            outStream_LUMA_V_V_1_state <= 2'd2;
        end else if ((((outStream_LUMA_V_V_1_ack_out == 1'b0) & (outStream_LUMA_V_V_1_state == 2'd1)) | ((outStream_LUMA_V_V_1_ack_out == 1'b0) & (outStream_LUMA_V_V_1_vld_in == 1'b1) & (outStream_LUMA_V_V_1_state == 2'd3)))) begin
            outStream_LUMA_V_V_1_state <= 2'd1;
        end else if (((~((outStream_LUMA_V_V_1_vld_in == 1'b0) & (outStream_LUMA_V_V_1_ack_out == 1'b1)) & ~((outStream_LUMA_V_V_1_ack_out == 1'b0) & (outStream_LUMA_V_V_1_vld_in == 1'b1)) & (outStream_LUMA_V_V_1_state == 2'd3)) | ((outStream_LUMA_V_V_1_ack_out == 1'b1) & (outStream_LUMA_V_V_1_state == 2'd1)) | ((outStream_LUMA_V_V_1_vld_in == 1'b1) & (outStream_LUMA_V_V_1_state == 2'd2)))) begin
            outStream_LUMA_V_V_1_state <= 2'd3;
        end else begin
            outStream_LUMA_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        grayscale_valid_load_reg_111 <= grayscale_valid;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_V_0_load_A == 1'b1)) begin
        inStream_V_V_0_payload_A <= inStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_V_0_load_B == 1'b1)) begin
        inStream_V_V_0_payload_B <= inStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_CHROMA_V_V_1_load_A == 1'b1)) begin
        outStream_CHROMA_V_V_1_payload_A <= inStream_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_CHROMA_V_V_1_load_B == 1'b1)) begin
        outStream_CHROMA_V_V_1_payload_B <= inStream_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_LUMA_V_V_1_load_A == 1'b1)) begin
        outStream_LUMA_V_V_1_payload_A <= inStream_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_LUMA_V_V_1_load_B == 1'b1)) begin
        outStream_LUMA_V_V_1_payload_B <= inStream_V_V_0_data_out;
    end
end

always @ (*) begin
    if ((~((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        inStream_V_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_V_0_sel == 1'b1)) begin
        inStream_V_V_0_data_out = inStream_V_V_0_payload_B;
    end else begin
        inStream_V_V_0_data_out = inStream_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_V_TDATA_blk_n = inStream_V_V_0_state[1'd0];
    end else begin
        inStream_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_CHROMA_V_V_1_sel == 1'b1)) begin
        outStream_CHROMA_V_V_1_data_out = outStream_CHROMA_V_V_1_payload_B;
    end else begin
        outStream_CHROMA_V_V_1_data_out = outStream_CHROMA_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (ap_predicate_op25_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        outStream_CHROMA_V_V_1_vld_in = 1'b1;
    end else begin
        outStream_CHROMA_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((enable_raw_stream_re_read_fu_64_p2 == 1'd1) & (grayscale_valid_load_reg_111 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((enable_raw_stream_re_read_fu_64_p2 == 1'd1) & (grayscale_valid == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        outStream_CHROMA_V_V_TDATA_blk_n = outStream_CHROMA_V_V_1_state[1'd1];
    end else begin
        outStream_CHROMA_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_LUMA_V_V_1_sel == 1'b1)) begin
        outStream_LUMA_V_V_1_data_out = outStream_LUMA_V_V_1_payload_B;
    end else begin
        outStream_LUMA_V_V_1_data_out = outStream_LUMA_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (ap_predicate_op27_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        outStream_LUMA_V_V_1_vld_in = 1'b1;
    end else begin
        outStream_LUMA_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((grayscale_valid_load_reg_111 == 1'd1) & (enable_raw_stream_re_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((enable_raw_stream_re_read_fu_64_p2 == 1'd1) & (grayscale_valid == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        outStream_LUMA_V_V_TDATA_blk_n = outStream_LUMA_V_V_1_state[1'd1];
    end else begin
        outStream_LUMA_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((inStream_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2_io = (((outStream_LUMA_V_V_1_ack_in == 1'b0) & (ap_predicate_op27_write_state2 == 1'b1)) | ((outStream_CHROMA_V_V_1_ack_in == 1'b0) & (ap_predicate_op25_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state3 = ((outStream_CHROMA_V_V_1_ack_in == 1'b0) | (outStream_LUMA_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = (((outStream_LUMA_V_V_1_ack_in == 1'b0) & (ap_predicate_op31_write_state3 == 1'b1)) | ((outStream_CHROMA_V_V_1_ack_in == 1'b0) & (ap_predicate_op28_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op25_write_state2 = ((enable_raw_stream_re_read_fu_64_p2 == 1'd1) & (grayscale_valid == 1'd0));
end

always @ (*) begin
    ap_predicate_op27_write_state2 = ((enable_raw_stream_re_read_fu_64_p2 == 1'd1) & (grayscale_valid == 1'd1));
end

always @ (*) begin
    ap_predicate_op28_write_state3 = ((enable_raw_stream_re_read_fu_64_p2 == 1'd1) & (grayscale_valid_load_reg_111 == 1'd0));
end

always @ (*) begin
    ap_predicate_op31_write_state3 = ((grayscale_valid_load_reg_111 == 1'd1) & (enable_raw_stream_re_read_fu_64_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign enable_raw_stream_re_read_fu_64_p2 = enable_raw_stream;

assign inStream_V_V_0_ack_in = inStream_V_V_0_state[1'd1];

assign inStream_V_V_0_load_A = (inStream_V_V_0_state_cmp_full & ~inStream_V_V_0_sel_wr);

assign inStream_V_V_0_load_B = (inStream_V_V_0_state_cmp_full & inStream_V_V_0_sel_wr);

assign inStream_V_V_0_sel = inStream_V_V_0_sel_rd;

assign inStream_V_V_0_state_cmp_full = ((inStream_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_V_0_vld_in = inStream_V_V_TVALID;

assign inStream_V_V_0_vld_out = inStream_V_V_0_state[1'd0];

assign inStream_V_V_TREADY = inStream_V_V_0_state[1'd1];

assign m_axi_gmem_ARADDR = 32'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 8'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 32'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 8'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign outStream_CHROMA_V_V_1_ack_in = outStream_CHROMA_V_V_1_state[1'd1];

assign outStream_CHROMA_V_V_1_ack_out = outStream_CHROMA_V_V_TREADY;

assign outStream_CHROMA_V_V_1_load_A = (outStream_CHROMA_V_V_1_state_cmp_full & ~outStream_CHROMA_V_V_1_sel_wr);

assign outStream_CHROMA_V_V_1_load_B = (outStream_CHROMA_V_V_1_state_cmp_full & outStream_CHROMA_V_V_1_sel_wr);

assign outStream_CHROMA_V_V_1_sel = outStream_CHROMA_V_V_1_sel_rd;

assign outStream_CHROMA_V_V_1_state_cmp_full = ((outStream_CHROMA_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_CHROMA_V_V_1_vld_out = outStream_CHROMA_V_V_1_state[1'd0];

assign outStream_CHROMA_V_V_TDATA = outStream_CHROMA_V_V_1_data_out;

assign outStream_CHROMA_V_V_TVALID = outStream_CHROMA_V_V_1_state[1'd0];

assign outStream_LUMA_V_V_1_ack_in = outStream_LUMA_V_V_1_state[1'd1];

assign outStream_LUMA_V_V_1_ack_out = outStream_LUMA_V_V_TREADY;

assign outStream_LUMA_V_V_1_load_A = (outStream_LUMA_V_V_1_state_cmp_full & ~outStream_LUMA_V_V_1_sel_wr);

assign outStream_LUMA_V_V_1_load_B = (outStream_LUMA_V_V_1_state_cmp_full & outStream_LUMA_V_V_1_sel_wr);

assign outStream_LUMA_V_V_1_sel = outStream_LUMA_V_V_1_sel_rd;

assign outStream_LUMA_V_V_1_state_cmp_full = ((outStream_LUMA_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_LUMA_V_V_1_vld_out = outStream_LUMA_V_V_1_state[1'd0];

assign outStream_LUMA_V_V_TDATA = outStream_LUMA_V_V_1_data_out;

assign outStream_LUMA_V_V_TVALID = outStream_LUMA_V_V_1_state[1'd0];

assign tmp_5_fu_90_p2 = (grayscale_valid_load_reg_111 ^ 1'd1);

endmodule //ov7670_buffer
