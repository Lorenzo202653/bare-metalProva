// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ov7670_buffer_HH_
#define _ov7670_buffer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ov7670_buffer_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_GMEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct ov7670_buffer : public sc_module {
    // Port declarations 78
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_gmem_AWVALID;
    sc_in< sc_logic > m_axi_gmem_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_AWID;
    sc_out< sc_lv<8> > m_axi_gmem_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_AWUSER_WIDTH> > m_axi_gmem_AWUSER;
    sc_out< sc_logic > m_axi_gmem_WVALID;
    sc_in< sc_logic > m_axi_gmem_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH/8> > m_axi_gmem_WSTRB;
    sc_out< sc_logic > m_axi_gmem_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_WID;
    sc_out< sc_uint<C_M_AXI_GMEM_WUSER_WIDTH> > m_axi_gmem_WUSER;
    sc_out< sc_logic > m_axi_gmem_ARVALID;
    sc_in< sc_logic > m_axi_gmem_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_ARID;
    sc_out< sc_lv<8> > m_axi_gmem_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_ARUSER_WIDTH> > m_axi_gmem_ARUSER;
    sc_in< sc_logic > m_axi_gmem_RVALID;
    sc_out< sc_logic > m_axi_gmem_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_RDATA;
    sc_in< sc_logic > m_axi_gmem_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_RID;
    sc_in< sc_uint<C_M_AXI_GMEM_RUSER_WIDTH> > m_axi_gmem_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem_RRESP;
    sc_in< sc_logic > m_axi_gmem_BVALID;
    sc_out< sc_logic > m_axi_gmem_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_BID;
    sc_in< sc_uint<C_M_AXI_GMEM_BUSER_WIDTH> > m_axi_gmem_BUSER;
    sc_in< sc_lv<8> > inStream_V_V_TDATA;
    sc_in< sc_logic > inStream_V_V_TVALID;
    sc_out< sc_logic > inStream_V_V_TREADY;
    sc_in< sc_logic > enable_raw_stream;
    sc_out< sc_lv<8> > outStream_LUMA_V_V_TDATA;
    sc_out< sc_logic > outStream_LUMA_V_V_TVALID;
    sc_in< sc_logic > outStream_LUMA_V_V_TREADY;
    sc_out< sc_lv<8> > outStream_CHROMA_V_V_TDATA;
    sc_out< sc_logic > outStream_CHROMA_V_V_TVALID;
    sc_in< sc_logic > outStream_CHROMA_V_V_TREADY;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    ov7670_buffer(sc_module_name name);
    SC_HAS_PROCESS(ov7670_buffer);

    ~ov7670_buffer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    ov7670_buffer_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* ov7670_buffer_AXILiteS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > inStream_V_V_0_data_out;
    sc_signal< sc_logic > inStream_V_V_0_vld_in;
    sc_signal< sc_logic > inStream_V_V_0_vld_out;
    sc_signal< sc_logic > inStream_V_V_0_ack_in;
    sc_signal< sc_logic > inStream_V_V_0_ack_out;
    sc_signal< sc_lv<8> > inStream_V_V_0_payload_A;
    sc_signal< sc_lv<8> > inStream_V_V_0_payload_B;
    sc_signal< sc_logic > inStream_V_V_0_sel_rd;
    sc_signal< sc_logic > inStream_V_V_0_sel_wr;
    sc_signal< sc_logic > inStream_V_V_0_sel;
    sc_signal< sc_logic > inStream_V_V_0_load_A;
    sc_signal< sc_logic > inStream_V_V_0_load_B;
    sc_signal< sc_lv<2> > inStream_V_V_0_state;
    sc_signal< sc_logic > inStream_V_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > outStream_grayscale_V;
    sc_signal< sc_lv<8> > outStream_LUMA_V_V_1_data_out;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_vld_in;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_vld_out;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_ack_in;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_ack_out;
    sc_signal< sc_lv<8> > outStream_LUMA_V_V_1_payload_A;
    sc_signal< sc_lv<8> > outStream_LUMA_V_V_1_payload_B;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_sel_rd;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_sel_wr;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_sel;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_load_A;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_LUMA_V_V_1_state;
    sc_signal< sc_logic > outStream_LUMA_V_V_1_state_cmp_full;
    sc_signal< sc_lv<8> > outStream_CHROMA_V_V_1_data_out;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_vld_in;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_vld_out;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_ack_in;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_ack_out;
    sc_signal< sc_lv<8> > outStream_CHROMA_V_V_1_payload_A;
    sc_signal< sc_lv<8> > outStream_CHROMA_V_V_1_payload_B;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_sel_rd;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_sel_wr;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_sel;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_load_A;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_CHROMA_V_V_1_state;
    sc_signal< sc_logic > outStream_CHROMA_V_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > grayscale_valid;
    sc_signal< sc_logic > inStream_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > outStream_LUMA_V_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > enable_raw_stream_re_read_fu_64_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > grayscale_valid_load_reg_111;
    sc_signal< sc_logic > outStream_CHROMA_V_V_TDATA_blk_n;
    sc_signal< bool > ap_predicate_op25_write_state2;
    sc_signal< bool > ap_predicate_op27_write_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<1> > tmp_5_fu_90_p2;
    sc_signal< bool > ap_block_state3;
    sc_signal< bool > ap_predicate_op28_write_state3;
    sc_signal< bool > ap_predicate_op31_write_state3;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_GMEM_USER_VALUE;
    static const int C_M_AXI_GMEM_PROT_VALUE;
    static const int C_M_AXI_GMEM_CACHE_VALUE;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2_io();
    void thread_ap_block_state3();
    void thread_ap_block_state3_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op25_write_state2();
    void thread_ap_predicate_op27_write_state2();
    void thread_ap_predicate_op28_write_state3();
    void thread_ap_predicate_op31_write_state3();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_enable_raw_stream_re_read_fu_64_p2();
    void thread_inStream_V_V_0_ack_in();
    void thread_inStream_V_V_0_ack_out();
    void thread_inStream_V_V_0_data_out();
    void thread_inStream_V_V_0_load_A();
    void thread_inStream_V_V_0_load_B();
    void thread_inStream_V_V_0_sel();
    void thread_inStream_V_V_0_state_cmp_full();
    void thread_inStream_V_V_0_vld_in();
    void thread_inStream_V_V_0_vld_out();
    void thread_inStream_V_V_TDATA_blk_n();
    void thread_inStream_V_V_TREADY();
    void thread_m_axi_gmem_ARADDR();
    void thread_m_axi_gmem_ARBURST();
    void thread_m_axi_gmem_ARCACHE();
    void thread_m_axi_gmem_ARID();
    void thread_m_axi_gmem_ARLEN();
    void thread_m_axi_gmem_ARLOCK();
    void thread_m_axi_gmem_ARPROT();
    void thread_m_axi_gmem_ARQOS();
    void thread_m_axi_gmem_ARREGION();
    void thread_m_axi_gmem_ARSIZE();
    void thread_m_axi_gmem_ARUSER();
    void thread_m_axi_gmem_ARVALID();
    void thread_m_axi_gmem_AWADDR();
    void thread_m_axi_gmem_AWBURST();
    void thread_m_axi_gmem_AWCACHE();
    void thread_m_axi_gmem_AWID();
    void thread_m_axi_gmem_AWLEN();
    void thread_m_axi_gmem_AWLOCK();
    void thread_m_axi_gmem_AWPROT();
    void thread_m_axi_gmem_AWQOS();
    void thread_m_axi_gmem_AWREGION();
    void thread_m_axi_gmem_AWSIZE();
    void thread_m_axi_gmem_AWUSER();
    void thread_m_axi_gmem_AWVALID();
    void thread_m_axi_gmem_BREADY();
    void thread_m_axi_gmem_RREADY();
    void thread_m_axi_gmem_WDATA();
    void thread_m_axi_gmem_WID();
    void thread_m_axi_gmem_WLAST();
    void thread_m_axi_gmem_WSTRB();
    void thread_m_axi_gmem_WUSER();
    void thread_m_axi_gmem_WVALID();
    void thread_outStream_CHROMA_V_V_1_ack_in();
    void thread_outStream_CHROMA_V_V_1_ack_out();
    void thread_outStream_CHROMA_V_V_1_data_out();
    void thread_outStream_CHROMA_V_V_1_load_A();
    void thread_outStream_CHROMA_V_V_1_load_B();
    void thread_outStream_CHROMA_V_V_1_sel();
    void thread_outStream_CHROMA_V_V_1_state_cmp_full();
    void thread_outStream_CHROMA_V_V_1_vld_in();
    void thread_outStream_CHROMA_V_V_1_vld_out();
    void thread_outStream_CHROMA_V_V_TDATA();
    void thread_outStream_CHROMA_V_V_TDATA_blk_n();
    void thread_outStream_CHROMA_V_V_TVALID();
    void thread_outStream_LUMA_V_V_1_ack_in();
    void thread_outStream_LUMA_V_V_1_ack_out();
    void thread_outStream_LUMA_V_V_1_data_out();
    void thread_outStream_LUMA_V_V_1_load_A();
    void thread_outStream_LUMA_V_V_1_load_B();
    void thread_outStream_LUMA_V_V_1_sel();
    void thread_outStream_LUMA_V_V_1_state_cmp_full();
    void thread_outStream_LUMA_V_V_1_vld_in();
    void thread_outStream_LUMA_V_V_1_vld_out();
    void thread_outStream_LUMA_V_V_TDATA();
    void thread_outStream_LUMA_V_V_TDATA_blk_n();
    void thread_outStream_LUMA_V_V_TVALID();
    void thread_tmp_5_fu_90_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
