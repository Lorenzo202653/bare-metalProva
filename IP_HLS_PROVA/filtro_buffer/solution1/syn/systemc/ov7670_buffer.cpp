// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ov7670_buffer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ov7670_buffer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ov7670_buffer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> ov7670_buffer::ap_ST_fsm_state1 = "1";
const sc_lv<3> ov7670_buffer::ap_ST_fsm_state2 = "10";
const sc_lv<3> ov7670_buffer::ap_ST_fsm_state3 = "100";
const sc_lv<32> ov7670_buffer::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ov7670_buffer::ap_const_boolean_1 = true;
const sc_lv<1> ov7670_buffer::ap_const_lv1_0 = "0";
const sc_lv<1> ov7670_buffer::ap_const_lv1_1 = "1";
const sc_lv<2> ov7670_buffer::ap_const_lv2_0 = "00";
const sc_lv<2> ov7670_buffer::ap_const_lv2_2 = "10";
const sc_lv<2> ov7670_buffer::ap_const_lv2_3 = "11";
const sc_lv<2> ov7670_buffer::ap_const_lv2_1 = "1";
const sc_lv<32> ov7670_buffer::ap_const_lv32_1 = "1";
const sc_lv<32> ov7670_buffer::ap_const_lv32_2 = "10";
const int ov7670_buffer::C_S_AXI_DATA_WIDTH = "100000";
const int ov7670_buffer::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_buffer::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_buffer::C_M_AXI_GMEM_CACHE_VALUE = "11";
const sc_lv<8> ov7670_buffer::ap_const_lv8_0 = "00000000";
const sc_lv<3> ov7670_buffer::ap_const_lv3_0 = "000";
const sc_lv<4> ov7670_buffer::ap_const_lv4_0 = "0000";

ov7670_buffer::ov7670_buffer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ov7670_buffer_AXILiteS_s_axi_U = new ov7670_buffer_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("ov7670_buffer_AXILiteS_s_axi_U");
    ov7670_buffer_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    ov7670_buffer_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    ov7670_buffer_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    ov7670_buffer_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    ov7670_buffer_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    ov7670_buffer_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    ov7670_buffer_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    ov7670_buffer_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    ov7670_buffer_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    ov7670_buffer_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    ov7670_buffer_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    ov7670_buffer_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    ov7670_buffer_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    ov7670_buffer_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    ov7670_buffer_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    ov7670_buffer_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    ov7670_buffer_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    ov7670_buffer_AXILiteS_s_axi_U->ACLK(ap_clk);
    ov7670_buffer_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    ov7670_buffer_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    ov7670_buffer_AXILiteS_s_axi_U->outStream_grayscale_V(outStream_grayscale_V);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( ap_predicate_op25_write_state2 );
    sensitive << ( ap_predicate_op27_write_state2 );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( ap_predicate_op28_write_state3 );
    sensitive << ( ap_predicate_op31_write_state3 );

    SC_METHOD(thread_ap_done);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op25_write_state2);
    sensitive << ( grayscale_valid );
    sensitive << ( enable_raw_stream_re_read_fu_64_p2 );

    SC_METHOD(thread_ap_predicate_op27_write_state2);
    sensitive << ( grayscale_valid );
    sensitive << ( enable_raw_stream_re_read_fu_64_p2 );

    SC_METHOD(thread_ap_predicate_op28_write_state3);
    sensitive << ( enable_raw_stream_re_read_fu_64_p2 );
    sensitive << ( grayscale_valid_load_reg_111 );

    SC_METHOD(thread_ap_predicate_op31_write_state3);
    sensitive << ( enable_raw_stream_re_read_fu_64_p2 );
    sensitive << ( grayscale_valid_load_reg_111 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_enable_raw_stream_re_read_fu_64_p2);
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( enable_raw_stream );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_inStream_V_V_0_ack_in);
    sensitive << ( inStream_V_V_0_state );

    SC_METHOD(thread_inStream_V_V_0_ack_out);
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_inStream_V_V_0_data_out);
    sensitive << ( inStream_V_V_0_payload_A );
    sensitive << ( inStream_V_V_0_payload_B );
    sensitive << ( inStream_V_V_0_sel );

    SC_METHOD(thread_inStream_V_V_0_load_A);
    sensitive << ( inStream_V_V_0_sel_wr );
    sensitive << ( inStream_V_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_V_0_load_B);
    sensitive << ( inStream_V_V_0_sel_wr );
    sensitive << ( inStream_V_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_V_0_sel);
    sensitive << ( inStream_V_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_V_0_state_cmp_full);
    sensitive << ( inStream_V_V_0_state );

    SC_METHOD(thread_inStream_V_V_0_vld_in);
    sensitive << ( inStream_V_V_TVALID );

    SC_METHOD(thread_inStream_V_V_0_vld_out);
    sensitive << ( inStream_V_V_0_state );

    SC_METHOD(thread_inStream_V_V_TDATA_blk_n);
    sensitive << ( inStream_V_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_inStream_V_V_TREADY);
    sensitive << ( inStream_V_V_0_state );

    SC_METHOD(thread_m_axi_gmem_ARADDR);

    SC_METHOD(thread_m_axi_gmem_ARBURST);

    SC_METHOD(thread_m_axi_gmem_ARCACHE);

    SC_METHOD(thread_m_axi_gmem_ARID);

    SC_METHOD(thread_m_axi_gmem_ARLEN);

    SC_METHOD(thread_m_axi_gmem_ARLOCK);

    SC_METHOD(thread_m_axi_gmem_ARPROT);

    SC_METHOD(thread_m_axi_gmem_ARQOS);

    SC_METHOD(thread_m_axi_gmem_ARREGION);

    SC_METHOD(thread_m_axi_gmem_ARSIZE);

    SC_METHOD(thread_m_axi_gmem_ARUSER);

    SC_METHOD(thread_m_axi_gmem_ARVALID);

    SC_METHOD(thread_m_axi_gmem_AWADDR);

    SC_METHOD(thread_m_axi_gmem_AWBURST);

    SC_METHOD(thread_m_axi_gmem_AWCACHE);

    SC_METHOD(thread_m_axi_gmem_AWID);

    SC_METHOD(thread_m_axi_gmem_AWLEN);

    SC_METHOD(thread_m_axi_gmem_AWLOCK);

    SC_METHOD(thread_m_axi_gmem_AWPROT);

    SC_METHOD(thread_m_axi_gmem_AWQOS);

    SC_METHOD(thread_m_axi_gmem_AWREGION);

    SC_METHOD(thread_m_axi_gmem_AWSIZE);

    SC_METHOD(thread_m_axi_gmem_AWUSER);

    SC_METHOD(thread_m_axi_gmem_AWVALID);

    SC_METHOD(thread_m_axi_gmem_BREADY);

    SC_METHOD(thread_m_axi_gmem_RREADY);

    SC_METHOD(thread_m_axi_gmem_WDATA);

    SC_METHOD(thread_m_axi_gmem_WID);

    SC_METHOD(thread_m_axi_gmem_WLAST);

    SC_METHOD(thread_m_axi_gmem_WSTRB);

    SC_METHOD(thread_m_axi_gmem_WUSER);

    SC_METHOD(thread_m_axi_gmem_WVALID);

    SC_METHOD(thread_outStream_CHROMA_V_V_1_ack_in);
    sensitive << ( outStream_CHROMA_V_V_1_state );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_ack_out);
    sensitive << ( outStream_CHROMA_V_V_TREADY );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_data_out);
    sensitive << ( outStream_CHROMA_V_V_1_payload_A );
    sensitive << ( outStream_CHROMA_V_V_1_payload_B );
    sensitive << ( outStream_CHROMA_V_V_1_sel );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_load_A);
    sensitive << ( outStream_CHROMA_V_V_1_sel_wr );
    sensitive << ( outStream_CHROMA_V_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_load_B);
    sensitive << ( outStream_CHROMA_V_V_1_sel_wr );
    sensitive << ( outStream_CHROMA_V_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_sel);
    sensitive << ( outStream_CHROMA_V_V_1_sel_rd );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_state_cmp_full);
    sensitive << ( outStream_CHROMA_V_V_1_state );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_vld_in);
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_predicate_op25_write_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_vld_out);
    sensitive << ( outStream_CHROMA_V_V_1_state );

    SC_METHOD(thread_outStream_CHROMA_V_V_TDATA);
    sensitive << ( outStream_CHROMA_V_V_1_data_out );

    SC_METHOD(thread_outStream_CHROMA_V_V_TDATA_blk_n);
    sensitive << ( outStream_CHROMA_V_V_1_state );
    sensitive << ( grayscale_valid );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( enable_raw_stream_re_read_fu_64_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grayscale_valid_load_reg_111 );

    SC_METHOD(thread_outStream_CHROMA_V_V_TVALID);
    sensitive << ( outStream_CHROMA_V_V_1_state );

    SC_METHOD(thread_outStream_LUMA_V_V_1_ack_in);
    sensitive << ( outStream_LUMA_V_V_1_state );

    SC_METHOD(thread_outStream_LUMA_V_V_1_ack_out);
    sensitive << ( outStream_LUMA_V_V_TREADY );

    SC_METHOD(thread_outStream_LUMA_V_V_1_data_out);
    sensitive << ( outStream_LUMA_V_V_1_payload_A );
    sensitive << ( outStream_LUMA_V_V_1_payload_B );
    sensitive << ( outStream_LUMA_V_V_1_sel );

    SC_METHOD(thread_outStream_LUMA_V_V_1_load_A);
    sensitive << ( outStream_LUMA_V_V_1_sel_wr );
    sensitive << ( outStream_LUMA_V_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_LUMA_V_V_1_load_B);
    sensitive << ( outStream_LUMA_V_V_1_sel_wr );
    sensitive << ( outStream_LUMA_V_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_LUMA_V_V_1_sel);
    sensitive << ( outStream_LUMA_V_V_1_sel_rd );

    SC_METHOD(thread_outStream_LUMA_V_V_1_state_cmp_full);
    sensitive << ( outStream_LUMA_V_V_1_state );

    SC_METHOD(thread_outStream_LUMA_V_V_1_vld_in);
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_predicate_op27_write_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_outStream_LUMA_V_V_1_vld_out);
    sensitive << ( outStream_LUMA_V_V_1_state );

    SC_METHOD(thread_outStream_LUMA_V_V_TDATA);
    sensitive << ( outStream_LUMA_V_V_1_data_out );

    SC_METHOD(thread_outStream_LUMA_V_V_TDATA_blk_n);
    sensitive << ( outStream_LUMA_V_V_1_state );
    sensitive << ( grayscale_valid );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( enable_raw_stream_re_read_fu_64_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grayscale_valid_load_reg_111 );

    SC_METHOD(thread_outStream_LUMA_V_V_TVALID);
    sensitive << ( outStream_LUMA_V_V_1_state );

    SC_METHOD(thread_tmp_5_fu_90_p2);
    sensitive << ( grayscale_valid_load_reg_111 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    inStream_V_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_V_0_state = "00";
    outStream_LUMA_V_V_1_sel_rd = SC_LOGIC_0;
    outStream_LUMA_V_V_1_sel_wr = SC_LOGIC_0;
    outStream_LUMA_V_V_1_state = "00";
    outStream_CHROMA_V_V_1_sel_rd = SC_LOGIC_0;
    outStream_CHROMA_V_V_1_sel_wr = SC_LOGIC_0;
    outStream_CHROMA_V_V_1_state = "00";
    grayscale_valid = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ov7670_buffer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, inStream_V_V_TDATA, "(port)inStream_V_V_TDATA");
    sc_trace(mVcdFile, inStream_V_V_TVALID, "(port)inStream_V_V_TVALID");
    sc_trace(mVcdFile, inStream_V_V_TREADY, "(port)inStream_V_V_TREADY");
    sc_trace(mVcdFile, enable_raw_stream, "(port)enable_raw_stream");
    sc_trace(mVcdFile, outStream_LUMA_V_V_TDATA, "(port)outStream_LUMA_V_V_TDATA");
    sc_trace(mVcdFile, outStream_LUMA_V_V_TVALID, "(port)outStream_LUMA_V_V_TVALID");
    sc_trace(mVcdFile, outStream_LUMA_V_V_TREADY, "(port)outStream_LUMA_V_V_TREADY");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_TDATA, "(port)outStream_CHROMA_V_V_TDATA");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_TVALID, "(port)outStream_CHROMA_V_V_TVALID");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_TREADY, "(port)outStream_CHROMA_V_V_TREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, inStream_V_V_0_data_out, "inStream_V_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_V_0_vld_in, "inStream_V_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_V_0_vld_out, "inStream_V_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_V_0_ack_in, "inStream_V_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_V_0_ack_out, "inStream_V_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_V_0_payload_A, "inStream_V_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_V_0_payload_B, "inStream_V_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_V_0_sel_rd, "inStream_V_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_V_0_sel_wr, "inStream_V_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_V_0_sel, "inStream_V_V_0_sel");
    sc_trace(mVcdFile, inStream_V_V_0_load_A, "inStream_V_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_V_0_load_B, "inStream_V_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_V_0_state, "inStream_V_V_0_state");
    sc_trace(mVcdFile, inStream_V_V_0_state_cmp_full, "inStream_V_V_0_state_cmp_full");
    sc_trace(mVcdFile, outStream_grayscale_V, "outStream_grayscale_V");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_data_out, "outStream_LUMA_V_V_1_data_out");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_vld_in, "outStream_LUMA_V_V_1_vld_in");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_vld_out, "outStream_LUMA_V_V_1_vld_out");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_ack_in, "outStream_LUMA_V_V_1_ack_in");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_ack_out, "outStream_LUMA_V_V_1_ack_out");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_payload_A, "outStream_LUMA_V_V_1_payload_A");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_payload_B, "outStream_LUMA_V_V_1_payload_B");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_sel_rd, "outStream_LUMA_V_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_sel_wr, "outStream_LUMA_V_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_sel, "outStream_LUMA_V_V_1_sel");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_load_A, "outStream_LUMA_V_V_1_load_A");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_load_B, "outStream_LUMA_V_V_1_load_B");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_state, "outStream_LUMA_V_V_1_state");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_state_cmp_full, "outStream_LUMA_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_data_out, "outStream_CHROMA_V_V_1_data_out");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_vld_in, "outStream_CHROMA_V_V_1_vld_in");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_vld_out, "outStream_CHROMA_V_V_1_vld_out");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_ack_in, "outStream_CHROMA_V_V_1_ack_in");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_ack_out, "outStream_CHROMA_V_V_1_ack_out");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_payload_A, "outStream_CHROMA_V_V_1_payload_A");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_payload_B, "outStream_CHROMA_V_V_1_payload_B");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_sel_rd, "outStream_CHROMA_V_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_sel_wr, "outStream_CHROMA_V_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_sel, "outStream_CHROMA_V_V_1_sel");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_load_A, "outStream_CHROMA_V_V_1_load_A");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_load_B, "outStream_CHROMA_V_V_1_load_B");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_state, "outStream_CHROMA_V_V_1_state");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_state_cmp_full, "outStream_CHROMA_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, grayscale_valid, "grayscale_valid");
    sc_trace(mVcdFile, inStream_V_V_TDATA_blk_n, "inStream_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, outStream_LUMA_V_V_TDATA_blk_n, "outStream_LUMA_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, enable_raw_stream_re_read_fu_64_p2, "enable_raw_stream_re_read_fu_64_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grayscale_valid_load_reg_111, "grayscale_valid_load_reg_111");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_TDATA_blk_n, "outStream_CHROMA_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_predicate_op25_write_state2, "ap_predicate_op25_write_state2");
    sc_trace(mVcdFile, ap_predicate_op27_write_state2, "ap_predicate_op27_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, tmp_5_fu_90_p2, "tmp_5_fu_90_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, ap_predicate_op28_write_state3, "ap_predicate_op28_write_state3");
    sc_trace(mVcdFile, ap_predicate_op31_write_state3, "ap_predicate_op31_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ov7670_buffer.hdltvin.dat");
    mHdltvoutHandle.open("ov7670_buffer.hdltvout.dat");
}

ov7670_buffer::~ov7670_buffer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ov7670_buffer_AXILiteS_s_axi_U;
}

void ov7670_buffer::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ov7670_buffer::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grayscale_valid = ap_const_lv1_0;
    } else {
        if ((!(esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
            grayscale_valid = tmp_5_fu_90_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_out.read()))) {
            inStream_V_V_0_sel_rd =  (sc_logic) (~inStream_V_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_in.read()))) {
            inStream_V_V_0_sel_wr =  (sc_logic) (~inStream_V_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_2)))) {
            inStream_V_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_1)))) {
            inStream_V_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_out.read()))))) {
            inStream_V_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_CHROMA_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_out.read()))) {
            outStream_CHROMA_V_V_1_sel_rd =  (sc_logic) (~outStream_CHROMA_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_CHROMA_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_in.read()))) {
            outStream_CHROMA_V_V_1_sel_wr =  (sc_logic) (~outStream_CHROMA_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_CHROMA_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_CHROMA_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_CHROMA_V_V_1_state.read())))) {
            outStream_CHROMA_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_CHROMA_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_CHROMA_V_V_1_state.read())))) {
            outStream_CHROMA_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_CHROMA_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_CHROMA_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_CHROMA_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_out.read()))))) {
            outStream_CHROMA_V_V_1_state = ap_const_lv2_3;
        } else {
            outStream_CHROMA_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_LUMA_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_out.read()))) {
            outStream_LUMA_V_V_1_sel_rd =  (sc_logic) (~outStream_LUMA_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_LUMA_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_in.read()))) {
            outStream_LUMA_V_V_1_sel_wr =  (sc_logic) (~outStream_LUMA_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_LUMA_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_LUMA_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_LUMA_V_V_1_state.read())))) {
            outStream_LUMA_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_LUMA_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_LUMA_V_V_1_state.read())))) {
            outStream_LUMA_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_LUMA_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_LUMA_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_LUMA_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_out.read()))))) {
            outStream_LUMA_V_V_1_state = ap_const_lv2_3;
        } else {
            outStream_LUMA_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ((!(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        grayscale_valid_load_reg_111 = grayscale_valid.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_load_A.read())) {
        inStream_V_V_0_payload_A = inStream_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_load_B.read())) {
        inStream_V_V_0_payload_B = inStream_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_load_A.read())) {
        outStream_CHROMA_V_V_1_payload_A = inStream_V_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_load_B.read())) {
        outStream_CHROMA_V_V_1_payload_B = inStream_V_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_load_A.read())) {
        outStream_LUMA_V_V_1_payload_A = inStream_V_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_load_B.read())) {
        outStream_LUMA_V_V_1_payload_B = inStream_V_V_0_data_out.read();
    }
}

void ov7670_buffer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ov7670_buffer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ov7670_buffer::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ov7670_buffer::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_write_state2.read())) || (esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state2.read())));
}

void ov7670_buffer::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0));
}

void ov7670_buffer::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op28_write_state3.read())) || (esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op31_write_state3.read())));
}

void ov7670_buffer::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ov7670_buffer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ov7670_buffer::thread_ap_predicate_op25_write_state2() {
    ap_predicate_op25_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_64_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grayscale_valid.read()));
}

void ov7670_buffer::thread_ap_predicate_op27_write_state2() {
    ap_predicate_op27_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, grayscale_valid.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_64_p2.read()));
}

void ov7670_buffer::thread_ap_predicate_op28_write_state3() {
    ap_predicate_op28_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_64_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grayscale_valid_load_reg_111.read()));
}

void ov7670_buffer::thread_ap_predicate_op31_write_state3() {
    ap_predicate_op31_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_64_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, grayscale_valid_load_reg_111.read()));
}

void ov7670_buffer::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ov7670_buffer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ov7670_buffer::thread_enable_raw_stream_re_read_fu_64_p2() {
    enable_raw_stream_re_read_fu_64_p2 =  (sc_lv<1>) (enable_raw_stream.read());
}

void ov7670_buffer::thread_inStream_V_V_0_ack_in() {
    inStream_V_V_0_ack_in = inStream_V_V_0_state.read()[1];
}

void ov7670_buffer::thread_inStream_V_V_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        inStream_V_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_V_0_ack_out = ap_const_logic_0;
    }
}

void ov7670_buffer::thread_inStream_V_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_sel.read())) {
        inStream_V_V_0_data_out = inStream_V_V_0_payload_B.read();
    } else {
        inStream_V_V_0_data_out = inStream_V_V_0_payload_A.read();
    }
}

void ov7670_buffer::thread_inStream_V_V_0_load_A() {
    inStream_V_V_0_load_A = (inStream_V_V_0_state_cmp_full.read() & ~inStream_V_V_0_sel_wr.read());
}

void ov7670_buffer::thread_inStream_V_V_0_load_B() {
    inStream_V_V_0_load_B = (inStream_V_V_0_sel_wr.read() & inStream_V_V_0_state_cmp_full.read());
}

void ov7670_buffer::thread_inStream_V_V_0_sel() {
    inStream_V_V_0_sel = inStream_V_V_0_sel_rd.read();
}

void ov7670_buffer::thread_inStream_V_V_0_state_cmp_full() {
    inStream_V_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_V_0_state.read() != ap_const_lv2_1))[0];
}

void ov7670_buffer::thread_inStream_V_V_0_vld_in() {
    inStream_V_V_0_vld_in = inStream_V_V_TVALID.read();
}

void ov7670_buffer::thread_inStream_V_V_0_vld_out() {
    inStream_V_V_0_vld_out = inStream_V_V_0_state.read()[0];
}

void ov7670_buffer::thread_inStream_V_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        inStream_V_V_TDATA_blk_n = inStream_V_V_0_state.read()[0];
    } else {
        inStream_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void ov7670_buffer::thread_inStream_V_V_TREADY() {
    inStream_V_V_TREADY = inStream_V_V_0_state.read()[1];
}

void ov7670_buffer::thread_m_axi_gmem_ARADDR() {
    m_axi_gmem_ARADDR = ap_const_lv32_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARBURST() {
    m_axi_gmem_ARBURST = ap_const_lv2_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARCACHE() {
    m_axi_gmem_ARCACHE = ap_const_lv4_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARID() {
    m_axi_gmem_ARID = ap_const_lv1_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARLEN() {
    m_axi_gmem_ARLEN = ap_const_lv8_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARLOCK() {
    m_axi_gmem_ARLOCK = ap_const_lv2_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARPROT() {
    m_axi_gmem_ARPROT = ap_const_lv3_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARQOS() {
    m_axi_gmem_ARQOS = ap_const_lv4_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARREGION() {
    m_axi_gmem_ARREGION = ap_const_lv4_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARSIZE() {
    m_axi_gmem_ARSIZE = ap_const_lv3_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARUSER() {
    m_axi_gmem_ARUSER = ap_const_lv1_0;
}

void ov7670_buffer::thread_m_axi_gmem_ARVALID() {
    m_axi_gmem_ARVALID = ap_const_logic_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWADDR() {
    m_axi_gmem_AWADDR = ap_const_lv32_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWBURST() {
    m_axi_gmem_AWBURST = ap_const_lv2_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWCACHE() {
    m_axi_gmem_AWCACHE = ap_const_lv4_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWID() {
    m_axi_gmem_AWID = ap_const_lv1_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWLEN() {
    m_axi_gmem_AWLEN = ap_const_lv8_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWLOCK() {
    m_axi_gmem_AWLOCK = ap_const_lv2_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWPROT() {
    m_axi_gmem_AWPROT = ap_const_lv3_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWQOS() {
    m_axi_gmem_AWQOS = ap_const_lv4_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWREGION() {
    m_axi_gmem_AWREGION = ap_const_lv4_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWSIZE() {
    m_axi_gmem_AWSIZE = ap_const_lv3_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWUSER() {
    m_axi_gmem_AWUSER = ap_const_lv1_0;
}

void ov7670_buffer::thread_m_axi_gmem_AWVALID() {
    m_axi_gmem_AWVALID = ap_const_logic_0;
}

void ov7670_buffer::thread_m_axi_gmem_BREADY() {
    m_axi_gmem_BREADY = ap_const_logic_0;
}

void ov7670_buffer::thread_m_axi_gmem_RREADY() {
    m_axi_gmem_RREADY = ap_const_logic_0;
}

void ov7670_buffer::thread_m_axi_gmem_WDATA() {
    m_axi_gmem_WDATA = ap_const_lv32_0;
}

void ov7670_buffer::thread_m_axi_gmem_WID() {
    m_axi_gmem_WID = ap_const_lv1_0;
}

void ov7670_buffer::thread_m_axi_gmem_WLAST() {
    m_axi_gmem_WLAST = ap_const_logic_0;
}

void ov7670_buffer::thread_m_axi_gmem_WSTRB() {
    m_axi_gmem_WSTRB = ap_const_lv4_0;
}

void ov7670_buffer::thread_m_axi_gmem_WUSER() {
    m_axi_gmem_WUSER = ap_const_lv1_0;
}

void ov7670_buffer::thread_m_axi_gmem_WVALID() {
    m_axi_gmem_WVALID = ap_const_logic_0;
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_ack_in() {
    outStream_CHROMA_V_V_1_ack_in = outStream_CHROMA_V_V_1_state.read()[1];
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_ack_out() {
    outStream_CHROMA_V_V_1_ack_out = outStream_CHROMA_V_V_TREADY.read();
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_sel.read())) {
        outStream_CHROMA_V_V_1_data_out = outStream_CHROMA_V_V_1_payload_B.read();
    } else {
        outStream_CHROMA_V_V_1_data_out = outStream_CHROMA_V_V_1_payload_A.read();
    }
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_load_A() {
    outStream_CHROMA_V_V_1_load_A = (outStream_CHROMA_V_V_1_state_cmp_full.read() & ~outStream_CHROMA_V_V_1_sel_wr.read());
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_load_B() {
    outStream_CHROMA_V_V_1_load_B = (outStream_CHROMA_V_V_1_sel_wr.read() & outStream_CHROMA_V_V_1_state_cmp_full.read());
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_sel() {
    outStream_CHROMA_V_V_1_sel = outStream_CHROMA_V_V_1_sel_rd.read();
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_state_cmp_full() {
    outStream_CHROMA_V_V_1_state_cmp_full =  (sc_logic) ((!outStream_CHROMA_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_CHROMA_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_write_state2.read()) && 
         !(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_CHROMA_V_V_1_vld_in = ap_const_logic_0;
    }
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_1_vld_out() {
    outStream_CHROMA_V_V_1_vld_out = outStream_CHROMA_V_V_1_state.read()[0];
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_TDATA() {
    outStream_CHROMA_V_V_TDATA = outStream_CHROMA_V_V_1_data_out.read();
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_64_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grayscale_valid.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_64_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grayscale_valid_load_reg_111.read())))) {
        outStream_CHROMA_V_V_TDATA_blk_n = outStream_CHROMA_V_V_1_state.read()[1];
    } else {
        outStream_CHROMA_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void ov7670_buffer::thread_outStream_CHROMA_V_V_TVALID() {
    outStream_CHROMA_V_V_TVALID = outStream_CHROMA_V_V_1_state.read()[0];
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_ack_in() {
    outStream_LUMA_V_V_1_ack_in = outStream_LUMA_V_V_1_state.read()[1];
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_ack_out() {
    outStream_LUMA_V_V_1_ack_out = outStream_LUMA_V_V_TREADY.read();
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_sel.read())) {
        outStream_LUMA_V_V_1_data_out = outStream_LUMA_V_V_1_payload_B.read();
    } else {
        outStream_LUMA_V_V_1_data_out = outStream_LUMA_V_V_1_payload_A.read();
    }
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_load_A() {
    outStream_LUMA_V_V_1_load_A = (outStream_LUMA_V_V_1_state_cmp_full.read() & ~outStream_LUMA_V_V_1_sel_wr.read());
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_load_B() {
    outStream_LUMA_V_V_1_load_B = (outStream_LUMA_V_V_1_sel_wr.read() & outStream_LUMA_V_V_1_state_cmp_full.read());
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_sel() {
    outStream_LUMA_V_V_1_sel = outStream_LUMA_V_V_1_sel_rd.read();
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_state_cmp_full() {
    outStream_LUMA_V_V_1_state_cmp_full =  (sc_logic) ((!outStream_LUMA_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_LUMA_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state2.read()) && 
         !(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        outStream_LUMA_V_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_LUMA_V_V_1_vld_in = ap_const_logic_0;
    }
}

void ov7670_buffer::thread_outStream_LUMA_V_V_1_vld_out() {
    outStream_LUMA_V_V_1_vld_out = outStream_LUMA_V_V_1_state.read()[0];
}

void ov7670_buffer::thread_outStream_LUMA_V_V_TDATA() {
    outStream_LUMA_V_V_TDATA = outStream_LUMA_V_V_1_data_out.read();
}

void ov7670_buffer::thread_outStream_LUMA_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grayscale_valid.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_64_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_64_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grayscale_valid_load_reg_111.read())))) {
        outStream_LUMA_V_V_TDATA_blk_n = outStream_LUMA_V_V_1_state.read()[1];
    } else {
        outStream_LUMA_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void ov7670_buffer::thread_outStream_LUMA_V_V_TVALID() {
    outStream_LUMA_V_V_TVALID = outStream_LUMA_V_V_1_state.read()[0];
}

void ov7670_buffer::thread_tmp_5_fu_90_p2() {
    tmp_5_fu_90_p2 = (grayscale_valid_load_reg_111.read() ^ ap_const_lv1_1);
}

void ov7670_buffer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void ov7670_buffer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_V_V_TDATA\" :  \"" << inStream_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_V_V_TVALID\" :  \"" << inStream_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inStream_V_V_TREADY\" :  \"" << inStream_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"enable_raw_stream\" :  \"" << enable_raw_stream.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_LUMA_V_V_TDATA\" :  \"" << outStream_LUMA_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_LUMA_V_V_TVALID\" :  \"" << outStream_LUMA_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_LUMA_V_V_TREADY\" :  \"" << outStream_LUMA_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_CHROMA_V_V_TDATA\" :  \"" << outStream_CHROMA_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_CHROMA_V_V_TVALID\" :  \"" << outStream_CHROMA_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_CHROMA_V_V_TREADY\" :  \"" << outStream_CHROMA_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

