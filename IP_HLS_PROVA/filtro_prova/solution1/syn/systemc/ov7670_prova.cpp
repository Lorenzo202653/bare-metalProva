// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ov7670_prova.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ov7670_prova::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ov7670_prova::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> ov7670_prova::ap_ST_fsm_state1 = "1";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state2 = "10";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state3 = "100";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state4 = "1000";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state5 = "10000";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state6 = "100000";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> ov7670_prova::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> ov7670_prova::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ov7670_prova::ap_const_boolean_1 = true;
const sc_lv<1> ov7670_prova::ap_const_lv1_0 = "0";
const sc_lv<1> ov7670_prova::ap_const_lv1_1 = "1";
const sc_lv<2> ov7670_prova::ap_const_lv2_0 = "00";
const sc_lv<2> ov7670_prova::ap_const_lv2_2 = "10";
const sc_lv<2> ov7670_prova::ap_const_lv2_3 = "11";
const sc_lv<2> ov7670_prova::ap_const_lv2_1 = "1";
const sc_lv<32> ov7670_prova::ap_const_lv32_1 = "1";
const sc_lv<32> ov7670_prova::ap_const_lv32_3 = "11";
const sc_lv<32> ov7670_prova::ap_const_lv32_4 = "100";
const sc_lv<32> ov7670_prova::ap_const_lv32_9 = "1001";
const sc_lv<32> ov7670_prova::ap_const_lv32_A = "1010";
const sc_lv<32> ov7670_prova::ap_const_lv32_2 = "10";
const int ov7670_prova::C_S_AXI_DATA_WIDTH = "100000";
const int ov7670_prova::C_M_AXI_OUTSTREAM_GRAYSCALE_V_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_prova::C_M_AXI_OUTSTREAM_GRAYSCALE_V_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_prova::C_M_AXI_OUTSTREAM_GRAYSCALE_V_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_prova::C_M_AXI_OUTSTREAM_GRAYSCALE_V_CACHE_VALUE = "11";
const int ov7670_prova::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<3> ov7670_prova::ap_const_lv3_0 = "000";
const sc_lv<4> ov7670_prova::ap_const_lv4_0 = "0000";
const sc_lv<8> ov7670_prova::ap_const_lv8_0 = "00000000";
const bool ov7670_prova::ap_const_boolean_0 = false;
const sc_lv<32> ov7670_prova::ap_const_lv32_4B000 = "1001011000000000000";

ov7670_prova::ov7670_prova(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ov7670_prova_AXILiteS_s_axi_U = new ov7670_prova_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("ov7670_prova_AXILiteS_s_axi_U");
    ov7670_prova_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    ov7670_prova_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    ov7670_prova_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    ov7670_prova_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    ov7670_prova_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    ov7670_prova_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    ov7670_prova_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    ov7670_prova_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    ov7670_prova_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    ov7670_prova_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    ov7670_prova_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    ov7670_prova_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    ov7670_prova_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    ov7670_prova_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    ov7670_prova_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    ov7670_prova_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    ov7670_prova_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    ov7670_prova_AXILiteS_s_axi_U->ACLK(ap_clk);
    ov7670_prova_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    ov7670_prova_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    ov7670_prova_AXILiteS_s_axi_U->base_address(base_address);
    ov7670_prova_outStream_grayscale_V_m_axi_U = new ov7670_prova_outStream_grayscale_V_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_OUTSTREAM_GRAYSCALE_V_ID_WIDTH,C_M_AXI_OUTSTREAM_GRAYSCALE_V_ADDR_WIDTH,C_M_AXI_OUTSTREAM_GRAYSCALE_V_DATA_WIDTH,C_M_AXI_OUTSTREAM_GRAYSCALE_V_AWUSER_WIDTH,C_M_AXI_OUTSTREAM_GRAYSCALE_V_ARUSER_WIDTH,C_M_AXI_OUTSTREAM_GRAYSCALE_V_WUSER_WIDTH,C_M_AXI_OUTSTREAM_GRAYSCALE_V_RUSER_WIDTH,C_M_AXI_OUTSTREAM_GRAYSCALE_V_BUSER_WIDTH,C_M_AXI_OUTSTREAM_GRAYSCALE_V_TARGET_ADDR,C_M_AXI_OUTSTREAM_GRAYSCALE_V_USER_VALUE,C_M_AXI_OUTSTREAM_GRAYSCALE_V_PROT_VALUE,C_M_AXI_OUTSTREAM_GRAYSCALE_V_CACHE_VALUE>("ov7670_prova_outStream_grayscale_V_m_axi_U");
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWVALID(m_axi_outStream_grayscale_V_AWVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWREADY(m_axi_outStream_grayscale_V_AWREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWADDR(m_axi_outStream_grayscale_V_AWADDR);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWID(m_axi_outStream_grayscale_V_AWID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWLEN(m_axi_outStream_grayscale_V_AWLEN);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWSIZE(m_axi_outStream_grayscale_V_AWSIZE);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWBURST(m_axi_outStream_grayscale_V_AWBURST);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWLOCK(m_axi_outStream_grayscale_V_AWLOCK);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWCACHE(m_axi_outStream_grayscale_V_AWCACHE);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWPROT(m_axi_outStream_grayscale_V_AWPROT);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWQOS(m_axi_outStream_grayscale_V_AWQOS);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWREGION(m_axi_outStream_grayscale_V_AWREGION);
    ov7670_prova_outStream_grayscale_V_m_axi_U->AWUSER(m_axi_outStream_grayscale_V_AWUSER);
    ov7670_prova_outStream_grayscale_V_m_axi_U->WVALID(m_axi_outStream_grayscale_V_WVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->WREADY(m_axi_outStream_grayscale_V_WREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->WDATA(m_axi_outStream_grayscale_V_WDATA);
    ov7670_prova_outStream_grayscale_V_m_axi_U->WSTRB(m_axi_outStream_grayscale_V_WSTRB);
    ov7670_prova_outStream_grayscale_V_m_axi_U->WLAST(m_axi_outStream_grayscale_V_WLAST);
    ov7670_prova_outStream_grayscale_V_m_axi_U->WID(m_axi_outStream_grayscale_V_WID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->WUSER(m_axi_outStream_grayscale_V_WUSER);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARVALID(m_axi_outStream_grayscale_V_ARVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARREADY(m_axi_outStream_grayscale_V_ARREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARADDR(m_axi_outStream_grayscale_V_ARADDR);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARID(m_axi_outStream_grayscale_V_ARID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARLEN(m_axi_outStream_grayscale_V_ARLEN);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARSIZE(m_axi_outStream_grayscale_V_ARSIZE);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARBURST(m_axi_outStream_grayscale_V_ARBURST);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARLOCK(m_axi_outStream_grayscale_V_ARLOCK);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARCACHE(m_axi_outStream_grayscale_V_ARCACHE);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARPROT(m_axi_outStream_grayscale_V_ARPROT);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARQOS(m_axi_outStream_grayscale_V_ARQOS);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARREGION(m_axi_outStream_grayscale_V_ARREGION);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARUSER(m_axi_outStream_grayscale_V_ARUSER);
    ov7670_prova_outStream_grayscale_V_m_axi_U->RVALID(m_axi_outStream_grayscale_V_RVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->RREADY(m_axi_outStream_grayscale_V_RREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->RDATA(m_axi_outStream_grayscale_V_RDATA);
    ov7670_prova_outStream_grayscale_V_m_axi_U->RLAST(m_axi_outStream_grayscale_V_RLAST);
    ov7670_prova_outStream_grayscale_V_m_axi_U->RID(m_axi_outStream_grayscale_V_RID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->RUSER(m_axi_outStream_grayscale_V_RUSER);
    ov7670_prova_outStream_grayscale_V_m_axi_U->RRESP(m_axi_outStream_grayscale_V_RRESP);
    ov7670_prova_outStream_grayscale_V_m_axi_U->BVALID(m_axi_outStream_grayscale_V_BVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->BREADY(m_axi_outStream_grayscale_V_BREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->BRESP(m_axi_outStream_grayscale_V_BRESP);
    ov7670_prova_outStream_grayscale_V_m_axi_U->BID(m_axi_outStream_grayscale_V_BID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->BUSER(m_axi_outStream_grayscale_V_BUSER);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ACLK(ap_clk);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ARESET(ap_rst_n_inv);
    ov7670_prova_outStream_grayscale_V_m_axi_U->ACLK_EN(ap_var_for_const0);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARVALID(ap_var_for_const1);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARREADY(outStream_grayscale_V_ARREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARADDR(ap_var_for_const2);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARID(ap_var_for_const3);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARLEN(ap_var_for_const2);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARSIZE(ap_var_for_const4);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARLOCK(ap_var_for_const5);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARCACHE(ap_var_for_const6);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARQOS(ap_var_for_const6);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARPROT(ap_var_for_const4);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARUSER(ap_var_for_const3);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARBURST(ap_var_for_const5);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_ARREGION(ap_var_for_const6);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_RVALID(outStream_grayscale_V_RVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_RREADY(ap_var_for_const1);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_RDATA(outStream_grayscale_V_RDATA);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_RID(outStream_grayscale_V_RID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_RUSER(outStream_grayscale_V_RUSER);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_RRESP(outStream_grayscale_V_RRESP);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_RLAST(outStream_grayscale_V_RLAST);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWVALID(outStream_grayscale_V_AWVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWREADY(outStream_grayscale_V_AWREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWADDR(outStream_grayscale_s_reg_200);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWID(ap_var_for_const3);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWLEN(ap_var_for_const7);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWSIZE(ap_var_for_const4);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWLOCK(ap_var_for_const5);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWCACHE(ap_var_for_const6);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWQOS(ap_var_for_const6);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWPROT(ap_var_for_const4);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWUSER(ap_var_for_const3);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWBURST(ap_var_for_const5);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_AWREGION(ap_var_for_const6);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_WVALID(outStream_grayscale_V_WVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_WREADY(outStream_grayscale_V_WREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_WDATA(ap_var_for_const8);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_WID(ap_var_for_const3);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_WUSER(ap_var_for_const3);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_WLAST(ap_var_for_const1);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_WSTRB(ap_var_for_const9);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_BVALID(outStream_grayscale_V_BVALID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_BREADY(outStream_grayscale_V_BREADY);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_BRESP(outStream_grayscale_V_BRESP);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_BID(outStream_grayscale_V_BID);
    ov7670_prova_outStream_grayscale_V_m_axi_U->I_BUSER(outStream_grayscale_V_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state10_io);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( enable_raw_stream_re_read_fu_78_p2 );

    SC_METHOD(thread_ap_block_state11);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );

    SC_METHOD(thread_ap_block_state11_io);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( ap_predicate_op57_write_state11 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( ap_predicate_op35_write_state2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( enable_raw_stream_re_read_fu_78_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op35_write_state2);
    sensitive << ( grayscale_valid );
    sensitive << ( enable_raw_stream_re_read_fu_78_p2 );

    SC_METHOD(thread_ap_predicate_op57_write_state11);
    sensitive << ( enable_raw_stream_re_read_fu_78_p2 );
    sensitive << ( grayscale_valid_load_reg_195 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_outStream_grayscale_V_AWREADY);
    sensitive << ( outStream_grayscale_V_AWREADY );
    sensitive << ( ap_reg_ioackin_outStream_grayscale_V_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_outStream_grayscale_V_WREADY);
    sensitive << ( outStream_grayscale_V_WREADY );
    sensitive << ( ap_reg_ioackin_outStream_grayscale_V_WREADY );

    SC_METHOD(thread_enable_raw_stream_re_read_fu_78_p2);
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( enable_raw_stream );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_grayscale_valid_load_load_fu_116_p1);
    sensitive << ( grayscale_valid );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_inStream_V_V_0_ack_in);
    sensitive << ( inStream_V_V_0_state );

    SC_METHOD(thread_inStream_V_V_0_ack_out);
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_inStream_V_V_0_data_out);
    sensitive << ( inStream_V_V_0_payload_A );
    sensitive << ( inStream_V_V_0_payload_B );
    sensitive << ( inStream_V_V_0_sel );

    SC_METHOD(thread_inStream_V_V_0_load_A);
    sensitive << ( inStream_V_V_0_sel_wr );
    sensitive << ( inStream_V_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_V_0_load_B);
    sensitive << ( inStream_V_V_0_sel_wr );
    sensitive << ( inStream_V_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_V_0_sel);
    sensitive << ( inStream_V_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_V_0_state_cmp_full);
    sensitive << ( inStream_V_V_0_state );

    SC_METHOD(thread_inStream_V_V_0_vld_in);
    sensitive << ( inStream_V_V_TVALID );

    SC_METHOD(thread_inStream_V_V_0_vld_out);
    sensitive << ( inStream_V_V_0_state );

    SC_METHOD(thread_inStream_V_V_TDATA_blk_n);
    sensitive << ( inStream_V_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_inStream_V_V_TREADY);
    sensitive << ( inStream_V_V_0_state );

    SC_METHOD(thread_offset_fu_141_p2);
    sensitive << ( t_V_fu_130_p3 );
    sensitive << ( tmp_fu_138_p1 );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_ack_in);
    sensitive << ( outStream_CHROMA_V_V_1_state );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_ack_out);
    sensitive << ( outStream_CHROMA_V_V_TREADY );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_data_out);
    sensitive << ( outStream_CHROMA_V_V_1_payload_A );
    sensitive << ( outStream_CHROMA_V_V_1_payload_B );
    sensitive << ( outStream_CHROMA_V_V_1_sel );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_load_A);
    sensitive << ( outStream_CHROMA_V_V_1_sel_wr );
    sensitive << ( outStream_CHROMA_V_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_load_B);
    sensitive << ( outStream_CHROMA_V_V_1_sel_wr );
    sensitive << ( outStream_CHROMA_V_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_sel);
    sensitive << ( outStream_CHROMA_V_V_1_sel_rd );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_state_cmp_full);
    sensitive << ( outStream_CHROMA_V_V_1_state );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_vld_in);
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_outStream_CHROMA_V_V_1_vld_out);
    sensitive << ( outStream_CHROMA_V_V_1_state );

    SC_METHOD(thread_outStream_CHROMA_V_V_TDATA);
    sensitive << ( outStream_CHROMA_V_V_1_data_out );

    SC_METHOD(thread_outStream_CHROMA_V_V_TDATA_blk_n);
    sensitive << ( outStream_CHROMA_V_V_1_state );
    sensitive << ( grayscale_valid );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( enable_raw_stream_re_read_fu_78_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_outStream_CHROMA_V_V_TVALID);
    sensitive << ( outStream_CHROMA_V_V_1_state );

    SC_METHOD(thread_outStream_LUMA_V_V_1_ack_in);
    sensitive << ( outStream_LUMA_V_V_1_state );

    SC_METHOD(thread_outStream_LUMA_V_V_1_ack_out);
    sensitive << ( outStream_LUMA_V_V_TREADY );

    SC_METHOD(thread_outStream_LUMA_V_V_1_data_out);
    sensitive << ( outStream_LUMA_V_V_1_payload_A );
    sensitive << ( outStream_LUMA_V_V_1_payload_B );
    sensitive << ( outStream_LUMA_V_V_1_sel );

    SC_METHOD(thread_outStream_LUMA_V_V_1_load_A);
    sensitive << ( outStream_LUMA_V_V_1_sel_wr );
    sensitive << ( outStream_LUMA_V_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_LUMA_V_V_1_load_B);
    sensitive << ( outStream_LUMA_V_V_1_sel_wr );
    sensitive << ( outStream_LUMA_V_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_LUMA_V_V_1_sel);
    sensitive << ( outStream_LUMA_V_V_1_sel_rd );

    SC_METHOD(thread_outStream_LUMA_V_V_1_state_cmp_full);
    sensitive << ( outStream_LUMA_V_V_1_state );

    SC_METHOD(thread_outStream_LUMA_V_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( enable_raw_stream_re_read_fu_78_p2 );
    sensitive << ( outStream_grayscale_V_BVALID );
    sensitive << ( ap_block_state10_io );

    SC_METHOD(thread_outStream_LUMA_V_V_1_vld_out);
    sensitive << ( outStream_LUMA_V_V_1_state );

    SC_METHOD(thread_outStream_LUMA_V_V_TDATA);
    sensitive << ( outStream_LUMA_V_V_1_data_out );

    SC_METHOD(thread_outStream_LUMA_V_V_TDATA_blk_n);
    sensitive << ( outStream_LUMA_V_V_1_state );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( enable_raw_stream_re_read_fu_78_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grayscale_valid_load_reg_195 );

    SC_METHOD(thread_outStream_LUMA_V_V_TVALID);
    sensitive << ( outStream_LUMA_V_V_1_state );

    SC_METHOD(thread_outStream_grayscale_V_AWVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_outStream_grayscale_V_AWREADY );

    SC_METHOD(thread_outStream_grayscale_V_BREADY);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( outStream_grayscale_V_BVALID );
    sensitive << ( ap_block_state10_io );

    SC_METHOD(thread_outStream_grayscale_V_WVALID);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_reg_ioackin_outStream_grayscale_V_WREADY );

    SC_METHOD(thread_outStream_grayscale_V_blk_n_AW);
    sensitive << ( m_axi_outStream_grayscale_V_AWREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_outStream_grayscale_V_blk_n_B);
    sensitive << ( m_axi_outStream_grayscale_V_BVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_outStream_grayscale_V_blk_n_W);
    sensitive << ( m_axi_outStream_grayscale_V_WREADY );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_t_V_fu_130_p3);
    sensitive << ( inner_index_V );
    sensitive << ( tmp_3_fu_124_p2 );

    SC_METHOD(thread_tmp_3_fu_124_p2);
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( inner_index_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grayscale_valid_load_load_fu_116_p1 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_tmp_7_fu_147_p1);
    sensitive << ( offset_fu_141_p2 );

    SC_METHOD(thread_tmp_8_fu_157_p2);
    sensitive << ( t_V_fu_130_p3 );

    SC_METHOD(thread_tmp_fu_138_p1);
    sensitive << ( base_address_read_reg_180 );

    SC_METHOD(thread_tmp_s_fu_169_p2);
    sensitive << ( grayscale_valid_load_reg_195 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( inStream_V_V_0_vld_out );
    sensitive << ( outStream_LUMA_V_V_1_ack_in );
    sensitive << ( outStream_CHROMA_V_V_1_ack_in );
    sensitive << ( grayscale_valid );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grayscale_valid_load_load_fu_116_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( outStream_grayscale_V_BVALID );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_sig_ioackin_outStream_grayscale_V_AWREADY );
    sensitive << ( ap_block_state10_io );
    sensitive << ( ap_sig_ioackin_outStream_grayscale_V_WREADY );
    sensitive << ( ap_block_state11_io );
    sensitive << ( ap_block_state3_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const9);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "00000000001";
    inStream_V_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_V_0_state = "00";
    outStream_LUMA_V_V_1_sel_rd = SC_LOGIC_0;
    outStream_LUMA_V_V_1_sel_wr = SC_LOGIC_0;
    outStream_LUMA_V_V_1_state = "00";
    outStream_CHROMA_V_V_1_sel_rd = SC_LOGIC_0;
    outStream_CHROMA_V_V_1_sel_wr = SC_LOGIC_0;
    outStream_CHROMA_V_V_1_state = "00";
    grayscale_valid = "0";
    inner_index_V = "00000000000000000000000000000000";
    ap_reg_ioackin_outStream_grayscale_V_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_outStream_grayscale_V_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ov7670_prova_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, inStream_V_V_TDATA, "(port)inStream_V_V_TDATA");
    sc_trace(mVcdFile, inStream_V_V_TVALID, "(port)inStream_V_V_TVALID");
    sc_trace(mVcdFile, inStream_V_V_TREADY, "(port)inStream_V_V_TREADY");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWVALID, "(port)m_axi_outStream_grayscale_V_AWVALID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWREADY, "(port)m_axi_outStream_grayscale_V_AWREADY");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWADDR, "(port)m_axi_outStream_grayscale_V_AWADDR");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWID, "(port)m_axi_outStream_grayscale_V_AWID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWLEN, "(port)m_axi_outStream_grayscale_V_AWLEN");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWSIZE, "(port)m_axi_outStream_grayscale_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWBURST, "(port)m_axi_outStream_grayscale_V_AWBURST");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWLOCK, "(port)m_axi_outStream_grayscale_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWCACHE, "(port)m_axi_outStream_grayscale_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWPROT, "(port)m_axi_outStream_grayscale_V_AWPROT");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWQOS, "(port)m_axi_outStream_grayscale_V_AWQOS");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWREGION, "(port)m_axi_outStream_grayscale_V_AWREGION");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_AWUSER, "(port)m_axi_outStream_grayscale_V_AWUSER");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_WVALID, "(port)m_axi_outStream_grayscale_V_WVALID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_WREADY, "(port)m_axi_outStream_grayscale_V_WREADY");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_WDATA, "(port)m_axi_outStream_grayscale_V_WDATA");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_WSTRB, "(port)m_axi_outStream_grayscale_V_WSTRB");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_WLAST, "(port)m_axi_outStream_grayscale_V_WLAST");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_WID, "(port)m_axi_outStream_grayscale_V_WID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_WUSER, "(port)m_axi_outStream_grayscale_V_WUSER");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARVALID, "(port)m_axi_outStream_grayscale_V_ARVALID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARREADY, "(port)m_axi_outStream_grayscale_V_ARREADY");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARADDR, "(port)m_axi_outStream_grayscale_V_ARADDR");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARID, "(port)m_axi_outStream_grayscale_V_ARID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARLEN, "(port)m_axi_outStream_grayscale_V_ARLEN");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARSIZE, "(port)m_axi_outStream_grayscale_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARBURST, "(port)m_axi_outStream_grayscale_V_ARBURST");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARLOCK, "(port)m_axi_outStream_grayscale_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARCACHE, "(port)m_axi_outStream_grayscale_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARPROT, "(port)m_axi_outStream_grayscale_V_ARPROT");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARQOS, "(port)m_axi_outStream_grayscale_V_ARQOS");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARREGION, "(port)m_axi_outStream_grayscale_V_ARREGION");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_ARUSER, "(port)m_axi_outStream_grayscale_V_ARUSER");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_RVALID, "(port)m_axi_outStream_grayscale_V_RVALID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_RREADY, "(port)m_axi_outStream_grayscale_V_RREADY");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_RDATA, "(port)m_axi_outStream_grayscale_V_RDATA");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_RLAST, "(port)m_axi_outStream_grayscale_V_RLAST");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_RID, "(port)m_axi_outStream_grayscale_V_RID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_RUSER, "(port)m_axi_outStream_grayscale_V_RUSER");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_RRESP, "(port)m_axi_outStream_grayscale_V_RRESP");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_BVALID, "(port)m_axi_outStream_grayscale_V_BVALID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_BREADY, "(port)m_axi_outStream_grayscale_V_BREADY");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_BRESP, "(port)m_axi_outStream_grayscale_V_BRESP");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_BID, "(port)m_axi_outStream_grayscale_V_BID");
    sc_trace(mVcdFile, m_axi_outStream_grayscale_V_BUSER, "(port)m_axi_outStream_grayscale_V_BUSER");
    sc_trace(mVcdFile, enable_raw_stream, "(port)enable_raw_stream");
    sc_trace(mVcdFile, outStream_LUMA_V_V_TDATA, "(port)outStream_LUMA_V_V_TDATA");
    sc_trace(mVcdFile, outStream_LUMA_V_V_TVALID, "(port)outStream_LUMA_V_V_TVALID");
    sc_trace(mVcdFile, outStream_LUMA_V_V_TREADY, "(port)outStream_LUMA_V_V_TREADY");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_TDATA, "(port)outStream_CHROMA_V_V_TDATA");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_TVALID, "(port)outStream_CHROMA_V_V_TVALID");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_TREADY, "(port)outStream_CHROMA_V_V_TREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, inStream_V_V_0_data_out, "inStream_V_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_V_0_vld_in, "inStream_V_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_V_0_vld_out, "inStream_V_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_V_0_ack_in, "inStream_V_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_V_0_ack_out, "inStream_V_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_V_0_payload_A, "inStream_V_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_V_0_payload_B, "inStream_V_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_V_0_sel_rd, "inStream_V_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_V_0_sel_wr, "inStream_V_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_V_0_sel, "inStream_V_V_0_sel");
    sc_trace(mVcdFile, inStream_V_V_0_load_A, "inStream_V_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_V_0_load_B, "inStream_V_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_V_0_state, "inStream_V_V_0_state");
    sc_trace(mVcdFile, inStream_V_V_0_state_cmp_full, "inStream_V_V_0_state_cmp_full");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_data_out, "outStream_LUMA_V_V_1_data_out");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_vld_in, "outStream_LUMA_V_V_1_vld_in");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_vld_out, "outStream_LUMA_V_V_1_vld_out");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_ack_in, "outStream_LUMA_V_V_1_ack_in");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_ack_out, "outStream_LUMA_V_V_1_ack_out");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_payload_A, "outStream_LUMA_V_V_1_payload_A");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_payload_B, "outStream_LUMA_V_V_1_payload_B");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_sel_rd, "outStream_LUMA_V_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_sel_wr, "outStream_LUMA_V_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_sel, "outStream_LUMA_V_V_1_sel");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_load_A, "outStream_LUMA_V_V_1_load_A");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_load_B, "outStream_LUMA_V_V_1_load_B");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_state, "outStream_LUMA_V_V_1_state");
    sc_trace(mVcdFile, outStream_LUMA_V_V_1_state_cmp_full, "outStream_LUMA_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_data_out, "outStream_CHROMA_V_V_1_data_out");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_vld_in, "outStream_CHROMA_V_V_1_vld_in");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_vld_out, "outStream_CHROMA_V_V_1_vld_out");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_ack_in, "outStream_CHROMA_V_V_1_ack_in");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_ack_out, "outStream_CHROMA_V_V_1_ack_out");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_payload_A, "outStream_CHROMA_V_V_1_payload_A");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_payload_B, "outStream_CHROMA_V_V_1_payload_B");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_sel_rd, "outStream_CHROMA_V_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_sel_wr, "outStream_CHROMA_V_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_sel, "outStream_CHROMA_V_V_1_sel");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_load_A, "outStream_CHROMA_V_V_1_load_A");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_load_B, "outStream_CHROMA_V_V_1_load_B");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_state, "outStream_CHROMA_V_V_1_state");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_1_state_cmp_full, "outStream_CHROMA_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, base_address, "base_address");
    sc_trace(mVcdFile, grayscale_valid, "grayscale_valid");
    sc_trace(mVcdFile, inner_index_V, "inner_index_V");
    sc_trace(mVcdFile, inStream_V_V_TDATA_blk_n, "inStream_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, outStream_grayscale_V_blk_n_AW, "outStream_grayscale_V_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, outStream_grayscale_V_blk_n_W, "outStream_grayscale_V_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, outStream_grayscale_V_blk_n_B, "outStream_grayscale_V_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, outStream_LUMA_V_V_TDATA_blk_n, "outStream_LUMA_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, enable_raw_stream_re_read_fu_78_p2, "enable_raw_stream_re_read_fu_78_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grayscale_valid_load_reg_195, "grayscale_valid_load_reg_195");
    sc_trace(mVcdFile, outStream_CHROMA_V_V_TDATA_blk_n, "outStream_CHROMA_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, grayscale_valid_load_load_fu_116_p1, "grayscale_valid_load_load_fu_116_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, outStream_grayscale_V_AWVALID, "outStream_grayscale_V_AWVALID");
    sc_trace(mVcdFile, outStream_grayscale_V_AWREADY, "outStream_grayscale_V_AWREADY");
    sc_trace(mVcdFile, outStream_grayscale_V_WVALID, "outStream_grayscale_V_WVALID");
    sc_trace(mVcdFile, outStream_grayscale_V_WREADY, "outStream_grayscale_V_WREADY");
    sc_trace(mVcdFile, outStream_grayscale_V_ARREADY, "outStream_grayscale_V_ARREADY");
    sc_trace(mVcdFile, outStream_grayscale_V_RVALID, "outStream_grayscale_V_RVALID");
    sc_trace(mVcdFile, outStream_grayscale_V_RDATA, "outStream_grayscale_V_RDATA");
    sc_trace(mVcdFile, outStream_grayscale_V_RLAST, "outStream_grayscale_V_RLAST");
    sc_trace(mVcdFile, outStream_grayscale_V_RID, "outStream_grayscale_V_RID");
    sc_trace(mVcdFile, outStream_grayscale_V_RUSER, "outStream_grayscale_V_RUSER");
    sc_trace(mVcdFile, outStream_grayscale_V_RRESP, "outStream_grayscale_V_RRESP");
    sc_trace(mVcdFile, outStream_grayscale_V_BVALID, "outStream_grayscale_V_BVALID");
    sc_trace(mVcdFile, outStream_grayscale_V_BREADY, "outStream_grayscale_V_BREADY");
    sc_trace(mVcdFile, outStream_grayscale_V_BRESP, "outStream_grayscale_V_BRESP");
    sc_trace(mVcdFile, outStream_grayscale_V_BID, "outStream_grayscale_V_BID");
    sc_trace(mVcdFile, outStream_grayscale_V_BUSER, "outStream_grayscale_V_BUSER");
    sc_trace(mVcdFile, base_address_read_reg_180, "base_address_read_reg_180");
    sc_trace(mVcdFile, ap_predicate_op35_write_state2, "ap_predicate_op35_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, tmp_V_reg_189, "tmp_V_reg_189");
    sc_trace(mVcdFile, outStream_grayscale_s_reg_200, "outStream_grayscale_s_reg_200");
    sc_trace(mVcdFile, tmp_7_fu_147_p1, "tmp_7_fu_147_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_outStream_grayscale_V_AWREADY, "ap_reg_ioackin_outStream_grayscale_V_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_outStream_grayscale_V_AWREADY, "ap_sig_ioackin_outStream_grayscale_V_AWREADY");
    sc_trace(mVcdFile, ap_block_state10_io, "ap_block_state10_io");
    sc_trace(mVcdFile, ap_reg_ioackin_outStream_grayscale_V_WREADY, "ap_reg_ioackin_outStream_grayscale_V_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_outStream_grayscale_V_WREADY, "ap_sig_ioackin_outStream_grayscale_V_WREADY");
    sc_trace(mVcdFile, tmp_s_fu_169_p2, "tmp_s_fu_169_p2");
    sc_trace(mVcdFile, ap_block_state11, "ap_block_state11");
    sc_trace(mVcdFile, ap_predicate_op57_write_state11, "ap_predicate_op57_write_state11");
    sc_trace(mVcdFile, ap_block_state11_io, "ap_block_state11_io");
    sc_trace(mVcdFile, tmp_8_fu_157_p2, "tmp_8_fu_157_p2");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, tmp_3_fu_124_p2, "tmp_3_fu_124_p2");
    sc_trace(mVcdFile, t_V_fu_130_p3, "t_V_fu_130_p3");
    sc_trace(mVcdFile, tmp_fu_138_p1, "tmp_fu_138_p1");
    sc_trace(mVcdFile, offset_fu_141_p2, "offset_fu_141_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ov7670_prova.hdltvin.dat");
    mHdltvoutHandle.open("ov7670_prova.hdltvout.dat");
}

ov7670_prova::~ov7670_prova() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ov7670_prova_AXILiteS_s_axi_U;
    delete ov7670_prova_outStream_grayscale_V_m_axi_U;
}

void ov7670_prova::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ov7670_prova::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void ov7670_prova::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void ov7670_prova::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void ov7670_prova::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv1_1;
}

void ov7670_prova::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void ov7670_prova::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_1;
}

void ov7670_prova::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void ov7670_prova::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void ov7670_prova::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_0;
}

void ov7670_prova::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_outStream_grayscale_V_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_outStream_grayscale_V_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_outStream_grayscale_V_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_grayscale_V_AWREADY.read())) {
                ap_reg_ioackin_outStream_grayscale_V_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_outStream_grayscale_V_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_outStream_grayscale_V_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_outStream_grayscale_V_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_grayscale_V_WREADY.read())) {
                ap_reg_ioackin_outStream_grayscale_V_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grayscale_valid = ap_const_lv1_0;
    } else {
        if ((!(esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
            grayscale_valid = tmp_s_fu_169_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_out.read()))) {
            inStream_V_V_0_sel_rd =  (sc_logic) (~inStream_V_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_in.read()))) {
            inStream_V_V_0_sel_wr =  (sc_logic) (~inStream_V_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_2)))) {
            inStream_V_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_1)))) {
            inStream_V_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inStream_V_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_ack_out.read()))))) {
            inStream_V_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inner_index_V = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
             esl_seteq<1,1,1>(grayscale_valid_load_load_fu_116_p1.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            inner_index_V = tmp_8_fu_157_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_CHROMA_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_out.read()))) {
            outStream_CHROMA_V_V_1_sel_rd =  (sc_logic) (~outStream_CHROMA_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_CHROMA_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_in.read()))) {
            outStream_CHROMA_V_V_1_sel_wr =  (sc_logic) (~outStream_CHROMA_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_CHROMA_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_CHROMA_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_CHROMA_V_V_1_state.read())))) {
            outStream_CHROMA_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_CHROMA_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_CHROMA_V_V_1_state.read())))) {
            outStream_CHROMA_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_CHROMA_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_CHROMA_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_CHROMA_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_CHROMA_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_ack_out.read()))))) {
            outStream_CHROMA_V_V_1_state = ap_const_lv2_3;
        } else {
            outStream_CHROMA_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_LUMA_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_out.read()))) {
            outStream_LUMA_V_V_1_sel_rd =  (sc_logic) (~outStream_LUMA_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_LUMA_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_in.read()))) {
            outStream_LUMA_V_V_1_sel_wr =  (sc_logic) (~outStream_LUMA_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_LUMA_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_LUMA_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_LUMA_V_V_1_state.read())))) {
            outStream_LUMA_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_LUMA_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_LUMA_V_V_1_state.read())))) {
            outStream_LUMA_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_LUMA_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_LUMA_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_LUMA_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_LUMA_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_ack_out.read()))))) {
            outStream_LUMA_V_V_1_state = ap_const_lv2_3;
        } else {
            outStream_LUMA_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        base_address_read_reg_180 = base_address.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        grayscale_valid_load_reg_195 = grayscale_valid.read();
        tmp_V_reg_189 = inStream_V_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_load_A.read())) {
        inStream_V_V_0_payload_A = inStream_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_load_B.read())) {
        inStream_V_V_0_payload_B = inStream_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_load_A.read())) {
        outStream_CHROMA_V_V_1_payload_A = inStream_V_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_load_B.read())) {
        outStream_CHROMA_V_V_1_payload_B = inStream_V_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_load_A.read())) {
        outStream_LUMA_V_V_1_payload_A = tmp_V_reg_189.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_load_B.read())) {
        outStream_LUMA_V_V_1_payload_B = tmp_V_reg_189.read();
    }
    if ((!(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(grayscale_valid_load_load_fu_116_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        outStream_grayscale_s_reg_200 =  (sc_lv<32>) (tmp_7_fu_147_p1.read());
    }
}

void ov7670_prova::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ov7670_prova::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void ov7670_prova::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void ov7670_prova::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ov7670_prova::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ov7670_prova::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ov7670_prova::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void ov7670_prova::thread_ap_block_state10_io() {
    ap_block_state10_io = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read()) && esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0));
}

void ov7670_prova::thread_ap_block_state11() {
    ap_block_state11 = (esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0));
}

void ov7670_prova::thread_ap_block_state11_io() {
    ap_block_state11_io = (esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state11.read()));
}

void ov7670_prova::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read()));
}

void ov7670_prova::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read()) && esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0));
}

void ov7670_prova::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ov7670_prova::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ov7670_prova::thread_ap_predicate_op35_write_state2() {
    ap_predicate_op35_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read()) && esl_seteq<1,1,1>(grayscale_valid.read(), ap_const_lv1_0));
}

void ov7670_prova::thread_ap_predicate_op57_write_state11() {
    ap_predicate_op57_write_state11 = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, grayscale_valid_load_reg_195.read()));
}

void ov7670_prova::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ov7670_prova::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ov7670_prova::thread_ap_sig_ioackin_outStream_grayscale_V_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_grayscale_V_AWREADY.read())) {
        ap_sig_ioackin_outStream_grayscale_V_AWREADY = outStream_grayscale_V_AWREADY.read();
    } else {
        ap_sig_ioackin_outStream_grayscale_V_AWREADY = ap_const_logic_1;
    }
}

void ov7670_prova::thread_ap_sig_ioackin_outStream_grayscale_V_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_grayscale_V_WREADY.read())) {
        ap_sig_ioackin_outStream_grayscale_V_WREADY = outStream_grayscale_V_WREADY.read();
    } else {
        ap_sig_ioackin_outStream_grayscale_V_WREADY = ap_const_logic_1;
    }
}

void ov7670_prova::thread_enable_raw_stream_re_read_fu_78_p2() {
    enable_raw_stream_re_read_fu_78_p2 =  (sc_lv<1>) (enable_raw_stream.read());
}

void ov7670_prova::thread_grayscale_valid_load_load_fu_116_p1() {
    grayscale_valid_load_load_fu_116_p1 = grayscale_valid.read();
}

void ov7670_prova::thread_inStream_V_V_0_ack_in() {
    inStream_V_V_0_ack_in = inStream_V_V_0_state.read()[1];
}

void ov7670_prova::thread_inStream_V_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        inStream_V_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_V_0_ack_out = ap_const_logic_0;
    }
}

void ov7670_prova::thread_inStream_V_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_V_0_sel.read())) {
        inStream_V_V_0_data_out = inStream_V_V_0_payload_B.read();
    } else {
        inStream_V_V_0_data_out = inStream_V_V_0_payload_A.read();
    }
}

void ov7670_prova::thread_inStream_V_V_0_load_A() {
    inStream_V_V_0_load_A = (inStream_V_V_0_state_cmp_full.read() & ~inStream_V_V_0_sel_wr.read());
}

void ov7670_prova::thread_inStream_V_V_0_load_B() {
    inStream_V_V_0_load_B = (inStream_V_V_0_sel_wr.read() & inStream_V_V_0_state_cmp_full.read());
}

void ov7670_prova::thread_inStream_V_V_0_sel() {
    inStream_V_V_0_sel = inStream_V_V_0_sel_rd.read();
}

void ov7670_prova::thread_inStream_V_V_0_state_cmp_full() {
    inStream_V_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_V_0_state.read() != ap_const_lv2_1))[0];
}

void ov7670_prova::thread_inStream_V_V_0_vld_in() {
    inStream_V_V_0_vld_in = inStream_V_V_TVALID.read();
}

void ov7670_prova::thread_inStream_V_V_0_vld_out() {
    inStream_V_V_0_vld_out = inStream_V_V_0_state.read()[0];
}

void ov7670_prova::thread_inStream_V_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        inStream_V_V_TDATA_blk_n = inStream_V_V_0_state.read()[0];
    } else {
        inStream_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void ov7670_prova::thread_inStream_V_V_TREADY() {
    inStream_V_V_TREADY = inStream_V_V_0_state.read()[1];
}

void ov7670_prova::thread_offset_fu_141_p2() {
    offset_fu_141_p2 = (!t_V_fu_130_p3.read().is_01() || !tmp_fu_138_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_fu_130_p3.read()) + sc_biguint<32>(tmp_fu_138_p1.read()));
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_ack_in() {
    outStream_CHROMA_V_V_1_ack_in = outStream_CHROMA_V_V_1_state.read()[1];
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_ack_out() {
    outStream_CHROMA_V_V_1_ack_out = outStream_CHROMA_V_V_TREADY.read();
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_CHROMA_V_V_1_sel.read())) {
        outStream_CHROMA_V_V_1_data_out = outStream_CHROMA_V_V_1_payload_B.read();
    } else {
        outStream_CHROMA_V_V_1_data_out = outStream_CHROMA_V_V_1_payload_A.read();
    }
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_load_A() {
    outStream_CHROMA_V_V_1_load_A = (outStream_CHROMA_V_V_1_state_cmp_full.read() & ~outStream_CHROMA_V_V_1_sel_wr.read());
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_load_B() {
    outStream_CHROMA_V_V_1_load_B = (outStream_CHROMA_V_V_1_sel_wr.read() & outStream_CHROMA_V_V_1_state_cmp_full.read());
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_sel() {
    outStream_CHROMA_V_V_1_sel = outStream_CHROMA_V_V_1_sel_rd.read();
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_state_cmp_full() {
    outStream_CHROMA_V_V_1_state_cmp_full =  (sc_logic) ((!outStream_CHROMA_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_CHROMA_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read()) && 
         !(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_CHROMA_V_V_1_vld_in = ap_const_logic_0;
    }
}

void ov7670_prova::thread_outStream_CHROMA_V_V_1_vld_out() {
    outStream_CHROMA_V_V_1_vld_out = outStream_CHROMA_V_V_1_state.read()[0];
}

void ov7670_prova::thread_outStream_CHROMA_V_V_TDATA() {
    outStream_CHROMA_V_V_TDATA = outStream_CHROMA_V_V_1_data_out.read();
}

void ov7670_prova::thread_outStream_CHROMA_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read()) && 
          esl_seteq<1,1,1>(grayscale_valid.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())))) {
        outStream_CHROMA_V_V_TDATA_blk_n = outStream_CHROMA_V_V_1_state.read()[1];
    } else {
        outStream_CHROMA_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void ov7670_prova::thread_outStream_CHROMA_V_V_TVALID() {
    outStream_CHROMA_V_V_TVALID = outStream_CHROMA_V_V_1_state.read()[0];
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_ack_in() {
    outStream_LUMA_V_V_1_ack_in = outStream_LUMA_V_V_1_state.read()[1];
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_ack_out() {
    outStream_LUMA_V_V_1_ack_out = outStream_LUMA_V_V_TREADY.read();
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_LUMA_V_V_1_sel.read())) {
        outStream_LUMA_V_V_1_data_out = outStream_LUMA_V_V_1_payload_B.read();
    } else {
        outStream_LUMA_V_V_1_data_out = outStream_LUMA_V_V_1_payload_A.read();
    }
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_load_A() {
    outStream_LUMA_V_V_1_load_A = (outStream_LUMA_V_V_1_state_cmp_full.read() & ~outStream_LUMA_V_V_1_sel_wr.read());
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_load_B() {
    outStream_LUMA_V_V_1_load_B = (outStream_LUMA_V_V_1_sel_wr.read() & outStream_LUMA_V_V_1_state_cmp_full.read());
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_sel() {
    outStream_LUMA_V_V_1_sel = outStream_LUMA_V_V_1_sel_rd.read();
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_state_cmp_full() {
    outStream_LUMA_V_V_1_state_cmp_full =  (sc_logic) ((!outStream_LUMA_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_LUMA_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read()) && 
         !(esl_seteq<1,1,1>(outStream_grayscale_V_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state10_io.read())))) {
        outStream_LUMA_V_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_LUMA_V_V_1_vld_in = ap_const_logic_0;
    }
}

void ov7670_prova::thread_outStream_LUMA_V_V_1_vld_out() {
    outStream_LUMA_V_V_1_vld_out = outStream_LUMA_V_V_1_state.read()[0];
}

void ov7670_prova::thread_outStream_LUMA_V_V_TDATA() {
    outStream_LUMA_V_V_TDATA = outStream_LUMA_V_V_1_data_out.read();
}

void ov7670_prova::thread_outStream_LUMA_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, enable_raw_stream_re_read_fu_78_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grayscale_valid_load_reg_195.read())))) {
        outStream_LUMA_V_V_TDATA_blk_n = outStream_LUMA_V_V_1_state.read()[1];
    } else {
        outStream_LUMA_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void ov7670_prova::thread_outStream_LUMA_V_V_TVALID() {
    outStream_LUMA_V_V_TVALID = outStream_LUMA_V_V_1_state.read()[0];
}

void ov7670_prova::thread_outStream_grayscale_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_grayscale_V_AWREADY.read()))) {
        outStream_grayscale_V_AWVALID = ap_const_logic_1;
    } else {
        outStream_grayscale_V_AWVALID = ap_const_logic_0;
    }
}

void ov7670_prova::thread_outStream_grayscale_V_BREADY() {
    if ((!(esl_seteq<1,1,1>(outStream_grayscale_V_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state10_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        outStream_grayscale_V_BREADY = ap_const_logic_1;
    } else {
        outStream_grayscale_V_BREADY = ap_const_logic_0;
    }
}

void ov7670_prova::thread_outStream_grayscale_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_grayscale_V_WREADY.read()))) {
        outStream_grayscale_V_WVALID = ap_const_logic_1;
    } else {
        outStream_grayscale_V_WVALID = ap_const_logic_0;
    }
}

void ov7670_prova::thread_outStream_grayscale_V_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        outStream_grayscale_V_blk_n_AW = m_axi_outStream_grayscale_V_AWREADY.read();
    } else {
        outStream_grayscale_V_blk_n_AW = ap_const_logic_1;
    }
}

void ov7670_prova::thread_outStream_grayscale_V_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        outStream_grayscale_V_blk_n_B = m_axi_outStream_grayscale_V_BVALID.read();
    } else {
        outStream_grayscale_V_blk_n_B = ap_const_logic_1;
    }
}

void ov7670_prova::thread_outStream_grayscale_V_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        outStream_grayscale_V_blk_n_W = m_axi_outStream_grayscale_V_WREADY.read();
    } else {
        outStream_grayscale_V_blk_n_W = ap_const_logic_1;
    }
}

void ov7670_prova::thread_t_V_fu_130_p3() {
    t_V_fu_130_p3 = (!tmp_3_fu_124_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_3_fu_124_p2.read()[0].to_bool())? ap_const_lv32_0: inner_index_V.read());
}

void ov7670_prova::thread_tmp_3_fu_124_p2() {
    tmp_3_fu_124_p2 = (!inner_index_V.read().is_01() || !ap_const_lv32_4B000.is_01())? sc_lv<1>(): sc_lv<1>(inner_index_V.read() == ap_const_lv32_4B000);
}

void ov7670_prova::thread_tmp_7_fu_147_p1() {
    tmp_7_fu_147_p1 = esl_sext<64,32>(offset_fu_141_p2.read());
}

void ov7670_prova::thread_tmp_8_fu_157_p2() {
    tmp_8_fu_157_p2 = (!ap_const_lv32_1.is_01() || !t_V_fu_130_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(t_V_fu_130_p3.read()));
}

void ov7670_prova::thread_tmp_fu_138_p1() {
    tmp_fu_138_p1 = base_address_read_reg_180.read().range(32-1, 0);
}

void ov7670_prova::thread_tmp_s_fu_169_p2() {
    tmp_s_fu_169_p2 = (grayscale_valid_load_reg_195.read() ^ ap_const_lv1_1);
}

void ov7670_prova::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(grayscale_valid.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((!(esl_seteq<1,1,1>(inStream_V_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(grayscale_valid_load_load_fu_116_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_outStream_grayscale_V_AWREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_outStream_grayscale_V_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((!(esl_seteq<1,1,1>(outStream_grayscale_V_BVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state10_io.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((!(esl_seteq<1,1,1>(outStream_CHROMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_LUMA_V_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

void ov7670_prova::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_V_V_TDATA\" :  \"" << inStream_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_V_V_TVALID\" :  \"" << inStream_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inStream_V_V_TREADY\" :  \"" << inStream_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWVALID\" :  \"" << m_axi_outStream_grayscale_V_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWREADY\" :  \"" << m_axi_outStream_grayscale_V_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWADDR\" :  \"" << m_axi_outStream_grayscale_V_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWID\" :  \"" << m_axi_outStream_grayscale_V_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWLEN\" :  \"" << m_axi_outStream_grayscale_V_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWSIZE\" :  \"" << m_axi_outStream_grayscale_V_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWBURST\" :  \"" << m_axi_outStream_grayscale_V_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWLOCK\" :  \"" << m_axi_outStream_grayscale_V_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWCACHE\" :  \"" << m_axi_outStream_grayscale_V_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWPROT\" :  \"" << m_axi_outStream_grayscale_V_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWQOS\" :  \"" << m_axi_outStream_grayscale_V_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWREGION\" :  \"" << m_axi_outStream_grayscale_V_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_AWUSER\" :  \"" << m_axi_outStream_grayscale_V_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_WVALID\" :  \"" << m_axi_outStream_grayscale_V_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_WREADY\" :  \"" << m_axi_outStream_grayscale_V_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_WDATA\" :  \"" << m_axi_outStream_grayscale_V_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_WSTRB\" :  \"" << m_axi_outStream_grayscale_V_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_WLAST\" :  \"" << m_axi_outStream_grayscale_V_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_WID\" :  \"" << m_axi_outStream_grayscale_V_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_WUSER\" :  \"" << m_axi_outStream_grayscale_V_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARVALID\" :  \"" << m_axi_outStream_grayscale_V_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARREADY\" :  \"" << m_axi_outStream_grayscale_V_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARADDR\" :  \"" << m_axi_outStream_grayscale_V_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARID\" :  \"" << m_axi_outStream_grayscale_V_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARLEN\" :  \"" << m_axi_outStream_grayscale_V_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARSIZE\" :  \"" << m_axi_outStream_grayscale_V_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARBURST\" :  \"" << m_axi_outStream_grayscale_V_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARLOCK\" :  \"" << m_axi_outStream_grayscale_V_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARCACHE\" :  \"" << m_axi_outStream_grayscale_V_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARPROT\" :  \"" << m_axi_outStream_grayscale_V_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARQOS\" :  \"" << m_axi_outStream_grayscale_V_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARREGION\" :  \"" << m_axi_outStream_grayscale_V_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_ARUSER\" :  \"" << m_axi_outStream_grayscale_V_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_RVALID\" :  \"" << m_axi_outStream_grayscale_V_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_RREADY\" :  \"" << m_axi_outStream_grayscale_V_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_RDATA\" :  \"" << m_axi_outStream_grayscale_V_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_RLAST\" :  \"" << m_axi_outStream_grayscale_V_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_RID\" :  \"" << m_axi_outStream_grayscale_V_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_RUSER\" :  \"" << m_axi_outStream_grayscale_V_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_RRESP\" :  \"" << m_axi_outStream_grayscale_V_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_BVALID\" :  \"" << m_axi_outStream_grayscale_V_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_outStream_grayscale_V_BREADY\" :  \"" << m_axi_outStream_grayscale_V_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_BRESP\" :  \"" << m_axi_outStream_grayscale_V_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_BID\" :  \"" << m_axi_outStream_grayscale_V_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_outStream_grayscale_V_BUSER\" :  \"" << m_axi_outStream_grayscale_V_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"enable_raw_stream\" :  \"" << enable_raw_stream.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_LUMA_V_V_TDATA\" :  \"" << outStream_LUMA_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_LUMA_V_V_TVALID\" :  \"" << outStream_LUMA_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_LUMA_V_V_TREADY\" :  \"" << outStream_LUMA_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_CHROMA_V_V_TDATA\" :  \"" << outStream_CHROMA_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_CHROMA_V_V_TVALID\" :  \"" << outStream_CHROMA_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_CHROMA_V_V_TREADY\" :  \"" << outStream_CHROMA_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

