-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ov7670_prova is
generic (
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTSTREAM_GRAYSCALE_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStream_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_V_V_TVALID : IN STD_LOGIC;
    inStream_V_V_TREADY : OUT STD_LOGIC;
    m_axi_outStream_grayscale_V_AWVALID : OUT STD_LOGIC;
    m_axi_outStream_grayscale_V_AWREADY : IN STD_LOGIC;
    m_axi_outStream_grayscale_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_ADDR_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_ID_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_outStream_grayscale_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outStream_grayscale_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outStream_grayscale_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outStream_grayscale_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outStream_grayscale_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outStream_grayscale_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outStream_grayscale_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outStream_grayscale_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_AWUSER_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_WVALID : OUT STD_LOGIC;
    m_axi_outStream_grayscale_V_WREADY : IN STD_LOGIC;
    m_axi_outStream_grayscale_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_DATA_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_DATA_WIDTH/8-1 downto 0);
    m_axi_outStream_grayscale_V_WLAST : OUT STD_LOGIC;
    m_axi_outStream_grayscale_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_ID_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_WUSER_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_ARVALID : OUT STD_LOGIC;
    m_axi_outStream_grayscale_V_ARREADY : IN STD_LOGIC;
    m_axi_outStream_grayscale_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_ADDR_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_ID_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_outStream_grayscale_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outStream_grayscale_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outStream_grayscale_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outStream_grayscale_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outStream_grayscale_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outStream_grayscale_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outStream_grayscale_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outStream_grayscale_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_ARUSER_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_RVALID : IN STD_LOGIC;
    m_axi_outStream_grayscale_V_RREADY : OUT STD_LOGIC;
    m_axi_outStream_grayscale_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_DATA_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_RLAST : IN STD_LOGIC;
    m_axi_outStream_grayscale_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_ID_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_RUSER_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outStream_grayscale_V_BVALID : IN STD_LOGIC;
    m_axi_outStream_grayscale_V_BREADY : OUT STD_LOGIC;
    m_axi_outStream_grayscale_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outStream_grayscale_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_ID_WIDTH-1 downto 0);
    m_axi_outStream_grayscale_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTSTREAM_GRAYSCALE_V_BUSER_WIDTH-1 downto 0);
    enable_raw_stream : IN STD_LOGIC;
    outStream_LUMA_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_LUMA_V_V_TVALID : OUT STD_LOGIC;
    outStream_LUMA_V_V_TREADY : IN STD_LOGIC;
    outStream_CHROMA_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_CHROMA_V_V_TVALID : OUT STD_LOGIC;
    outStream_CHROMA_V_V_TREADY : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of ov7670_prova is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ov7670_prova,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=859,HLS_SYN_LUT=1247}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4B000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001001011000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inStream_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_V_0_vld_in : STD_LOGIC;
    signal inStream_V_V_0_vld_out : STD_LOGIC;
    signal inStream_V_V_0_ack_in : STD_LOGIC;
    signal inStream_V_V_0_ack_out : STD_LOGIC;
    signal inStream_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_V_0_sel : STD_LOGIC;
    signal inStream_V_V_0_load_A : STD_LOGIC;
    signal inStream_V_V_0_load_B : STD_LOGIC;
    signal inStream_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_LUMA_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_LUMA_V_V_1_vld_in : STD_LOGIC;
    signal outStream_LUMA_V_V_1_vld_out : STD_LOGIC;
    signal outStream_LUMA_V_V_1_ack_in : STD_LOGIC;
    signal outStream_LUMA_V_V_1_ack_out : STD_LOGIC;
    signal outStream_LUMA_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_LUMA_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_LUMA_V_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_LUMA_V_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_LUMA_V_V_1_sel : STD_LOGIC;
    signal outStream_LUMA_V_V_1_load_A : STD_LOGIC;
    signal outStream_LUMA_V_V_1_load_B : STD_LOGIC;
    signal outStream_LUMA_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_LUMA_V_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_CHROMA_V_V_1_vld_in : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_vld_out : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_ack_in : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_ack_out : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_CHROMA_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_CHROMA_V_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_CHROMA_V_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_CHROMA_V_V_1_sel : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_load_A : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_load_B : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_CHROMA_V_V_1_state_cmp_full : STD_LOGIC;
    signal base_address : STD_LOGIC_VECTOR (63 downto 0);
    signal grayscale_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal inner_index_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal inStream_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal outStream_grayscale_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outStream_grayscale_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal outStream_grayscale_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal outStream_LUMA_V_V_TDATA_blk_n : STD_LOGIC;
    signal enable_raw_stream_re_read_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grayscale_valid_load_reg_195 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_CHROMA_V_V_TDATA_blk_n : STD_LOGIC;
    signal grayscale_valid_load_load_fu_116_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outStream_grayscale_V_AWVALID : STD_LOGIC;
    signal outStream_grayscale_V_AWREADY : STD_LOGIC;
    signal outStream_grayscale_V_WVALID : STD_LOGIC;
    signal outStream_grayscale_V_WREADY : STD_LOGIC;
    signal outStream_grayscale_V_ARREADY : STD_LOGIC;
    signal outStream_grayscale_V_RVALID : STD_LOGIC;
    signal outStream_grayscale_V_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_grayscale_V_RLAST : STD_LOGIC;
    signal outStream_grayscale_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_grayscale_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_grayscale_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_grayscale_V_BVALID : STD_LOGIC;
    signal outStream_grayscale_V_BREADY : STD_LOGIC;
    signal outStream_grayscale_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_grayscale_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_grayscale_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_address_read_reg_180 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op35_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_V_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_grayscale_s_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_outStream_grayscale_V_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_outStream_grayscale_V_AWREADY : STD_LOGIC;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_reg_ioackin_outStream_grayscale_V_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_outStream_grayscale_V_WREADY : STD_LOGIC;
    signal tmp_s_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal ap_predicate_op57_write_state11 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal tmp_8_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal tmp_3_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_fu_130_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component ov7670_prova_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        base_address : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ov7670_prova_outStream_grayscale_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ov7670_prova_AXILiteS_s_axi_U : component ov7670_prova_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        base_address => base_address);

    ov7670_prova_outStream_grayscale_V_m_axi_U : component ov7670_prova_outStream_grayscale_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTSTREAM_GRAYSCALE_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTSTREAM_GRAYSCALE_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTSTREAM_GRAYSCALE_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTSTREAM_GRAYSCALE_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTSTREAM_GRAYSCALE_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTSTREAM_GRAYSCALE_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTSTREAM_GRAYSCALE_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTSTREAM_GRAYSCALE_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUTSTREAM_GRAYSCALE_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUTSTREAM_GRAYSCALE_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTSTREAM_GRAYSCALE_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTSTREAM_GRAYSCALE_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_outStream_grayscale_V_AWVALID,
        AWREADY => m_axi_outStream_grayscale_V_AWREADY,
        AWADDR => m_axi_outStream_grayscale_V_AWADDR,
        AWID => m_axi_outStream_grayscale_V_AWID,
        AWLEN => m_axi_outStream_grayscale_V_AWLEN,
        AWSIZE => m_axi_outStream_grayscale_V_AWSIZE,
        AWBURST => m_axi_outStream_grayscale_V_AWBURST,
        AWLOCK => m_axi_outStream_grayscale_V_AWLOCK,
        AWCACHE => m_axi_outStream_grayscale_V_AWCACHE,
        AWPROT => m_axi_outStream_grayscale_V_AWPROT,
        AWQOS => m_axi_outStream_grayscale_V_AWQOS,
        AWREGION => m_axi_outStream_grayscale_V_AWREGION,
        AWUSER => m_axi_outStream_grayscale_V_AWUSER,
        WVALID => m_axi_outStream_grayscale_V_WVALID,
        WREADY => m_axi_outStream_grayscale_V_WREADY,
        WDATA => m_axi_outStream_grayscale_V_WDATA,
        WSTRB => m_axi_outStream_grayscale_V_WSTRB,
        WLAST => m_axi_outStream_grayscale_V_WLAST,
        WID => m_axi_outStream_grayscale_V_WID,
        WUSER => m_axi_outStream_grayscale_V_WUSER,
        ARVALID => m_axi_outStream_grayscale_V_ARVALID,
        ARREADY => m_axi_outStream_grayscale_V_ARREADY,
        ARADDR => m_axi_outStream_grayscale_V_ARADDR,
        ARID => m_axi_outStream_grayscale_V_ARID,
        ARLEN => m_axi_outStream_grayscale_V_ARLEN,
        ARSIZE => m_axi_outStream_grayscale_V_ARSIZE,
        ARBURST => m_axi_outStream_grayscale_V_ARBURST,
        ARLOCK => m_axi_outStream_grayscale_V_ARLOCK,
        ARCACHE => m_axi_outStream_grayscale_V_ARCACHE,
        ARPROT => m_axi_outStream_grayscale_V_ARPROT,
        ARQOS => m_axi_outStream_grayscale_V_ARQOS,
        ARREGION => m_axi_outStream_grayscale_V_ARREGION,
        ARUSER => m_axi_outStream_grayscale_V_ARUSER,
        RVALID => m_axi_outStream_grayscale_V_RVALID,
        RREADY => m_axi_outStream_grayscale_V_RREADY,
        RDATA => m_axi_outStream_grayscale_V_RDATA,
        RLAST => m_axi_outStream_grayscale_V_RLAST,
        RID => m_axi_outStream_grayscale_V_RID,
        RUSER => m_axi_outStream_grayscale_V_RUSER,
        RRESP => m_axi_outStream_grayscale_V_RRESP,
        BVALID => m_axi_outStream_grayscale_V_BVALID,
        BREADY => m_axi_outStream_grayscale_V_BREADY,
        BRESP => m_axi_outStream_grayscale_V_BRESP,
        BID => m_axi_outStream_grayscale_V_BID,
        BUSER => m_axi_outStream_grayscale_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => outStream_grayscale_V_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => outStream_grayscale_V_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => outStream_grayscale_V_RDATA,
        I_RID => outStream_grayscale_V_RID,
        I_RUSER => outStream_grayscale_V_RUSER,
        I_RRESP => outStream_grayscale_V_RRESP,
        I_RLAST => outStream_grayscale_V_RLAST,
        I_AWVALID => outStream_grayscale_V_AWVALID,
        I_AWREADY => outStream_grayscale_V_AWREADY,
        I_AWADDR => outStream_grayscale_s_reg_200,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => outStream_grayscale_V_WVALID,
        I_WREADY => outStream_grayscale_V_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => outStream_grayscale_V_BVALID,
        I_BREADY => outStream_grayscale_V_BREADY,
        I_BRESP => outStream_grayscale_V_BRESP,
        I_BID => outStream_grayscale_V_BID,
        I_BUSER => outStream_grayscale_V_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_outStream_grayscale_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outStream_grayscale_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_outStream_grayscale_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_outStream_grayscale_V_AWREADY <= ap_const_logic_0;
                    elsif ((outStream_grayscale_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_outStream_grayscale_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_outStream_grayscale_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outStream_grayscale_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_outStream_grayscale_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_outStream_grayscale_V_WREADY <= ap_const_logic_0;
                    elsif ((outStream_grayscale_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_outStream_grayscale_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grayscale_valid_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grayscale_valid <= ap_const_lv1_0;
            else
                if ((not(((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0) or (outStream_LUMA_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_io))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grayscale_valid <= tmp_s_fu_169_p2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_V_0_ack_out = ap_const_logic_1) and (inStream_V_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_V_0_sel_rd <= not(inStream_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_V_0_ack_in = ap_const_logic_1) and (inStream_V_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_V_0_sel_wr <= not(inStream_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_V_0_state = ap_const_lv2_2) and (inStream_V_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_V_0_state = ap_const_lv2_3) and (inStream_V_V_0_vld_in = ap_const_logic_0) and (inStream_V_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_V_0_state = ap_const_lv2_1) and (inStream_V_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_V_0_state = ap_const_lv2_3) and (inStream_V_V_0_ack_out = ap_const_logic_0) and (inStream_V_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_V_0_vld_in = ap_const_logic_0) and (inStream_V_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_V_0_ack_out = ap_const_logic_0) and (inStream_V_V_0_vld_in = ap_const_logic_1))) and (inStream_V_V_0_state = ap_const_lv2_3)) or ((inStream_V_V_0_state = ap_const_lv2_1) and (inStream_V_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_V_0_state = ap_const_lv2_2) and (inStream_V_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inner_index_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inner_index_V <= ap_const_lv32_0;
            else
                if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (grayscale_valid_load_load_fu_116_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    inner_index_V <= tmp_8_fu_157_p2;
                end if; 
            end if;
        end if;
    end process;


    outStream_CHROMA_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_CHROMA_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_CHROMA_V_V_1_ack_out = ap_const_logic_1) and (outStream_CHROMA_V_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_CHROMA_V_V_1_sel_rd <= not(outStream_CHROMA_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_CHROMA_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_CHROMA_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_1) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_CHROMA_V_V_1_sel_wr <= not(outStream_CHROMA_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_CHROMA_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_CHROMA_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_CHROMA_V_V_1_state = ap_const_lv2_2) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_0)) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_0) and (outStream_CHROMA_V_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_CHROMA_V_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) and (outStream_CHROMA_V_V_1_ack_out = ap_const_logic_0)) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_1_ack_out = ap_const_logic_0) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_CHROMA_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_CHROMA_V_V_1_vld_in = ap_const_logic_0) and (outStream_CHROMA_V_V_1_ack_out = ap_const_logic_1))) and not(((outStream_CHROMA_V_V_1_ack_out = ap_const_logic_0) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1))) and (outStream_CHROMA_V_V_1_state = ap_const_lv2_3)) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) and (outStream_CHROMA_V_V_1_ack_out = ap_const_logic_1)) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_2) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_CHROMA_V_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_CHROMA_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_LUMA_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_LUMA_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_LUMA_V_V_1_ack_out = ap_const_logic_1) and (outStream_LUMA_V_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_LUMA_V_V_1_sel_rd <= not(outStream_LUMA_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_LUMA_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_LUMA_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_LUMA_V_V_1_ack_in = ap_const_logic_1) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_LUMA_V_V_1_sel_wr <= not(outStream_LUMA_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_LUMA_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_LUMA_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_LUMA_V_V_1_state = ap_const_lv2_2) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_0) and (outStream_LUMA_V_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_LUMA_V_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_LUMA_V_V_1_state = ap_const_lv2_1) and (outStream_LUMA_V_V_1_ack_out = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_1_ack_out = ap_const_logic_0) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_LUMA_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_LUMA_V_V_1_vld_in = ap_const_logic_0) and (outStream_LUMA_V_V_1_ack_out = ap_const_logic_1))) and not(((outStream_LUMA_V_V_1_ack_out = ap_const_logic_0) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_1))) and (outStream_LUMA_V_V_1_state = ap_const_lv2_3)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_1) and (outStream_LUMA_V_V_1_ack_out = ap_const_logic_1)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_2) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_LUMA_V_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_LUMA_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                base_address_read_reg_180 <= base_address;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                grayscale_valid_load_reg_195 <= grayscale_valid;
                tmp_V_reg_189 <= inStream_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_V_0_load_A = ap_const_logic_1)) then
                inStream_V_V_0_payload_A <= inStream_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_V_0_load_B = ap_const_logic_1)) then
                inStream_V_V_0_payload_B <= inStream_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_CHROMA_V_V_1_load_A = ap_const_logic_1)) then
                outStream_CHROMA_V_V_1_payload_A <= inStream_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_CHROMA_V_V_1_load_B = ap_const_logic_1)) then
                outStream_CHROMA_V_V_1_payload_B <= inStream_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_LUMA_V_V_1_load_A = ap_const_logic_1)) then
                outStream_LUMA_V_V_1_payload_A <= tmp_V_reg_189;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_LUMA_V_V_1_load_B = ap_const_logic_1)) then
                outStream_LUMA_V_V_1_payload_B <= tmp_V_reg_189;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (grayscale_valid_load_load_fu_116_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                outStream_grayscale_s_reg_200 <= tmp_7_fu_147_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inStream_V_V_0_vld_out, outStream_LUMA_V_V_1_ack_in, outStream_CHROMA_V_V_1_ack_in, grayscale_valid, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state11, grayscale_valid_load_load_fu_116_p1, ap_CS_fsm_state3, outStream_grayscale_V_BVALID, ap_block_state2_io, ap_sig_ioackin_outStream_grayscale_V_AWREADY, ap_block_state10_io, ap_sig_ioackin_outStream_grayscale_V_WREADY, ap_block_state11_io, ap_block_state3_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (grayscale_valid = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (grayscale_valid_load_load_fu_116_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_outStream_grayscale_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_outStream_grayscale_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((outStream_grayscale_V_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state10_io))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0) or (outStream_LUMA_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_io))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state10_io_assign_proc : process(outStream_LUMA_V_V_1_ack_in, enable_raw_stream_re_read_fu_78_p2)
    begin
                ap_block_state10_io <= ((enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1) and (outStream_LUMA_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(outStream_LUMA_V_V_1_ack_in, outStream_CHROMA_V_V_1_ack_in)
    begin
                ap_block_state11 <= ((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0) or (outStream_LUMA_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state11_io_assign_proc : process(outStream_LUMA_V_V_1_ack_in, ap_predicate_op57_write_state11)
    begin
                ap_block_state11_io <= ((outStream_LUMA_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op57_write_state11 = ap_const_boolean_1));
    end process;


    ap_block_state2_io_assign_proc : process(outStream_CHROMA_V_V_1_ack_in, ap_predicate_op35_write_state2)
    begin
                ap_block_state2_io <= ((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op35_write_state2 = ap_const_boolean_1));
    end process;


    ap_block_state3_io_assign_proc : process(outStream_CHROMA_V_V_1_ack_in, enable_raw_stream_re_read_fu_78_p2)
    begin
                ap_block_state3_io <= ((enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1) and (outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(outStream_LUMA_V_V_1_ack_in, outStream_CHROMA_V_V_1_ack_in, ap_CS_fsm_state11, ap_block_state11_io)
    begin
        if ((not(((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0) or (outStream_LUMA_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_io))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op35_write_state2_assign_proc : process(grayscale_valid, enable_raw_stream_re_read_fu_78_p2)
    begin
                ap_predicate_op35_write_state2 <= ((enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1) and (grayscale_valid = ap_const_lv1_0));
    end process;


    ap_predicate_op57_write_state11_assign_proc : process(enable_raw_stream_re_read_fu_78_p2, grayscale_valid_load_reg_195)
    begin
                ap_predicate_op57_write_state11 <= ((grayscale_valid_load_reg_195 = ap_const_lv1_1) and (enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(outStream_LUMA_V_V_1_ack_in, outStream_CHROMA_V_V_1_ack_in, ap_CS_fsm_state11, ap_block_state11_io)
    begin
        if ((not(((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0) or (outStream_LUMA_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_io))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_outStream_grayscale_V_AWREADY_assign_proc : process(outStream_grayscale_V_AWREADY, ap_reg_ioackin_outStream_grayscale_V_AWREADY)
    begin
        if ((ap_reg_ioackin_outStream_grayscale_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_outStream_grayscale_V_AWREADY <= outStream_grayscale_V_AWREADY;
        else 
            ap_sig_ioackin_outStream_grayscale_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_outStream_grayscale_V_WREADY_assign_proc : process(outStream_grayscale_V_WREADY, ap_reg_ioackin_outStream_grayscale_V_WREADY)
    begin
        if ((ap_reg_ioackin_outStream_grayscale_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_outStream_grayscale_V_WREADY <= outStream_grayscale_V_WREADY;
        else 
            ap_sig_ioackin_outStream_grayscale_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    enable_raw_stream_re_read_fu_78_p2 <= (0=>enable_raw_stream, others=>'-');
    grayscale_valid_load_load_fu_116_p1 <= grayscale_valid;
    inStream_V_V_0_ack_in <= inStream_V_V_0_state(1);

    inStream_V_V_0_ack_out_assign_proc : process(inStream_V_V_0_vld_out, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inStream_V_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_V_0_data_out_assign_proc : process(inStream_V_V_0_payload_A, inStream_V_V_0_payload_B, inStream_V_V_0_sel)
    begin
        if ((inStream_V_V_0_sel = ap_const_logic_1)) then 
            inStream_V_V_0_data_out <= inStream_V_V_0_payload_B;
        else 
            inStream_V_V_0_data_out <= inStream_V_V_0_payload_A;
        end if; 
    end process;

    inStream_V_V_0_load_A <= (inStream_V_V_0_state_cmp_full and not(inStream_V_V_0_sel_wr));
    inStream_V_V_0_load_B <= (inStream_V_V_0_state_cmp_full and inStream_V_V_0_sel_wr);
    inStream_V_V_0_sel <= inStream_V_V_0_sel_rd;
    inStream_V_V_0_state_cmp_full <= '0' when (inStream_V_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_V_0_vld_in <= inStream_V_V_TVALID;
    inStream_V_V_0_vld_out <= inStream_V_V_0_state(0);

    inStream_V_V_TDATA_blk_n_assign_proc : process(inStream_V_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inStream_V_V_TDATA_blk_n <= inStream_V_V_0_state(0);
        else 
            inStream_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_V_V_TREADY <= inStream_V_V_0_state(1);
    offset_fu_141_p2 <= std_logic_vector(unsigned(t_V_fu_130_p3) + unsigned(tmp_fu_138_p1));
    outStream_CHROMA_V_V_1_ack_in <= outStream_CHROMA_V_V_1_state(1);
    outStream_CHROMA_V_V_1_ack_out <= outStream_CHROMA_V_V_TREADY;

    outStream_CHROMA_V_V_1_data_out_assign_proc : process(outStream_CHROMA_V_V_1_payload_A, outStream_CHROMA_V_V_1_payload_B, outStream_CHROMA_V_V_1_sel)
    begin
        if ((outStream_CHROMA_V_V_1_sel = ap_const_logic_1)) then 
            outStream_CHROMA_V_V_1_data_out <= outStream_CHROMA_V_V_1_payload_B;
        else 
            outStream_CHROMA_V_V_1_data_out <= outStream_CHROMA_V_V_1_payload_A;
        end if; 
    end process;

    outStream_CHROMA_V_V_1_load_A <= (outStream_CHROMA_V_V_1_state_cmp_full and not(outStream_CHROMA_V_V_1_sel_wr));
    outStream_CHROMA_V_V_1_load_B <= (outStream_CHROMA_V_V_1_state_cmp_full and outStream_CHROMA_V_V_1_sel_wr);
    outStream_CHROMA_V_V_1_sel <= outStream_CHROMA_V_V_1_sel_rd;
    outStream_CHROMA_V_V_1_state_cmp_full <= '0' when (outStream_CHROMA_V_V_1_state = ap_const_lv2_1) else '1';

    outStream_CHROMA_V_V_1_vld_in_assign_proc : process(inStream_V_V_0_vld_out, ap_CS_fsm_state2, ap_predicate_op35_write_state2, ap_block_state2_io)
    begin
        if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_predicate_op35_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            outStream_CHROMA_V_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_CHROMA_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_CHROMA_V_V_1_vld_out <= outStream_CHROMA_V_V_1_state(0);
    outStream_CHROMA_V_V_TDATA <= outStream_CHROMA_V_V_1_data_out;

    outStream_CHROMA_V_V_TDATA_blk_n_assign_proc : process(outStream_CHROMA_V_V_1_state, grayscale_valid, ap_CS_fsm_state2, enable_raw_stream_re_read_fu_78_p2, ap_CS_fsm_state3)
    begin
        if ((((enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1) and (grayscale_valid = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            outStream_CHROMA_V_V_TDATA_blk_n <= outStream_CHROMA_V_V_1_state(1);
        else 
            outStream_CHROMA_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_CHROMA_V_V_TVALID <= outStream_CHROMA_V_V_1_state(0);
    outStream_LUMA_V_V_1_ack_in <= outStream_LUMA_V_V_1_state(1);
    outStream_LUMA_V_V_1_ack_out <= outStream_LUMA_V_V_TREADY;

    outStream_LUMA_V_V_1_data_out_assign_proc : process(outStream_LUMA_V_V_1_payload_A, outStream_LUMA_V_V_1_payload_B, outStream_LUMA_V_V_1_sel)
    begin
        if ((outStream_LUMA_V_V_1_sel = ap_const_logic_1)) then 
            outStream_LUMA_V_V_1_data_out <= outStream_LUMA_V_V_1_payload_B;
        else 
            outStream_LUMA_V_V_1_data_out <= outStream_LUMA_V_V_1_payload_A;
        end if; 
    end process;

    outStream_LUMA_V_V_1_load_A <= (outStream_LUMA_V_V_1_state_cmp_full and not(outStream_LUMA_V_V_1_sel_wr));
    outStream_LUMA_V_V_1_load_B <= (outStream_LUMA_V_V_1_state_cmp_full and outStream_LUMA_V_V_1_sel_wr);
    outStream_LUMA_V_V_1_sel <= outStream_LUMA_V_V_1_sel_rd;
    outStream_LUMA_V_V_1_state_cmp_full <= '0' when (outStream_LUMA_V_V_1_state = ap_const_lv2_1) else '1';

    outStream_LUMA_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_state10, enable_raw_stream_re_read_fu_78_p2, outStream_grayscale_V_BVALID, ap_block_state10_io)
    begin
        if ((not(((outStream_grayscale_V_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state10_io))) and (enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            outStream_LUMA_V_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_LUMA_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_LUMA_V_V_1_vld_out <= outStream_LUMA_V_V_1_state(0);
    outStream_LUMA_V_V_TDATA <= outStream_LUMA_V_V_1_data_out;

    outStream_LUMA_V_V_TDATA_blk_n_assign_proc : process(outStream_LUMA_V_V_1_state, ap_CS_fsm_state10, enable_raw_stream_re_read_fu_78_p2, ap_CS_fsm_state11, grayscale_valid_load_reg_195)
    begin
        if ((((grayscale_valid_load_reg_195 = ap_const_lv1_1) and (enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((enable_raw_stream_re_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            outStream_LUMA_V_V_TDATA_blk_n <= outStream_LUMA_V_V_1_state(1);
        else 
            outStream_LUMA_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_LUMA_V_V_TVALID <= outStream_LUMA_V_V_1_state(0);

    outStream_grayscale_V_AWVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_outStream_grayscale_V_AWREADY)
    begin
        if (((ap_reg_ioackin_outStream_grayscale_V_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            outStream_grayscale_V_AWVALID <= ap_const_logic_1;
        else 
            outStream_grayscale_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    outStream_grayscale_V_BREADY_assign_proc : process(ap_CS_fsm_state10, outStream_grayscale_V_BVALID, ap_block_state10_io)
    begin
        if ((not(((outStream_grayscale_V_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state10_io))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            outStream_grayscale_V_BREADY <= ap_const_logic_1;
        else 
            outStream_grayscale_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    outStream_grayscale_V_WVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_outStream_grayscale_V_WREADY)
    begin
        if (((ap_reg_ioackin_outStream_grayscale_V_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_grayscale_V_WVALID <= ap_const_logic_1;
        else 
            outStream_grayscale_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    outStream_grayscale_V_blk_n_AW_assign_proc : process(m_axi_outStream_grayscale_V_AWREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outStream_grayscale_V_blk_n_AW <= m_axi_outStream_grayscale_V_AWREADY;
        else 
            outStream_grayscale_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    outStream_grayscale_V_blk_n_B_assign_proc : process(m_axi_outStream_grayscale_V_BVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            outStream_grayscale_V_blk_n_B <= m_axi_outStream_grayscale_V_BVALID;
        else 
            outStream_grayscale_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    outStream_grayscale_V_blk_n_W_assign_proc : process(m_axi_outStream_grayscale_V_WREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            outStream_grayscale_V_blk_n_W <= m_axi_outStream_grayscale_V_WREADY;
        else 
            outStream_grayscale_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    t_V_fu_130_p3 <= 
        ap_const_lv32_0 when (tmp_3_fu_124_p2(0) = '1') else 
        inner_index_V;
    tmp_3_fu_124_p2 <= "1" when (inner_index_V = ap_const_lv32_4B000) else "0";
        tmp_7_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(offset_fu_141_p2),64));

    tmp_8_fu_157_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(t_V_fu_130_p3));
    tmp_fu_138_p1 <= base_address_read_reg_180(32 - 1 downto 0);
    tmp_s_fu_169_p2 <= (grayscale_valid_load_reg_195 xor ap_const_lv1_1);
end behav;
